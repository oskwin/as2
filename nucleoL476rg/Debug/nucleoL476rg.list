
nucleoL476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000451c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080046ac  080046ac  000146ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800473c  0800473c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800473c  0800473c  0001473c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004744  08004744  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004748  08004748  00014748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800474c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  080047bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080047bc  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3c5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e60  00000000  00000000  0002e465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  000302c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  00030e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f94  00000000  00000000  00031930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db02  00000000  00000000  000588c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0351  00000000  00000000  000663c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156717  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d0  00000000  00000000  00156768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004694 	.word	0x08004694

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004694 	.word	0x08004694

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	; 0x38
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fb45 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f837 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f955 	bl	8000840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f923 	bl	80007e0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800059a:	f000 f891 	bl	80006c0 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);  // Function to read the time from the RTC shadow register
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	4813      	ldr	r0, [pc, #76]	; (80005f4 <main+0x70>)
 80005a8:	f002 faf2 	bl	8002b90 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN); // Function to read the date form the RTC shadow register
 80005ac:	f107 0318 	add.w	r3, r7, #24
 80005b0:	2200      	movs	r2, #0
 80005b2:	4619      	mov	r1, r3
 80005b4:	480f      	ldr	r0, [pc, #60]	; (80005f4 <main+0x70>)
 80005b6:	f002 fbce 	bl	8002d56 <HAL_RTC_GetDate>

	  sprintf((char*)buf,"Time: %2u:%2u:%2u\r", (unsigned int)rtcTime.Hours, (unsigned int)rtcTime.Minutes, (unsigned int)rtcTime.Seconds);
 80005ba:	7f3b      	ldrb	r3, [r7, #28]
 80005bc:	461a      	mov	r2, r3
 80005be:	7f7b      	ldrb	r3, [r7, #29]
 80005c0:	4619      	mov	r1, r3
 80005c2:	7fbb      	ldrb	r3, [r7, #30]
 80005c4:	1d38      	adds	r0, r7, #4
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	460b      	mov	r3, r1
 80005ca:	490b      	ldr	r1, [pc, #44]	; (80005f8 <main+0x74>)
 80005cc:	f003 fbf4 	bl	8003db8 <siprintf>
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fdfc 	bl	80001d0 <strlen>
 80005d8:	4603      	mov	r3, r0
 80005da:	b29a      	uxth	r2, r3
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <main+0x78>)
 80005e4:	f002 feba 	bl	800335c <HAL_UART_Transmit>

	  HAL_Delay(1000);	// HAL Delay of 1000 millisecond
 80005e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ec:	f000 fb90 	bl	8000d10 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);  // Function to read the time from the RTC shadow register
 80005f0:	e7d5      	b.n	800059e <main+0x1a>
 80005f2:	bf00      	nop
 80005f4:	2000008c 	.word	0x2000008c
 80005f8:	080046ac 	.word	0x080046ac
 80005fc:	200000b0 	.word	0x200000b0

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b096      	sub	sp, #88	; 0x58
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	2244      	movs	r2, #68	; 0x44
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fbca 	bl	8003da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	463b      	mov	r3, r7
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000622:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000626:	f000 fe89 	bl	800133c <HAL_PWREx_ControlVoltageScaling>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000630:	f000 f96c 	bl	800090c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000634:	f000 fe64 	bl	8001300 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <SystemClock_Config+0xbc>)
 800063a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800063e:	4a1f      	ldr	r2, [pc, #124]	; (80006bc <SystemClock_Config+0xbc>)
 8000640:	f023 0318 	bic.w	r3, r3, #24
 8000644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000648:	2306      	movs	r3, #6
 800064a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000654:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000666:	230a      	movs	r3, #10
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4618      	mov	r0, r3
 800067c:	f000 feb4 	bl	80013e8 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000686:	f000 f941 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2303      	movs	r3, #3
 8000690:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	2104      	movs	r1, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fa7c 	bl	8001ba0 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006ae:	f000 f92d 	bl	800090c <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3758      	adds	r7, #88	; 0x58
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b092      	sub	sp, #72	; 0x48
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006d6:	2300      	movs	r3, #0
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	222c      	movs	r2, #44	; 0x2c
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fb61 	bl	8003da8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006e6:	4b3c      	ldr	r3, [pc, #240]	; (80007d8 <MX_RTC_Init+0x118>)
 80006e8:	4a3c      	ldr	r2, [pc, #240]	; (80007dc <MX_RTC_Init+0x11c>)
 80006ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ec:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <MX_RTC_Init+0x118>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006f2:	4b39      	ldr	r3, [pc, #228]	; (80007d8 <MX_RTC_Init+0x118>)
 80006f4:	227f      	movs	r2, #127	; 0x7f
 80006f6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006f8:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <MX_RTC_Init+0x118>)
 80006fa:	22ff      	movs	r2, #255	; 0xff
 80006fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006fe:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <MX_RTC_Init+0x118>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000704:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <MX_RTC_Init+0x118>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800070a:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <MX_RTC_Init+0x118>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000710:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <MX_RTC_Init+0x118>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000716:	4830      	ldr	r0, [pc, #192]	; (80007d8 <MX_RTC_Init+0x118>)
 8000718:	f002 f922 	bl	8002960 <HAL_RTC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000722:	f000 f8f3 	bl	800090c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000726:	2300      	movs	r3, #0
 8000728:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 800072c:	2300      	movs	r3, #0
 800072e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000732:	2300      	movs	r3, #0
 8000734:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000738:	2300      	movs	r3, #0
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800073c:	2300      	movs	r3, #0
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000740:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000744:	2201      	movs	r2, #1
 8000746:	4619      	mov	r1, r3
 8000748:	4823      	ldr	r0, [pc, #140]	; (80007d8 <MX_RTC_Init+0x118>)
 800074a:	f002 f984 	bl	8002a56 <HAL_RTC_SetTime>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000754:	f000 f8da 	bl	800090c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000758:	2301      	movs	r3, #1
 800075a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800075e:	2301      	movs	r3, #1
 8000760:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000764:	2301      	movs	r3, #1
 8000766:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 800076a:	2300      	movs	r3, #0
 800076c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000770:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000774:	2201      	movs	r2, #1
 8000776:	4619      	mov	r1, r3
 8000778:	4817      	ldr	r0, [pc, #92]	; (80007d8 <MX_RTC_Init+0x118>)
 800077a:	f002 fa65 	bl	8002c48 <HAL_RTC_SetDate>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000784:	f000 f8c2 	bl	800090c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000788:	2300      	movs	r3, #0
 800078a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800078c:	2300      	movs	r3, #0
 800078e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000790:	2300      	movs	r3, #0
 8000792:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80007b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2201      	movs	r2, #1
 80007bc:	4619      	mov	r1, r3
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <MX_RTC_Init+0x118>)
 80007c0:	f002 fb16 	bl	8002df0 <HAL_RTC_SetAlarm_IT>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 80007ca:	f000 f89f 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	3748      	adds	r7, #72	; 0x48
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000008c 	.word	0x2000008c
 80007dc:	40002800 	.word	0x40002800

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007e6:	4a15      	ldr	r2, [pc, #84]	; (800083c <MX_USART2_UART_Init+0x5c>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000824:	f002 fd4c 	bl	80032c0 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 f86d 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000b0 	.word	0x200000b0
 800083c:	40004400 	.word	0x40004400

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a2a      	ldr	r2, [pc, #168]	; (8000904 <MX_GPIO_Init+0xc4>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b28      	ldr	r3, [pc, #160]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a24      	ldr	r2, [pc, #144]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_GPIO_Init+0xc4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <MX_GPIO_Init+0xc4>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_GPIO_Init+0xc4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <MX_GPIO_Init+0xc4>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_GPIO_Init+0xc4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f000 fd07 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <MX_GPIO_Init+0xc8>)
 80008da:	f000 fb4f 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008de:	2320      	movs	r3, #32
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f8:	f000 fb40 	bl	8000f7c <HAL_GPIO_Init>

}
 80008fc:	bf00      	nop
 80008fe:	3728      	adds	r7, #40	; 0x28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000
 8000908:	48000800 	.word	0x48000800

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x44>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6613      	str	r3, [r2, #96]	; 0x60
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x44>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6593      	str	r3, [r2, #88]	; 0x58
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b0a4      	sub	sp, #144	; 0x90
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	2288      	movs	r2, #136	; 0x88
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f003 fa19 	bl	8003da8 <memset>
  if(hrtc->Instance==RTC)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a14      	ldr	r2, [pc, #80]	; (80009cc <HAL_RTC_MspInit+0x6c>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d120      	bne.n	80009c2 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000984:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	4618      	mov	r0, r3
 8000994:	f001 fb28 	bl	8001fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800099e:	f7ff ffb5 	bl	800090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_RTC_MspInit+0x70>)
 80009a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009a8:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <HAL_RTC_MspInit+0x70>)
 80009aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2029      	movs	r0, #41	; 0x29
 80009b8:	f000 faa9 	bl	8000f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80009bc:	2029      	movs	r0, #41	; 0x29
 80009be:	f000 fac2 	bl	8000f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3790      	adds	r7, #144	; 0x90
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40002800 	.word	0x40002800
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0ac      	sub	sp, #176	; 0xb0
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2288      	movs	r2, #136	; 0x88
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 f9d7 	bl	8003da8 <memset>
  if(huart->Instance==USART2)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <HAL_UART_MspInit+0xb0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d13b      	bne.n	8000a7c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fae9 	bl	8001fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a1c:	f7ff ff76 	bl	800090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a24:	4a18      	ldr	r2, [pc, #96]	; (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a50:	230c      	movs	r3, #12
 8000a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f000 fa80 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	37b0      	adds	r7, #176	; 0xb0
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40004400 	.word	0x40004400
 8000a88:	40021000 	.word	0x40021000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 f8fa 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <RTC_Alarm_IRQHandler+0x10>)
 8000ae6:	f002 fabf 	bl	8003068 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000008c 	.word	0x2000008c

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f003 f916 	bl	8003d54 <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20018000 	.word	0x20018000
 8000b54:	00000400 	.word	0x00000400
 8000b58:	20000134 	.word	0x20000134
 8000b5c:	20000150 	.word	0x20000150

08000b60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <SystemInit+0x5c>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <SystemInit+0x5c>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <SystemInit+0x60>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a11      	ldr	r2, [pc, #68]	; (8000bc0 <SystemInit+0x60>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <SystemInit+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <SystemInit+0x60>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <SystemInit+0x60>)
 8000b8c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b90:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b94:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <SystemInit+0x60>)
 8000b98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b9c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <SystemInit+0x60>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <SystemInit+0x60>)
 8000ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ba8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SystemInit+0x60>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc8:	f7ff ffca 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bcc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bce:	e003      	b.n	8000bd8 <LoopCopyDataInit>

08000bd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bd6:	3104      	adds	r1, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bd8:	480a      	ldr	r0, [pc, #40]	; (8000c04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bdc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000be0:	d3f6      	bcc.n	8000bd0 <CopyDataInit>
	ldr	r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000be4:	e002      	b.n	8000bec <LoopFillZerobss>

08000be6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000be6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000be8:	f842 3b04 	str.w	r3, [r2], #4

08000bec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <LoopForever+0x16>)
	cmp	r2, r3
 8000bee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bf0:	d3f9      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f003 f8b5 	bl	8003d60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf6:	f7ff fcc5 	bl	8000584 <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bfc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c00:	0800474c 	.word	0x0800474c
	ldr	r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c08:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000c0c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000c10:	2000014c 	.word	0x2000014c

08000c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_Init+0x3c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <HAL_Init+0x3c>)
 8000c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2e:	2003      	movs	r0, #3
 8000c30:	f000 f962 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c34:	2000      	movs	r0, #0
 8000c36:	f000 f80f 	bl	8000c58 <HAL_InitTick>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	e001      	b.n	8000c4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c46:	f7ff fe67 	bl	8000918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40022000 	.word	0x40022000

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_InitTick+0x6c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d023      	beq.n	8000cb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_InitTick+0x70>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_InitTick+0x6c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f96d 	bl	8000f62 <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10f      	bne.n	8000cae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d809      	bhi.n	8000ca8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 f937 	bl	8000f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_InitTick+0x74>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	e007      	b.n	8000cb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
 8000cac:	e004      	b.n	8000cb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
 8000cb2:	e001      	b.n	8000cb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000138 	.word	0x20000138

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000138 	.word	0x20000138

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff ffee 	bl	8000cf8 <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffde 	bl	8000cf8 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff29 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff3e 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff8e 	bl	8000e4c <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff31 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffa2 	bl	8000eb4 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8a:	e17f      	b.n	800128c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2101      	movs	r1, #1
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8171 	beq.w	8001286 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d005      	beq.n	8000fbc <HAL_GPIO_Init+0x40>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d130      	bne.n	800101e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	f003 0201 	and.w	r2, r3, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b03      	cmp	r3, #3
 8001028:	d118      	bne.n	800105c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001030:	2201      	movs	r2, #1
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	f003 0201 	and.w	r2, r3, #1
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b03      	cmp	r3, #3
 8001066:	d017      	beq.n	8001098 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d123      	bne.n	80010ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	6939      	ldr	r1, [r7, #16]
 80010e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0203 	and.w	r2, r3, #3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80ac 	beq.w	8001286 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <HAL_GPIO_Init+0x330>)
 8001130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001132:	4a5e      	ldr	r2, [pc, #376]	; (80012ac <HAL_GPIO_Init+0x330>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6613      	str	r3, [r2, #96]	; 0x60
 800113a:	4b5c      	ldr	r3, [pc, #368]	; (80012ac <HAL_GPIO_Init+0x330>)
 800113c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001146:	4a5a      	ldr	r2, [pc, #360]	; (80012b0 <HAL_GPIO_Init+0x334>)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001170:	d025      	beq.n	80011be <HAL_GPIO_Init+0x242>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4f      	ldr	r2, [pc, #316]	; (80012b4 <HAL_GPIO_Init+0x338>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01f      	beq.n	80011ba <HAL_GPIO_Init+0x23e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4e      	ldr	r2, [pc, #312]	; (80012b8 <HAL_GPIO_Init+0x33c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x23a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4d      	ldr	r2, [pc, #308]	; (80012bc <HAL_GPIO_Init+0x340>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x236>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4c      	ldr	r2, [pc, #304]	; (80012c0 <HAL_GPIO_Init+0x344>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x232>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4b      	ldr	r2, [pc, #300]	; (80012c4 <HAL_GPIO_Init+0x348>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x22e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4a      	ldr	r2, [pc, #296]	; (80012c8 <HAL_GPIO_Init+0x34c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x22a>
 80011a2:	2306      	movs	r3, #6
 80011a4:	e00c      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011a6:	2307      	movs	r3, #7
 80011a8:	e00a      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011aa:	2305      	movs	r3, #5
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x244>
 80011be:	2300      	movs	r3, #0
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d0:	4937      	ldr	r1, [pc, #220]	; (80012b0 <HAL_GPIO_Init+0x334>)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <HAL_GPIO_Init+0x350>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001202:	4a32      	ldr	r2, [pc, #200]	; (80012cc <HAL_GPIO_Init+0x350>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <HAL_GPIO_Init+0x350>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800122c:	4a27      	ldr	r2, [pc, #156]	; (80012cc <HAL_GPIO_Init+0x350>)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_GPIO_Init+0x350>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001256:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <HAL_GPIO_Init+0x350>)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_GPIO_Init+0x350>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <HAL_GPIO_Init+0x350>)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	f47f ae78 	bne.w	8000f8c <HAL_GPIO_Init+0x10>
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	48000400 	.word	0x48000400
 80012b8:	48000800 	.word	0x48000800
 80012bc:	48000c00 	.word	0x48000c00
 80012c0:	48001000 	.word	0x48001000
 80012c4:	48001400 	.word	0x48001400
 80012c8:	48001800 	.word	0x48001800
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800130a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40007000 	.word	0x40007000

08001320 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <HAL_PWREx_GetVoltageRange+0x18>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40007000 	.word	0x40007000

0800133c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800134a:	d130      	bne.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001358:	d038      	beq.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001362:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001364:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001368:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2232      	movs	r2, #50	; 0x32
 8001370:	fb02 f303 	mul.w	r3, r2, r3
 8001374:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	0c9b      	lsrs	r3, r3, #18
 800137c:	3301      	adds	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001380:	e002      	b.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3b01      	subs	r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001394:	d102      	bne.n	800139c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f2      	bne.n	8001382 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a8:	d110      	bne.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e00f      	b.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ba:	d007      	beq.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013c4:	4a05      	ldr	r2, [pc, #20]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40007000 	.word	0x40007000
 80013e0:	20000000 	.word	0x20000000
 80013e4:	431bde83 	.word	0x431bde83

080013e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e3ca      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013fa:	4b97      	ldr	r3, [pc, #604]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001404:	4b94      	ldr	r3, [pc, #592]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 80e4 	beq.w	80015e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <HAL_RCC_OscConfig+0x4a>
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	2b0c      	cmp	r3, #12
 8001426:	f040 808b 	bne.w	8001540 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2b01      	cmp	r3, #1
 800142e:	f040 8087 	bne.w	8001540 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001432:	4b89      	ldr	r3, [pc, #548]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x62>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e3a2      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1a      	ldr	r2, [r3, #32]
 800144e:	4b82      	ldr	r3, [pc, #520]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	d004      	beq.n	8001464 <HAL_RCC_OscConfig+0x7c>
 800145a:	4b7f      	ldr	r3, [pc, #508]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001462:	e005      	b.n	8001470 <HAL_RCC_OscConfig+0x88>
 8001464:	4b7c      	ldr	r3, [pc, #496]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 8001466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001470:	4293      	cmp	r3, r2
 8001472:	d223      	bcs.n	80014bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fd55 	bl	8001f28 <RCC_SetFlashLatencyFromMSIRange>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e383      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001488:	4b73      	ldr	r3, [pc, #460]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a72      	ldr	r2, [pc, #456]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b70      	ldr	r3, [pc, #448]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	496d      	ldr	r1, [pc, #436]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a6:	4b6c      	ldr	r3, [pc, #432]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	4968      	ldr	r1, [pc, #416]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
 80014ba:	e025      	b.n	8001508 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014bc:	4b66      	ldr	r3, [pc, #408]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a65      	ldr	r2, [pc, #404]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b63      	ldr	r3, [pc, #396]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4960      	ldr	r1, [pc, #384]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014da:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	495b      	ldr	r1, [pc, #364]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d109      	bne.n	8001508 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fd15 	bl	8001f28 <RCC_SetFlashLatencyFromMSIRange>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e343      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001508:	f000 fc4a 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b52      	ldr	r3, [pc, #328]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	4950      	ldr	r1, [pc, #320]	; (800165c <HAL_RCC_OscConfig+0x274>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	fa22 f303 	lsr.w	r3, r2, r3
 8001524:	4a4e      	ldr	r2, [pc, #312]	; (8001660 <HAL_RCC_OscConfig+0x278>)
 8001526:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001528:	4b4e      	ldr	r3, [pc, #312]	; (8001664 <HAL_RCC_OscConfig+0x27c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fb93 	bl	8000c58 <HAL_InitTick>
 8001532:	4603      	mov	r3, r0
 8001534:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d052      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	e327      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d032      	beq.n	80015ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a42      	ldr	r2, [pc, #264]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001554:	f7ff fbd0 	bl	8000cf8 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800155c:	f7ff fbcc 	bl	8000cf8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e310      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800156e:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800157a:	4b37      	ldr	r3, [pc, #220]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a36      	ldr	r2, [pc, #216]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b34      	ldr	r3, [pc, #208]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4931      	ldr	r1, [pc, #196]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	021b      	lsls	r3, r3, #8
 80015a6:	492c      	ldr	r1, [pc, #176]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
 80015ac:	e01a      	b.n	80015e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a29      	ldr	r2, [pc, #164]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fb9d 	bl	8000cf8 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c2:	f7ff fb99 	bl	8000cf8 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e2dd      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f0      	bne.n	80015c2 <HAL_RCC_OscConfig+0x1da>
 80015e0:	e000      	b.n	80015e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d074      	beq.n	80016da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d005      	beq.n	8001602 <HAL_RCC_OscConfig+0x21a>
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b0c      	cmp	r3, #12
 80015fa:	d10e      	bne.n	800161a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d10b      	bne.n	800161a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d064      	beq.n	80016d8 <HAL_RCC_OscConfig+0x2f0>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d160      	bne.n	80016d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e2ba      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x24a>
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 800162a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	e026      	b.n	8001680 <HAL_RCC_OscConfig+0x298>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800163a:	d115      	bne.n	8001668 <HAL_RCC_OscConfig+0x280>
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a05      	ldr	r2, [pc, #20]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 8001642:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a02      	ldr	r2, [pc, #8]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 800164e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e014      	b.n	8001680 <HAL_RCC_OscConfig+0x298>
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	080046c0 	.word	0x080046c0
 8001660:	20000000 	.word	0x20000000
 8001664:	20000004 	.word	0x20000004
 8001668:	4ba0      	ldr	r3, [pc, #640]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a9f      	ldr	r2, [pc, #636]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 800166e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b9d      	ldr	r3, [pc, #628]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a9c      	ldr	r2, [pc, #624]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 800167a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d013      	beq.n	80016b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fb36 	bl	8000cf8 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fb32 	bl	8000cf8 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e276      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016a2:	4b92      	ldr	r3, [pc, #584]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x2a8>
 80016ae:	e014      	b.n	80016da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb22 	bl	8000cf8 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fb1e 	bl	8000cf8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e262      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ca:	4b88      	ldr	r3, [pc, #544]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x2d0>
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d060      	beq.n	80017a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_OscConfig+0x310>
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	d119      	bne.n	8001726 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d116      	bne.n	8001726 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f8:	4b7c      	ldr	r3, [pc, #496]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_OscConfig+0x328>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e23f      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b76      	ldr	r3, [pc, #472]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	061b      	lsls	r3, r3, #24
 800171e:	4973      	ldr	r1, [pc, #460]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001724:	e040      	b.n	80017a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d023      	beq.n	8001776 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172e:	4b6f      	ldr	r3, [pc, #444]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6e      	ldr	r2, [pc, #440]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	f7ff fadd 	bl	8000cf8 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001742:	f7ff fad9 	bl	8000cf8 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e21d      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001754:	4b65      	ldr	r3, [pc, #404]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b62      	ldr	r3, [pc, #392]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	061b      	lsls	r3, r3, #24
 800176e:	495f      	ldr	r1, [pc, #380]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
 8001774:	e018      	b.n	80017a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001776:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a5c      	ldr	r2, [pc, #368]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 800177c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7ff fab9 	bl	8000cf8 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178a:	f7ff fab5 	bl	8000cf8 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e1f9      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800179c:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d03c      	beq.n	800182e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d01c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017bc:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80017be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c2:	4a4a      	ldr	r2, [pc, #296]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fa94 	bl	8000cf8 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fa90 	bl	8000cf8 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e1d4      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017e6:	4b41      	ldr	r3, [pc, #260]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80017e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0ef      	beq.n	80017d4 <HAL_RCC_OscConfig+0x3ec>
 80017f4:	e01b      	b.n	800182e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f6:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80017f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fc:	4a3b      	ldr	r2, [pc, #236]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001806:	f7ff fa77 	bl	8000cf8 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff fa73 	bl	8000cf8 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1b7      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001820:	4b32      	ldr	r3, [pc, #200]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 8001822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ef      	bne.n	800180e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 80a6 	beq.w	8001988 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10d      	bne.n	8001868 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	4a26      	ldr	r2, [pc, #152]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 8001852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001856:	6593      	str	r3, [r2, #88]	; 0x58
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001864:	2301      	movs	r3, #1
 8001866:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_RCC_OscConfig+0x508>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001870:	2b00      	cmp	r3, #0
 8001872:	d118      	bne.n	80018a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_RCC_OscConfig+0x508>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x508>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001880:	f7ff fa3a 	bl	8000cf8 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001888:	f7ff fa36 	bl	8000cf8 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e17a      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_RCC_OscConfig+0x508>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d108      	bne.n	80018c0 <HAL_RCC_OscConfig+0x4d8>
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80018b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b4:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018be:	e029      	b.n	8001914 <HAL_RCC_OscConfig+0x52c>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	d115      	bne.n	80018f4 <HAL_RCC_OscConfig+0x50c>
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ce:	4a07      	ldr	r2, [pc, #28]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80018da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018de:	4a03      	ldr	r2, [pc, #12]	; (80018ec <HAL_RCC_OscConfig+0x504>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e8:	e014      	b.n	8001914 <HAL_RCC_OscConfig+0x52c>
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40007000 	.word	0x40007000
 80018f4:	4b9c      	ldr	r3, [pc, #624]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	4a9b      	ldr	r2, [pc, #620]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001904:	4b98      	ldr	r3, [pc, #608]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190a:	4a97      	ldr	r2, [pc, #604]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 800190c:	f023 0304 	bic.w	r3, r3, #4
 8001910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d016      	beq.n	800194a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff f9ec 	bl	8000cf8 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001922:	e00a      	b.n	800193a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff f9e8 	bl	8000cf8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e12a      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800193a:	4b8b      	ldr	r3, [pc, #556]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 800193c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0ed      	beq.n	8001924 <HAL_RCC_OscConfig+0x53c>
 8001948:	e015      	b.n	8001976 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194a:	f7ff f9d5 	bl	8000cf8 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7ff f9d1 	bl	8000cf8 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e113      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001968:	4b7f      	ldr	r3, [pc, #508]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 800196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ed      	bne.n	8001952 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001976:	7ffb      	ldrb	r3, [r7, #31]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4b7a      	ldr	r3, [pc, #488]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	4a79      	ldr	r2, [pc, #484]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001986:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80fe 	beq.w	8001b8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	2b02      	cmp	r3, #2
 8001998:	f040 80d0 	bne.w	8001b3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800199c:	4b72      	ldr	r3, [pc, #456]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d130      	bne.n	8001a12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	3b01      	subs	r3, #1
 80019bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d127      	bne.n	8001a12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d11f      	bne.n	8001a12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019dc:	2a07      	cmp	r2, #7
 80019de:	bf14      	ite	ne
 80019e0:	2201      	movne	r2, #1
 80019e2:	2200      	moveq	r2, #0
 80019e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d113      	bne.n	8001a12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	3b01      	subs	r3, #1
 80019f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d06e      	beq.n	8001af0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	d069      	beq.n	8001aec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a18:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d105      	bne.n	8001a30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a24:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0ad      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a34:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a4b      	ldr	r2, [pc, #300]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a40:	f7ff f95a 	bl	8000cf8 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff f956 	bl	8000cf8 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e09a      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5a:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a66:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <HAL_RCC_OscConfig+0x784>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a76:	3a01      	subs	r2, #1
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	4311      	orrs	r1, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a80:	0212      	lsls	r2, r2, #8
 8001a82:	4311      	orrs	r1, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a88:	0852      	lsrs	r2, r2, #1
 8001a8a:	3a01      	subs	r2, #1
 8001a8c:	0552      	lsls	r2, r2, #21
 8001a8e:	4311      	orrs	r1, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a94:	0852      	lsrs	r2, r2, #1
 8001a96:	3a01      	subs	r2, #1
 8001a98:	0652      	lsls	r2, r2, #25
 8001a9a:	4311      	orrs	r1, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aa0:	0912      	lsrs	r2, r2, #4
 8001aa2:	0452      	lsls	r2, r2, #17
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	4930      	ldr	r1, [pc, #192]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001aac:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4a2a      	ldr	r2, [pc, #168]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ac4:	f7ff f918 	bl	8000cf8 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff f914 	bl	8000cf8 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e058      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aea:	e050      	b.n	8001b8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e04f      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d148      	bne.n	8001b8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4a16      	ldr	r2, [pc, #88]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b14:	f7ff f8f0 	bl	8000cf8 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff f8ec 	bl	8000cf8 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e030      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x734>
 8001b3a:	e028      	b.n	8001b8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d023      	beq.n	8001b8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <HAL_RCC_OscConfig+0x780>)
 8001b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4e:	f7ff f8d3 	bl	8000cf8 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b54:	e00c      	b.n	8001b70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff f8cf 	bl	8000cf8 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d905      	bls.n	8001b70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e013      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_RCC_OscConfig+0x7b0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1ec      	bne.n	8001b56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_OscConfig+0x7b0>)
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	4905      	ldr	r1, [pc, #20]	; (8001b98 <HAL_RCC_OscConfig+0x7b0>)
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_RCC_OscConfig+0x7b4>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
 8001b88:	e001      	b.n	8001b8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3720      	adds	r7, #32
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	feeefffc 	.word	0xfeeefffc

08001ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0e7      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b75      	ldr	r3, [pc, #468]	; (8001d8c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d910      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b72      	ldr	r3, [pc, #456]	; (8001d8c <HAL_RCC_ClockConfig+0x1ec>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 0207 	bic.w	r2, r3, #7
 8001bca:	4970      	ldr	r1, [pc, #448]	; (8001d8c <HAL_RCC_ClockConfig+0x1ec>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b6e      	ldr	r3, [pc, #440]	; (8001d8c <HAL_RCC_ClockConfig+0x1ec>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0cf      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d010      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d908      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c00:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4960      	ldr	r1, [pc, #384]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d04c      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c26:	4b5a      	ldr	r3, [pc, #360]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d121      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0a6      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3e:	4b54      	ldr	r3, [pc, #336]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d115      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e09a      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c56:	4b4e      	ldr	r3, [pc, #312]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d109      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e08e      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c66:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e086      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c76:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f023 0203 	bic.w	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4943      	ldr	r1, [pc, #268]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c88:	f7ff f836 	bl	8000cf8 <HAL_GetTick>
 8001c8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c90:	f7ff f832 	bl	8000cf8 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e06e      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 020c 	and.w	r2, r3, #12
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d1eb      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d208      	bcs.n	8001ce6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd4:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	492b      	ldr	r1, [pc, #172]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d210      	bcs.n	8001d16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_RCC_ClockConfig+0x1ec>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 0207 	bic.w	r2, r3, #7
 8001cfc:	4923      	ldr	r1, [pc, #140]	; (8001d8c <HAL_RCC_ClockConfig+0x1ec>)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_RCC_ClockConfig+0x1ec>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e036      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d008      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	4918      	ldr	r1, [pc, #96]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4910      	ldr	r1, [pc, #64]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d54:	f000 f824 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	091b      	lsrs	r3, r3, #4
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	490b      	ldr	r1, [pc, #44]	; (8001d94 <HAL_RCC_ClockConfig+0x1f4>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d70:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_RCC_ClockConfig+0x1f8>)
 8001d72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_ClockConfig+0x1fc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe ff6d 	bl	8000c58 <HAL_InitTick>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d82:	7afb      	ldrb	r3, [r7, #11]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	40021000 	.word	0x40021000
 8001d94:	080046c0 	.word	0x080046c0
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	20000004 	.word	0x20000004

08001da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dae:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db8:	4b3b      	ldr	r3, [pc, #236]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d121      	bne.n	8001e12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d11e      	bne.n	8001e12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dd4:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001de0:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de6:	0a1b      	lsrs	r3, r3, #8
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	e005      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dfc:	4a2b      	ldr	r2, [pc, #172]	; (8001eac <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10d      	bne.n	8001e28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d102      	bne.n	8001e1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e18:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	e004      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e24:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	2b0c      	cmp	r3, #12
 8001e2c:	d134      	bne.n	8001e98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d003      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d003      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0xac>
 8001e44:	e005      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e48:	617b      	str	r3, [r7, #20]
      break;
 8001e4a:	e005      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e4e:	617b      	str	r3, [r7, #20]
      break;
 8001e50:	e002      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	617b      	str	r3, [r7, #20]
      break;
 8001e56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	3301      	adds	r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	fb03 f202 	mul.w	r2, r3, r2
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	0e5b      	lsrs	r3, r3, #25
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	3301      	adds	r3, #1
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e98:	69bb      	ldr	r3, [r7, #24]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	080046d8 	.word	0x080046d8
 8001eb0:	00f42400 	.word	0x00f42400
 8001eb4:	007a1200 	.word	0x007a1200

08001eb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000000 	.word	0x20000000

08001ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ed4:	f7ff fff0 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4904      	ldr	r1, [pc, #16]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	080046d0 	.word	0x080046d0

08001efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f00:	f7ff ffda 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0adb      	lsrs	r3, r3, #11
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4904      	ldr	r1, [pc, #16]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	080046d0 	.word	0x080046d0

08001f28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f34:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f40:	f7ff f9ee 	bl	8001320 <HAL_PWREx_GetVoltageRange>
 8001f44:	6178      	str	r0, [r7, #20]
 8001f46:	e014      	b.n	8001f72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	4a24      	ldr	r2, [pc, #144]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f52:	6593      	str	r3, [r2, #88]	; 0x58
 8001f54:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f60:	f7ff f9de 	bl	8001320 <HAL_PWREx_GetVoltageRange>
 8001f64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f78:	d10b      	bne.n	8001f92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d919      	bls.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2ba0      	cmp	r3, #160	; 0xa0
 8001f84:	d902      	bls.n	8001f8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f86:	2302      	movs	r3, #2
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	e013      	b.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	e010      	b.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b80      	cmp	r3, #128	; 0x80
 8001f96:	d902      	bls.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f98:	2303      	movs	r3, #3
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	e00a      	b.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d102      	bne.n	8001faa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	e004      	b.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b70      	cmp	r3, #112	; 0x70
 8001fae:	d101      	bne.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 0207 	bic.w	r2, r3, #7
 8001fbc:	4909      	ldr	r1, [pc, #36]	; (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d001      	beq.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40022000 	.word	0x40022000

08001fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002000:	2b00      	cmp	r3, #0
 8002002:	d041      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002008:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800200c:	d02a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800200e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002012:	d824      	bhi.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002014:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002018:	d008      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800201a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800201e:	d81e      	bhi.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002028:	d010      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800202a:	e018      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800202c:	4b86      	ldr	r3, [pc, #536]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a85      	ldr	r2, [pc, #532]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002036:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002038:	e015      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3304      	adds	r3, #4
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fabb 	bl	80025bc <RCCEx_PLLSAI1_Config>
 8002046:	4603      	mov	r3, r0
 8002048:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800204a:	e00c      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3320      	adds	r3, #32
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fba6 	bl	80027a4 <RCCEx_PLLSAI2_Config>
 8002058:	4603      	mov	r3, r0
 800205a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800205c:	e003      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	74fb      	strb	r3, [r7, #19]
      break;
 8002062:	e000      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002066:	7cfb      	ldrb	r3, [r7, #19]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10b      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800206c:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002072:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800207a:	4973      	ldr	r1, [pc, #460]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002082:	e001      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d041      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002098:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800209c:	d02a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800209e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020a2:	d824      	bhi.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020a8:	d008      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020ae:	d81e      	bhi.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b8:	d010      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020ba:	e018      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020bc:	4b62      	ldr	r3, [pc, #392]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4a61      	ldr	r2, [pc, #388]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020c8:	e015      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3304      	adds	r3, #4
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fa73 	bl	80025bc <RCCEx_PLLSAI1_Config>
 80020d6:	4603      	mov	r3, r0
 80020d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020da:	e00c      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3320      	adds	r3, #32
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fb5e 	bl	80027a4 <RCCEx_PLLSAI2_Config>
 80020e8:	4603      	mov	r3, r0
 80020ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020ec:	e003      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	74fb      	strb	r3, [r7, #19]
      break;
 80020f2:	e000      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10b      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020fc:	4b52      	ldr	r3, [pc, #328]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800210a:	494f      	ldr	r1, [pc, #316]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002112:	e001      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80a0 	beq.w	8002266 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800213a:	2300      	movs	r3, #0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00d      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002140:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	4a40      	ldr	r2, [pc, #256]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214a:	6593      	str	r3, [r2, #88]	; 0x58
 800214c:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002158:	2301      	movs	r3, #1
 800215a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800215c:	4b3b      	ldr	r3, [pc, #236]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3a      	ldr	r2, [pc, #232]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002166:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002168:	f7fe fdc6 	bl	8000cf8 <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800216e:	e009      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002170:	f7fe fdc2 	bl	8000cf8 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d902      	bls.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	74fb      	strb	r3, [r7, #19]
        break;
 8002182:	e005      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002184:	4b31      	ldr	r3, [pc, #196]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0ef      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d15c      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002196:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01f      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d019      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	4a20      	ldr	r2, [pc, #128]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021e0:	4a19      	ldr	r2, [pc, #100]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d016      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f2:	f7fe fd81 	bl	8000cf8 <HAL_GetTick>
 80021f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f8:	e00b      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7fe fd7d 	bl	8000cf8 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d902      	bls.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	74fb      	strb	r3, [r7, #19]
            break;
 8002210:	e006      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0ec      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10c      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002226:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002236:	4904      	ldr	r1, [pc, #16]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800223e:	e009      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002240:	7cfb      	ldrb	r3, [r7, #19]
 8002242:	74bb      	strb	r3, [r7, #18]
 8002244:	e006      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002254:	7c7b      	ldrb	r3, [r7, #17]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d105      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225a:	4b9e      	ldr	r3, [pc, #632]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	4a9d      	ldr	r2, [pc, #628]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002264:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002272:	4b98      	ldr	r3, [pc, #608]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	f023 0203 	bic.w	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002280:	4994      	ldr	r1, [pc, #592]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002294:	4b8f      	ldr	r3, [pc, #572]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	f023 020c 	bic.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	498c      	ldr	r1, [pc, #560]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022b6:	4b87      	ldr	r3, [pc, #540]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	4983      	ldr	r1, [pc, #524]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022d8:	4b7e      	ldr	r3, [pc, #504]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	497b      	ldr	r1, [pc, #492]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022fa:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002308:	4972      	ldr	r1, [pc, #456]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800231c:	4b6d      	ldr	r3, [pc, #436]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	496a      	ldr	r1, [pc, #424]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800233e:	4b65      	ldr	r3, [pc, #404]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002344:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234c:	4961      	ldr	r1, [pc, #388]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002360:	4b5c      	ldr	r3, [pc, #368]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236e:	4959      	ldr	r1, [pc, #356]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002382:	4b54      	ldr	r3, [pc, #336]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002390:	4950      	ldr	r1, [pc, #320]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023a4:	4b4b      	ldr	r3, [pc, #300]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	4948      	ldr	r1, [pc, #288]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023c6:	4b43      	ldr	r3, [pc, #268]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	493f      	ldr	r1, [pc, #252]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d028      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023e8:	4b3a      	ldr	r3, [pc, #232]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023f6:	4937      	ldr	r1, [pc, #220]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002406:	d106      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002408:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a31      	ldr	r2, [pc, #196]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002412:	60d3      	str	r3, [r2, #12]
 8002414:	e011      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800241a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800241e:	d10c      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3304      	adds	r3, #4
 8002424:	2101      	movs	r1, #1
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f8c8 	bl	80025bc <RCCEx_PLLSAI1_Config>
 800242c:	4603      	mov	r3, r0
 800242e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d028      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002446:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	491f      	ldr	r1, [pc, #124]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002464:	d106      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002470:	60d3      	str	r3, [r2, #12]
 8002472:	e011      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800247c:	d10c      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	2101      	movs	r1, #1
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f899 	bl	80025bc <RCCEx_PLLSAI1_Config>
 800248a:	4603      	mov	r3, r0
 800248c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d02b      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b2:	4908      	ldr	r1, [pc, #32]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024c2:	d109      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a02      	ldr	r2, [pc, #8]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ce:	60d3      	str	r3, [r2, #12]
 80024d0:	e014      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024e0:	d10c      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3304      	adds	r3, #4
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 f867 	bl	80025bc <RCCEx_PLLSAI1_Config>
 80024ee:	4603      	mov	r3, r0
 80024f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f2:	7cfb      	ldrb	r3, [r7, #19]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d02f      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002516:	4928      	ldr	r1, [pc, #160]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002526:	d10d      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	2102      	movs	r1, #2
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f844 	bl	80025bc <RCCEx_PLLSAI1_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d014      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	74bb      	strb	r3, [r7, #18]
 8002542:	e011      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800254c:	d10c      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3320      	adds	r3, #32
 8002552:	2102      	movs	r1, #2
 8002554:	4618      	mov	r0, r3
 8002556:	f000 f925 	bl	80027a4 <RCCEx_PLLSAI2_Config>
 800255a:	4603      	mov	r3, r0
 800255c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002582:	490d      	ldr	r1, [pc, #52]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a6:	4904      	ldr	r1, [pc, #16]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000

080025bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ca:	4b75      	ldr	r3, [pc, #468]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d018      	beq.n	8002608 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025d6:	4b72      	ldr	r3, [pc, #456]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0203 	and.w	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d10d      	bne.n	8002602 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
       ||
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025ee:	4b6c      	ldr	r3, [pc, #432]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
       ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d047      	beq.n	8002692 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	e044      	b.n	8002692 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d018      	beq.n	8002642 <RCCEx_PLLSAI1_Config+0x86>
 8002610:	2b03      	cmp	r3, #3
 8002612:	d825      	bhi.n	8002660 <RCCEx_PLLSAI1_Config+0xa4>
 8002614:	2b01      	cmp	r3, #1
 8002616:	d002      	beq.n	800261e <RCCEx_PLLSAI1_Config+0x62>
 8002618:	2b02      	cmp	r3, #2
 800261a:	d009      	beq.n	8002630 <RCCEx_PLLSAI1_Config+0x74>
 800261c:	e020      	b.n	8002660 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800261e:	4b60      	ldr	r3, [pc, #384]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d11d      	bne.n	8002666 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800262e:	e01a      	b.n	8002666 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002630:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d116      	bne.n	800266a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002640:	e013      	b.n	800266a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002642:	4b57      	ldr	r3, [pc, #348]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800264e:	4b54      	ldr	r3, [pc, #336]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800265e:	e006      	b.n	800266e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      break;
 8002664:	e004      	b.n	8002670 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002666:	bf00      	nop
 8002668:	e002      	b.n	8002670 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800266a:	bf00      	nop
 800266c:	e000      	b.n	8002670 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800266e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002676:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	430b      	orrs	r3, r1
 800268c:	4944      	ldr	r1, [pc, #272]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d17d      	bne.n	8002794 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002698:	4b41      	ldr	r3, [pc, #260]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a40      	ldr	r2, [pc, #256]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a4:	f7fe fb28 	bl	8000cf8 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026aa:	e009      	b.n	80026c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ac:	f7fe fb24 	bl	8000cf8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d902      	bls.n	80026c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	73fb      	strb	r3, [r7, #15]
        break;
 80026be:	e005      	b.n	80026cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026c0:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ef      	bne.n	80026ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d160      	bne.n	8002794 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d111      	bne.n	80026fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026d8:	4b31      	ldr	r3, [pc, #196]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6892      	ldr	r2, [r2, #8]
 80026e8:	0211      	lsls	r1, r2, #8
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68d2      	ldr	r2, [r2, #12]
 80026ee:	0912      	lsrs	r2, r2, #4
 80026f0:	0452      	lsls	r2, r2, #17
 80026f2:	430a      	orrs	r2, r1
 80026f4:	492a      	ldr	r1, [pc, #168]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	610b      	str	r3, [r1, #16]
 80026fa:	e027      	b.n	800274c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d112      	bne.n	8002728 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002702:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800270a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6892      	ldr	r2, [r2, #8]
 8002712:	0211      	lsls	r1, r2, #8
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6912      	ldr	r2, [r2, #16]
 8002718:	0852      	lsrs	r2, r2, #1
 800271a:	3a01      	subs	r2, #1
 800271c:	0552      	lsls	r2, r2, #21
 800271e:	430a      	orrs	r2, r1
 8002720:	491f      	ldr	r1, [pc, #124]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	610b      	str	r3, [r1, #16]
 8002726:	e011      	b.n	800274c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002730:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6892      	ldr	r2, [r2, #8]
 8002738:	0211      	lsls	r1, r2, #8
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6952      	ldr	r2, [r2, #20]
 800273e:	0852      	lsrs	r2, r2, #1
 8002740:	3a01      	subs	r2, #1
 8002742:	0652      	lsls	r2, r2, #25
 8002744:	430a      	orrs	r2, r1
 8002746:	4916      	ldr	r1, [pc, #88]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002752:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002756:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7fe face 	bl	8000cf8 <HAL_GetTick>
 800275c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800275e:	e009      	b.n	8002774 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002760:	f7fe faca 	bl	8000cf8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d902      	bls.n	8002774 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	73fb      	strb	r3, [r7, #15]
          break;
 8002772:	e005      	b.n	8002780 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ef      	beq.n	8002760 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	4904      	ldr	r1, [pc, #16]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002794:	7bfb      	ldrb	r3, [r7, #15]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000

080027a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027b2:	4b6a      	ldr	r3, [pc, #424]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d018      	beq.n	80027f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027be:	4b67      	ldr	r3, [pc, #412]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f003 0203 	and.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d10d      	bne.n	80027ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
       ||
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027d6:	4b61      	ldr	r3, [pc, #388]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
       ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d047      	beq.n	800287a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	e044      	b.n	800287a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d018      	beq.n	800282a <RCCEx_PLLSAI2_Config+0x86>
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d825      	bhi.n	8002848 <RCCEx_PLLSAI2_Config+0xa4>
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d002      	beq.n	8002806 <RCCEx_PLLSAI2_Config+0x62>
 8002800:	2b02      	cmp	r3, #2
 8002802:	d009      	beq.n	8002818 <RCCEx_PLLSAI2_Config+0x74>
 8002804:	e020      	b.n	8002848 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002806:	4b55      	ldr	r3, [pc, #340]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d11d      	bne.n	800284e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002816:	e01a      	b.n	800284e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002818:	4b50      	ldr	r3, [pc, #320]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d116      	bne.n	8002852 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002828:	e013      	b.n	8002852 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800282a:	4b4c      	ldr	r3, [pc, #304]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10f      	bne.n	8002856 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002836:	4b49      	ldr	r3, [pc, #292]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002846:	e006      	b.n	8002856 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      break;
 800284c:	e004      	b.n	8002858 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800284e:	bf00      	nop
 8002850:	e002      	b.n	8002858 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002852:	bf00      	nop
 8002854:	e000      	b.n	8002858 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002856:	bf00      	nop
    }

    if(status == HAL_OK)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10d      	bne.n	800287a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800285e:	4b3f      	ldr	r3, [pc, #252]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	430b      	orrs	r3, r1
 8002874:	4939      	ldr	r1, [pc, #228]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002876:	4313      	orrs	r3, r2
 8002878:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d167      	bne.n	8002950 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002880:	4b36      	ldr	r3, [pc, #216]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a35      	ldr	r2, [pc, #212]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800288c:	f7fe fa34 	bl	8000cf8 <HAL_GetTick>
 8002890:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002892:	e009      	b.n	80028a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002894:	f7fe fa30 	bl	8000cf8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d902      	bls.n	80028a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	73fb      	strb	r3, [r7, #15]
        break;
 80028a6:	e005      	b.n	80028b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028a8:	4b2c      	ldr	r3, [pc, #176]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ef      	bne.n	8002894 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d14a      	bne.n	8002950 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d111      	bne.n	80028e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028c0:	4b26      	ldr	r3, [pc, #152]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6892      	ldr	r2, [r2, #8]
 80028d0:	0211      	lsls	r1, r2, #8
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68d2      	ldr	r2, [r2, #12]
 80028d6:	0912      	lsrs	r2, r2, #4
 80028d8:	0452      	lsls	r2, r2, #17
 80028da:	430a      	orrs	r2, r1
 80028dc:	491f      	ldr	r1, [pc, #124]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	614b      	str	r3, [r1, #20]
 80028e2:	e011      	b.n	8002908 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6892      	ldr	r2, [r2, #8]
 80028f4:	0211      	lsls	r1, r2, #8
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6912      	ldr	r2, [r2, #16]
 80028fa:	0852      	lsrs	r2, r2, #1
 80028fc:	3a01      	subs	r2, #1
 80028fe:	0652      	lsls	r2, r2, #25
 8002900:	430a      	orrs	r2, r1
 8002902:	4916      	ldr	r1, [pc, #88]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002904:	4313      	orrs	r3, r2
 8002906:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a13      	ldr	r2, [pc, #76]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 800290e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002912:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe f9f0 	bl	8000cf8 <HAL_GetTick>
 8002918:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800291a:	e009      	b.n	8002930 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800291c:	f7fe f9ec 	bl	8000cf8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d902      	bls.n	8002930 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	73fb      	strb	r3, [r7, #15]
          break;
 800292e:	e005      	b.n	800293c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ef      	beq.n	800291c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002942:	4b06      	ldr	r3, [pc, #24]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	4904      	ldr	r1, [pc, #16]	; (800295c <RCCEx_PLLSAI2_Config+0x1b8>)
 800294c:	4313      	orrs	r3, r2
 800294e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002950:	7bfb      	ldrb	r3, [r7, #15]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000

08002960 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d06c      	beq.n	8002a4c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fd ffea 	bl	8000960 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	22ca      	movs	r2, #202	; 0xca
 800299a:	625a      	str	r2, [r3, #36]	; 0x24
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2253      	movs	r2, #83	; 0x53
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fbd5 	bl	8003154 <RTC_EnterInitMode>
 80029aa:	4603      	mov	r3, r0
 80029ac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d14b      	bne.n	8002a4c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80029c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029c6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6899      	ldr	r1, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68d2      	ldr	r2, [r2, #12]
 80029ee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6919      	ldr	r1, [r3, #16]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	041a      	lsls	r2, r3, #16
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fbd9 	bl	80031bc <RTC_ExitInitMode>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d11b      	bne.n	8002a4c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0203 	bic.w	r2, r2, #3
 8002a22:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69da      	ldr	r2, [r3, #28]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	22ff      	movs	r2, #255	; 0xff
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a56:	b590      	push	{r4, r7, lr}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_RTC_SetTime+0x1a>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e08b      	b.n	8002b88 <HAL_RTC_SetTime+0x132>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	22ca      	movs	r2, #202	; 0xca
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2253      	movs	r2, #83	; 0x53
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fb5f 	bl	8003154 <RTC_EnterInitMode>
 8002a96:	4603      	mov	r3, r0
 8002a98:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002a9a:	7cfb      	ldrb	r3, [r7, #19]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d163      	bne.n	8002b68 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d126      	bne.n	8002af4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fbba 	bl	8003238 <RTC_ByteToBcd2>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	785b      	ldrb	r3, [r3, #1]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fbb3 	bl	8003238 <RTC_ByteToBcd2>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ad6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	789b      	ldrb	r3, [r3, #2]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fbab 	bl	8003238 <RTC_ByteToBcd2>
 8002ae2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ae4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	78db      	ldrb	r3, [r3, #3]
 8002aec:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	e018      	b.n	8002b26 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d102      	bne.n	8002b08 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2200      	movs	r2, #0
 8002b06:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	785b      	ldrb	r3, [r3, #1]
 8002b12:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b14:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b1a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	78db      	ldrb	r3, [r3, #3]
 8002b20:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002b30:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002b34:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b44:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6899      	ldr	r1, [r3, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fb2c 	bl	80031bc <RTC_ExitInitMode>
 8002b64:	4603      	mov	r3, r0
 8002b66:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	22ff      	movs	r2, #255	; 0xff
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd90      	pop	{r4, r7, pc}

08002b90 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002bbe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	0c1b      	lsrs	r3, r3, #16
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	0d9b      	lsrs	r3, r3, #22
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d11a      	bne.n	8002c3e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fb33 	bl	8003278 <RTC_Bcd2ToByte>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	785b      	ldrb	r3, [r3, #1]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fb2a 	bl	8003278 <RTC_Bcd2ToByte>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	789b      	ldrb	r3, [r3, #2]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fb21 	bl	8003278 <RTC_Bcd2ToByte>
 8002c36:	4603      	mov	r3, r0
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_RTC_SetDate+0x1a>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e075      	b.n	8002d4e <HAL_RTC_SetDate+0x106>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10e      	bne.n	8002c96 <HAL_RTC_SetDate+0x4e>
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	785b      	ldrb	r3, [r3, #1]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	785b      	ldrb	r3, [r3, #1]
 8002c88:	f023 0310 	bic.w	r3, r3, #16
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	330a      	adds	r3, #10
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d11c      	bne.n	8002cd6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	78db      	ldrb	r3, [r3, #3]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fac9 	bl	8003238 <RTC_ByteToBcd2>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	785b      	ldrb	r3, [r3, #1]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fac2 	bl	8003238 <RTC_ByteToBcd2>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002cb8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	789b      	ldrb	r3, [r3, #2]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 faba 	bl	8003238 <RTC_ByteToBcd2>
 8002cc4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002cc6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	e00e      	b.n	8002cf4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	78db      	ldrb	r3, [r3, #3]
 8002cda:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	785b      	ldrb	r3, [r3, #1]
 8002ce0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ce2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ce8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	22ca      	movs	r2, #202	; 0xca
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2253      	movs	r2, #83	; 0x53
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fa25 	bl	8003154 <RTC_EnterInitMode>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002d0e:	7cfb      	ldrb	r3, [r7, #19]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10c      	bne.n	8002d2e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d22:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fa49 	bl	80031bc <RTC_ExitInitMode>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	22ff      	movs	r2, #255	; 0xff
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d103      	bne.n	8002d44 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd90      	pop	{r4, r7, pc}

08002d56 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d70:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	0c1b      	lsrs	r3, r3, #16
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	0b5b      	lsrs	r3, r3, #13
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d11a      	bne.n	8002de6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	78db      	ldrb	r3, [r3, #3]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fa5f 	bl	8003278 <RTC_Bcd2ToByte>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fa56 	bl	8003278 <RTC_Bcd2ToByte>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	789b      	ldrb	r3, [r3, #2]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fa4d 	bl	8003278 <RTC_Bcd2ToByte>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_RTC_SetAlarm_IT+0x1a>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e127      	b.n	800305a <HAL_RTC_SetAlarm_IT+0x26a>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d137      	bne.n	8002e90 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2200      	movs	r2, #0
 8002e32:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 f9fd 	bl	8003238 <RTC_ByteToBcd2>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	785b      	ldrb	r3, [r3, #1]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f9f6 	bl	8003238 <RTC_ByteToBcd2>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002e50:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	789b      	ldrb	r3, [r3, #2]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f9ee 	bl	8003238 <RTC_ByteToBcd2>
 8002e5c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002e5e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	78db      	ldrb	r3, [r3, #3]
 8002e66:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002e68:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f9e0 	bl	8003238 <RTC_ByteToBcd2>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002e7c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002e84:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e023      	b.n	8002ed8 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d102      	bne.n	8002ea4 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	785b      	ldrb	r3, [r3, #1]
 8002eae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002eb0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002eb6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	78db      	ldrb	r3, [r3, #3]
 8002ebc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002ebe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ec6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002ec8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002ece:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	22ca      	movs	r2, #202	; 0xca
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2253      	movs	r2, #83	; 0x53
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efc:	d14a      	bne.n	8002f94 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f0c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002f1e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8002f20:	f7fd feea 	bl	8000cf8 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002f26:	e015      	b.n	8002f54 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f28:	f7fd fee6 	bl	8000cf8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f36:	d90d      	bls.n	8002f54 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	22ff      	movs	r2, #255	; 0xff
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2203      	movs	r2, #3
 8002f44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e082      	b.n	800305a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0e2      	beq.n	8002f28 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f80:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f90:	609a      	str	r2, [r3, #8]
 8002f92:	e049      	b.n	8003028 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fa2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002fb4:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8002fb6:	f7fd fe9f 	bl	8000cf8 <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002fbc:	e015      	b.n	8002fea <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fbe:	f7fd fe9b 	bl	8000cf8 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fcc:	d90d      	bls.n	8002fea <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	22ff      	movs	r2, #255	; 0xff
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e037      	b.n	800305a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0e2      	beq.n	8002fbe <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003016:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003026:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003028:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <HAL_RTC_SetAlarm_IT+0x274>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <HAL_RTC_SetAlarm_IT+0x274>)
 800302e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003032:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RTC_SetAlarm_IT+0x274>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <HAL_RTC_SetAlarm_IT+0x274>)
 800303a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800303e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	22ff      	movs	r2, #255	; 0xff
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3724      	adds	r7, #36	; 0x24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd90      	pop	{r4, r7, pc}
 8003062:	bf00      	nop
 8003064:	40010400 	.word	0x40010400

08003068 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003070:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003072:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003076:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d012      	beq.n	80030ac <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80030a4:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f824 	bl	80030f4 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d012      	beq.n	80030e0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00b      	beq.n	80030e0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f462 7220 	orn	r2, r2, #640	; 0x280
 80030d8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8e6 	bl	80032ac <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40010400 	.word	0x40010400

080030f4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800311e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003120:	f7fd fdea 	bl	8000cf8 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003126:	e009      	b.n	800313c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003128:	f7fd fde6 	bl	8000cf8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003136:	d901      	bls.n	800313c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e007      	b.n	800314c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ee      	beq.n	8003128 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d120      	bne.n	80031b0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f04f 32ff 	mov.w	r2, #4294967295
 8003176:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003178:	f7fd fdbe 	bl	8000cf8 <HAL_GetTick>
 800317c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800317e:	e00d      	b.n	800319c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003180:	f7fd fdba 	bl	8000cf8 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800318e:	d905      	bls.n	800319c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2203      	movs	r2, #3
 8003198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <RTC_EnterInitMode+0x5c>
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d1e7      	bne.n	8003180 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80031c8:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <RTC_ExitInitMode+0x78>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <RTC_ExitInitMode+0x78>)
 80031ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <RTC_ExitInitMode+0x78>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10c      	bne.n	80031fa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff91 	bl	8003108 <HAL_RTC_WaitForSynchro>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01e      	beq.n	800322a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2203      	movs	r2, #3
 80031f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	73fb      	strb	r3, [r7, #15]
 80031f8:	e017      	b.n	800322a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <RTC_ExitInitMode+0x78>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	4a0d      	ldr	r2, [pc, #52]	; (8003234 <RTC_ExitInitMode+0x78>)
 8003200:	f023 0320 	bic.w	r3, r3, #32
 8003204:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ff7e 	bl	8003108 <HAL_RTC_WaitForSynchro>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2203      	movs	r2, #3
 8003216:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <RTC_ExitInitMode+0x78>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	4a04      	ldr	r2, [pc, #16]	; (8003234 <RTC_ExitInitMode+0x78>)
 8003224:	f043 0320 	orr.w	r3, r3, #32
 8003228:	6093      	str	r3, [r2, #8]
  }

  return status;
 800322a:	7bfb      	ldrb	r3, [r7, #15]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40002800 	.word	0x40002800

08003238 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800324a:	e005      	b.n	8003258 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3301      	adds	r3, #1
 8003250:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003252:	7afb      	ldrb	r3, [r7, #11]
 8003254:	3b0a      	subs	r3, #10
 8003256:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003258:	7afb      	ldrb	r3, [r7, #11]
 800325a:	2b09      	cmp	r3, #9
 800325c:	d8f6      	bhi.n	800324c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	b2da      	uxtb	r2, r3
 8003266:	7afb      	ldrb	r3, [r7, #11]
 8003268:	4313      	orrs	r3, r2
 800326a:	b2db      	uxtb	r3, r3
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	0092      	lsls	r2, r2, #2
 800328c:	4413      	add	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	b2da      	uxtb	r2, r3
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	4413      	add	r3, r2
 800329e:	b2db      	uxtb	r3, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e040      	b.n	8003354 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd fb76 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f8c0 	bl	8003484 <UART_SetConfig>
 8003304:	4603      	mov	r3, r0
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e022      	b.n	8003354 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fb6c 	bl	80039f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800332a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800333a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fbf3 	bl	8003b38 <UART_CheckIdleState>
 8003352:	4603      	mov	r3, r0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003370:	2b20      	cmp	r3, #32
 8003372:	f040 8082 	bne.w	800347a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_UART_Transmit+0x26>
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e07a      	b.n	800347c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_UART_Transmit+0x38>
 8003390:	2302      	movs	r3, #2
 8003392:	e073      	b.n	800347c <HAL_UART_Transmit+0x120>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2221      	movs	r2, #33	; 0x21
 80033a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033aa:	f7fd fca5 	bl	8000cf8 <HAL_GetTick>
 80033ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	88fa      	ldrh	r2, [r7, #6]
 80033b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	88fa      	ldrh	r2, [r7, #6]
 80033bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c8:	d108      	bne.n	80033dc <HAL_UART_Transmit+0x80>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d104      	bne.n	80033dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	e003      	b.n	80033e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80033ec:	e02d      	b.n	800344a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2180      	movs	r1, #128	; 0x80
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fbe6 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e039      	b.n	800347c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10b      	bne.n	8003426 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	881a      	ldrh	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800341a:	b292      	uxth	r2, r2
 800341c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	3302      	adds	r3, #2
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	e008      	b.n	8003438 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	b292      	uxth	r2, r2
 8003430:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3301      	adds	r3, #1
 8003436:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1cb      	bne.n	80033ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	2140      	movs	r1, #64	; 0x40
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fbb2 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e005      	b.n	800347c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	e000      	b.n	800347c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
  }
}
 800347c:	4618      	mov	r0, r3
 800347e:	3720      	adds	r7, #32
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003488:	b08a      	sub	sp, #40	; 0x28
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	431a      	orrs	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4ba4      	ldr	r3, [pc, #656]	; (8003744 <UART_SetConfig+0x2c0>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034bc:	430b      	orrs	r3, r1
 80034be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a99      	ldr	r2, [pc, #612]	; (8003748 <UART_SetConfig+0x2c4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ec:	4313      	orrs	r3, r2
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003500:	430a      	orrs	r2, r1
 8003502:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a90      	ldr	r2, [pc, #576]	; (800374c <UART_SetConfig+0x2c8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d126      	bne.n	800355c <UART_SetConfig+0xd8>
 800350e:	4b90      	ldr	r3, [pc, #576]	; (8003750 <UART_SetConfig+0x2cc>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b03      	cmp	r3, #3
 800351a:	d81b      	bhi.n	8003554 <UART_SetConfig+0xd0>
 800351c:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <UART_SetConfig+0xa0>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003535 	.word	0x08003535
 8003528:	08003545 	.word	0x08003545
 800352c:	0800353d 	.word	0x0800353d
 8003530:	0800354d 	.word	0x0800354d
 8003534:	2301      	movs	r3, #1
 8003536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353a:	e116      	b.n	800376a <UART_SetConfig+0x2e6>
 800353c:	2302      	movs	r3, #2
 800353e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003542:	e112      	b.n	800376a <UART_SetConfig+0x2e6>
 8003544:	2304      	movs	r3, #4
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800354a:	e10e      	b.n	800376a <UART_SetConfig+0x2e6>
 800354c:	2308      	movs	r3, #8
 800354e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003552:	e10a      	b.n	800376a <UART_SetConfig+0x2e6>
 8003554:	2310      	movs	r3, #16
 8003556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800355a:	e106      	b.n	800376a <UART_SetConfig+0x2e6>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a7c      	ldr	r2, [pc, #496]	; (8003754 <UART_SetConfig+0x2d0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d138      	bne.n	80035d8 <UART_SetConfig+0x154>
 8003566:	4b7a      	ldr	r3, [pc, #488]	; (8003750 <UART_SetConfig+0x2cc>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f003 030c 	and.w	r3, r3, #12
 8003570:	2b0c      	cmp	r3, #12
 8003572:	d82d      	bhi.n	80035d0 <UART_SetConfig+0x14c>
 8003574:	a201      	add	r2, pc, #4	; (adr r2, 800357c <UART_SetConfig+0xf8>)
 8003576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357a:	bf00      	nop
 800357c:	080035b1 	.word	0x080035b1
 8003580:	080035d1 	.word	0x080035d1
 8003584:	080035d1 	.word	0x080035d1
 8003588:	080035d1 	.word	0x080035d1
 800358c:	080035c1 	.word	0x080035c1
 8003590:	080035d1 	.word	0x080035d1
 8003594:	080035d1 	.word	0x080035d1
 8003598:	080035d1 	.word	0x080035d1
 800359c:	080035b9 	.word	0x080035b9
 80035a0:	080035d1 	.word	0x080035d1
 80035a4:	080035d1 	.word	0x080035d1
 80035a8:	080035d1 	.word	0x080035d1
 80035ac:	080035c9 	.word	0x080035c9
 80035b0:	2300      	movs	r3, #0
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b6:	e0d8      	b.n	800376a <UART_SetConfig+0x2e6>
 80035b8:	2302      	movs	r3, #2
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035be:	e0d4      	b.n	800376a <UART_SetConfig+0x2e6>
 80035c0:	2304      	movs	r3, #4
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c6:	e0d0      	b.n	800376a <UART_SetConfig+0x2e6>
 80035c8:	2308      	movs	r3, #8
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ce:	e0cc      	b.n	800376a <UART_SetConfig+0x2e6>
 80035d0:	2310      	movs	r3, #16
 80035d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d6:	e0c8      	b.n	800376a <UART_SetConfig+0x2e6>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a5e      	ldr	r2, [pc, #376]	; (8003758 <UART_SetConfig+0x2d4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d125      	bne.n	800362e <UART_SetConfig+0x1aa>
 80035e2:	4b5b      	ldr	r3, [pc, #364]	; (8003750 <UART_SetConfig+0x2cc>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035ec:	2b30      	cmp	r3, #48	; 0x30
 80035ee:	d016      	beq.n	800361e <UART_SetConfig+0x19a>
 80035f0:	2b30      	cmp	r3, #48	; 0x30
 80035f2:	d818      	bhi.n	8003626 <UART_SetConfig+0x1a2>
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d00a      	beq.n	800360e <UART_SetConfig+0x18a>
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d814      	bhi.n	8003626 <UART_SetConfig+0x1a2>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <UART_SetConfig+0x182>
 8003600:	2b10      	cmp	r3, #16
 8003602:	d008      	beq.n	8003616 <UART_SetConfig+0x192>
 8003604:	e00f      	b.n	8003626 <UART_SetConfig+0x1a2>
 8003606:	2300      	movs	r3, #0
 8003608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360c:	e0ad      	b.n	800376a <UART_SetConfig+0x2e6>
 800360e:	2302      	movs	r3, #2
 8003610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003614:	e0a9      	b.n	800376a <UART_SetConfig+0x2e6>
 8003616:	2304      	movs	r3, #4
 8003618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361c:	e0a5      	b.n	800376a <UART_SetConfig+0x2e6>
 800361e:	2308      	movs	r3, #8
 8003620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003624:	e0a1      	b.n	800376a <UART_SetConfig+0x2e6>
 8003626:	2310      	movs	r3, #16
 8003628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362c:	e09d      	b.n	800376a <UART_SetConfig+0x2e6>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a4a      	ldr	r2, [pc, #296]	; (800375c <UART_SetConfig+0x2d8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d125      	bne.n	8003684 <UART_SetConfig+0x200>
 8003638:	4b45      	ldr	r3, [pc, #276]	; (8003750 <UART_SetConfig+0x2cc>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003642:	2bc0      	cmp	r3, #192	; 0xc0
 8003644:	d016      	beq.n	8003674 <UART_SetConfig+0x1f0>
 8003646:	2bc0      	cmp	r3, #192	; 0xc0
 8003648:	d818      	bhi.n	800367c <UART_SetConfig+0x1f8>
 800364a:	2b80      	cmp	r3, #128	; 0x80
 800364c:	d00a      	beq.n	8003664 <UART_SetConfig+0x1e0>
 800364e:	2b80      	cmp	r3, #128	; 0x80
 8003650:	d814      	bhi.n	800367c <UART_SetConfig+0x1f8>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <UART_SetConfig+0x1d8>
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d008      	beq.n	800366c <UART_SetConfig+0x1e8>
 800365a:	e00f      	b.n	800367c <UART_SetConfig+0x1f8>
 800365c:	2300      	movs	r3, #0
 800365e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003662:	e082      	b.n	800376a <UART_SetConfig+0x2e6>
 8003664:	2302      	movs	r3, #2
 8003666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366a:	e07e      	b.n	800376a <UART_SetConfig+0x2e6>
 800366c:	2304      	movs	r3, #4
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003672:	e07a      	b.n	800376a <UART_SetConfig+0x2e6>
 8003674:	2308      	movs	r3, #8
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367a:	e076      	b.n	800376a <UART_SetConfig+0x2e6>
 800367c:	2310      	movs	r3, #16
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003682:	e072      	b.n	800376a <UART_SetConfig+0x2e6>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a35      	ldr	r2, [pc, #212]	; (8003760 <UART_SetConfig+0x2dc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d12a      	bne.n	80036e4 <UART_SetConfig+0x260>
 800368e:	4b30      	ldr	r3, [pc, #192]	; (8003750 <UART_SetConfig+0x2cc>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800369c:	d01a      	beq.n	80036d4 <UART_SetConfig+0x250>
 800369e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a2:	d81b      	bhi.n	80036dc <UART_SetConfig+0x258>
 80036a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a8:	d00c      	beq.n	80036c4 <UART_SetConfig+0x240>
 80036aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ae:	d815      	bhi.n	80036dc <UART_SetConfig+0x258>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <UART_SetConfig+0x238>
 80036b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b8:	d008      	beq.n	80036cc <UART_SetConfig+0x248>
 80036ba:	e00f      	b.n	80036dc <UART_SetConfig+0x258>
 80036bc:	2300      	movs	r3, #0
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c2:	e052      	b.n	800376a <UART_SetConfig+0x2e6>
 80036c4:	2302      	movs	r3, #2
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ca:	e04e      	b.n	800376a <UART_SetConfig+0x2e6>
 80036cc:	2304      	movs	r3, #4
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d2:	e04a      	b.n	800376a <UART_SetConfig+0x2e6>
 80036d4:	2308      	movs	r3, #8
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036da:	e046      	b.n	800376a <UART_SetConfig+0x2e6>
 80036dc:	2310      	movs	r3, #16
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e2:	e042      	b.n	800376a <UART_SetConfig+0x2e6>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a17      	ldr	r2, [pc, #92]	; (8003748 <UART_SetConfig+0x2c4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d13a      	bne.n	8003764 <UART_SetConfig+0x2e0>
 80036ee:	4b18      	ldr	r3, [pc, #96]	; (8003750 <UART_SetConfig+0x2cc>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036fc:	d01a      	beq.n	8003734 <UART_SetConfig+0x2b0>
 80036fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003702:	d81b      	bhi.n	800373c <UART_SetConfig+0x2b8>
 8003704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003708:	d00c      	beq.n	8003724 <UART_SetConfig+0x2a0>
 800370a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800370e:	d815      	bhi.n	800373c <UART_SetConfig+0x2b8>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <UART_SetConfig+0x298>
 8003714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003718:	d008      	beq.n	800372c <UART_SetConfig+0x2a8>
 800371a:	e00f      	b.n	800373c <UART_SetConfig+0x2b8>
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003722:	e022      	b.n	800376a <UART_SetConfig+0x2e6>
 8003724:	2302      	movs	r3, #2
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372a:	e01e      	b.n	800376a <UART_SetConfig+0x2e6>
 800372c:	2304      	movs	r3, #4
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003732:	e01a      	b.n	800376a <UART_SetConfig+0x2e6>
 8003734:	2308      	movs	r3, #8
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373a:	e016      	b.n	800376a <UART_SetConfig+0x2e6>
 800373c:	2310      	movs	r3, #16
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003742:	e012      	b.n	800376a <UART_SetConfig+0x2e6>
 8003744:	efff69f3 	.word	0xefff69f3
 8003748:	40008000 	.word	0x40008000
 800374c:	40013800 	.word	0x40013800
 8003750:	40021000 	.word	0x40021000
 8003754:	40004400 	.word	0x40004400
 8003758:	40004800 	.word	0x40004800
 800375c:	40004c00 	.word	0x40004c00
 8003760:	40005000 	.word	0x40005000
 8003764:	2310      	movs	r3, #16
 8003766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a9f      	ldr	r2, [pc, #636]	; (80039ec <UART_SetConfig+0x568>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d17a      	bne.n	800386a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003778:	2b08      	cmp	r3, #8
 800377a:	d824      	bhi.n	80037c6 <UART_SetConfig+0x342>
 800377c:	a201      	add	r2, pc, #4	; (adr r2, 8003784 <UART_SetConfig+0x300>)
 800377e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003782:	bf00      	nop
 8003784:	080037a9 	.word	0x080037a9
 8003788:	080037c7 	.word	0x080037c7
 800378c:	080037b1 	.word	0x080037b1
 8003790:	080037c7 	.word	0x080037c7
 8003794:	080037b7 	.word	0x080037b7
 8003798:	080037c7 	.word	0x080037c7
 800379c:	080037c7 	.word	0x080037c7
 80037a0:	080037c7 	.word	0x080037c7
 80037a4:	080037bf 	.word	0x080037bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a8:	f7fe fb92 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 80037ac:	61f8      	str	r0, [r7, #28]
        break;
 80037ae:	e010      	b.n	80037d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b0:	4b8f      	ldr	r3, [pc, #572]	; (80039f0 <UART_SetConfig+0x56c>)
 80037b2:	61fb      	str	r3, [r7, #28]
        break;
 80037b4:	e00d      	b.n	80037d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b6:	f7fe faf3 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 80037ba:	61f8      	str	r0, [r7, #28]
        break;
 80037bc:	e009      	b.n	80037d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c2:	61fb      	str	r3, [r7, #28]
        break;
 80037c4:	e005      	b.n	80037d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80fb 	beq.w	80039d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d305      	bcc.n	80037f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d903      	bls.n	80037fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037fc:	e0e8      	b.n	80039d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	2200      	movs	r2, #0
 8003802:	461c      	mov	r4, r3
 8003804:	4615      	mov	r5, r2
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	022b      	lsls	r3, r5, #8
 8003810:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003814:	0222      	lsls	r2, r4, #8
 8003816:	68f9      	ldr	r1, [r7, #12]
 8003818:	6849      	ldr	r1, [r1, #4]
 800381a:	0849      	lsrs	r1, r1, #1
 800381c:	2000      	movs	r0, #0
 800381e:	4688      	mov	r8, r1
 8003820:	4681      	mov	r9, r0
 8003822:	eb12 0a08 	adds.w	sl, r2, r8
 8003826:	eb43 0b09 	adc.w	fp, r3, r9
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003838:	4650      	mov	r0, sl
 800383a:	4659      	mov	r1, fp
 800383c:	f7fc fd20 	bl	8000280 <__aeabi_uldivmod>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4613      	mov	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800384e:	d308      	bcc.n	8003862 <UART_SetConfig+0x3de>
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003856:	d204      	bcs.n	8003862 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	60da      	str	r2, [r3, #12]
 8003860:	e0b6      	b.n	80039d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003868:	e0b2      	b.n	80039d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003872:	d15e      	bne.n	8003932 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003878:	2b08      	cmp	r3, #8
 800387a:	d828      	bhi.n	80038ce <UART_SetConfig+0x44a>
 800387c:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <UART_SetConfig+0x400>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	080038a9 	.word	0x080038a9
 8003888:	080038b1 	.word	0x080038b1
 800388c:	080038b9 	.word	0x080038b9
 8003890:	080038cf 	.word	0x080038cf
 8003894:	080038bf 	.word	0x080038bf
 8003898:	080038cf 	.word	0x080038cf
 800389c:	080038cf 	.word	0x080038cf
 80038a0:	080038cf 	.word	0x080038cf
 80038a4:	080038c7 	.word	0x080038c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a8:	f7fe fb12 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 80038ac:	61f8      	str	r0, [r7, #28]
        break;
 80038ae:	e014      	b.n	80038da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b0:	f7fe fb24 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 80038b4:	61f8      	str	r0, [r7, #28]
        break;
 80038b6:	e010      	b.n	80038da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038b8:	4b4d      	ldr	r3, [pc, #308]	; (80039f0 <UART_SetConfig+0x56c>)
 80038ba:	61fb      	str	r3, [r7, #28]
        break;
 80038bc:	e00d      	b.n	80038da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038be:	f7fe fa6f 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 80038c2:	61f8      	str	r0, [r7, #28]
        break;
 80038c4:	e009      	b.n	80038da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ca:	61fb      	str	r3, [r7, #28]
        break;
 80038cc:	e005      	b.n	80038da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d077      	beq.n	80039d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	005a      	lsls	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	441a      	add	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d916      	bls.n	800392a <UART_SetConfig+0x4a6>
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003902:	d212      	bcs.n	800392a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	b29b      	uxth	r3, r3
 8003908:	f023 030f 	bic.w	r3, r3, #15
 800390c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	b29b      	uxth	r3, r3
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	b29a      	uxth	r2, r3
 800391a:	8afb      	ldrh	r3, [r7, #22]
 800391c:	4313      	orrs	r3, r2
 800391e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	8afa      	ldrh	r2, [r7, #22]
 8003926:	60da      	str	r2, [r3, #12]
 8003928:	e052      	b.n	80039d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003930:	e04e      	b.n	80039d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003932:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003936:	2b08      	cmp	r3, #8
 8003938:	d827      	bhi.n	800398a <UART_SetConfig+0x506>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <UART_SetConfig+0x4bc>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003965 	.word	0x08003965
 8003944:	0800396d 	.word	0x0800396d
 8003948:	08003975 	.word	0x08003975
 800394c:	0800398b 	.word	0x0800398b
 8003950:	0800397b 	.word	0x0800397b
 8003954:	0800398b 	.word	0x0800398b
 8003958:	0800398b 	.word	0x0800398b
 800395c:	0800398b 	.word	0x0800398b
 8003960:	08003983 	.word	0x08003983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003964:	f7fe fab4 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 8003968:	61f8      	str	r0, [r7, #28]
        break;
 800396a:	e014      	b.n	8003996 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7fe fac6 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 8003970:	61f8      	str	r0, [r7, #28]
        break;
 8003972:	e010      	b.n	8003996 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003974:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <UART_SetConfig+0x56c>)
 8003976:	61fb      	str	r3, [r7, #28]
        break;
 8003978:	e00d      	b.n	8003996 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397a:	f7fe fa11 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 800397e:	61f8      	str	r0, [r7, #28]
        break;
 8003980:	e009      	b.n	8003996 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003986:	61fb      	str	r3, [r7, #28]
        break;
 8003988:	e005      	b.n	8003996 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003994:	bf00      	nop
    }

    if (pclk != 0U)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d019      	beq.n	80039d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	085a      	lsrs	r2, r3, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	441a      	add	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b0f      	cmp	r3, #15
 80039b4:	d909      	bls.n	80039ca <UART_SetConfig+0x546>
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039bc:	d205      	bcs.n	80039ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60da      	str	r2, [r3, #12]
 80039c8:	e002      	b.n	80039d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3728      	adds	r7, #40	; 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ea:	bf00      	nop
 80039ec:	40008000 	.word	0x40008000
 80039f0:	00f42400 	.word	0x00f42400

080039f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01a      	beq.n	8003b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af2:	d10a      	bne.n	8003b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b48:	f7fd f8d6 	bl	8000cf8 <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d10e      	bne.n	8003b7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f82d 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e023      	b.n	8003bc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d10e      	bne.n	8003ba6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f817 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e00d      	b.n	8003bc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b09c      	sub	sp, #112	; 0x70
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bda:	e0a5      	b.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	f000 80a1 	beq.w	8003d28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be6:	f7fd f887 	bl	8000cf8 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d302      	bcc.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x32>
 8003bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d13e      	bne.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c10:	667b      	str	r3, [r7, #100]	; 0x64
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c22:	e841 2300 	strex	r3, r2, [r1]
 8003c26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e6      	bne.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3308      	adds	r3, #8
 8003c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	663b      	str	r3, [r7, #96]	; 0x60
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e5      	bne.n	8003c2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e067      	b.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d04f      	beq.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c96:	d147      	bne.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ca0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e6      	bne.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003cf4:	623a      	str	r2, [r7, #32]
 8003cf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	69f9      	ldr	r1, [r7, #28]
 8003cfa:	6a3a      	ldr	r2, [r7, #32]
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e5      	bne.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e010      	b.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4013      	ands	r3, r2
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	f43f af4a 	beq.w	8003bdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3770      	adds	r7, #112	; 0x70
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <__errno>:
 8003d54:	4b01      	ldr	r3, [pc, #4]	; (8003d5c <__errno+0x8>)
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	2000000c 	.word	0x2000000c

08003d60 <__libc_init_array>:
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	4d0d      	ldr	r5, [pc, #52]	; (8003d98 <__libc_init_array+0x38>)
 8003d64:	4c0d      	ldr	r4, [pc, #52]	; (8003d9c <__libc_init_array+0x3c>)
 8003d66:	1b64      	subs	r4, r4, r5
 8003d68:	10a4      	asrs	r4, r4, #2
 8003d6a:	2600      	movs	r6, #0
 8003d6c:	42a6      	cmp	r6, r4
 8003d6e:	d109      	bne.n	8003d84 <__libc_init_array+0x24>
 8003d70:	4d0b      	ldr	r5, [pc, #44]	; (8003da0 <__libc_init_array+0x40>)
 8003d72:	4c0c      	ldr	r4, [pc, #48]	; (8003da4 <__libc_init_array+0x44>)
 8003d74:	f000 fc8e 	bl	8004694 <_init>
 8003d78:	1b64      	subs	r4, r4, r5
 8003d7a:	10a4      	asrs	r4, r4, #2
 8003d7c:	2600      	movs	r6, #0
 8003d7e:	42a6      	cmp	r6, r4
 8003d80:	d105      	bne.n	8003d8e <__libc_init_array+0x2e>
 8003d82:	bd70      	pop	{r4, r5, r6, pc}
 8003d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d88:	4798      	blx	r3
 8003d8a:	3601      	adds	r6, #1
 8003d8c:	e7ee      	b.n	8003d6c <__libc_init_array+0xc>
 8003d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d92:	4798      	blx	r3
 8003d94:	3601      	adds	r6, #1
 8003d96:	e7f2      	b.n	8003d7e <__libc_init_array+0x1e>
 8003d98:	08004744 	.word	0x08004744
 8003d9c:	08004744 	.word	0x08004744
 8003da0:	08004744 	.word	0x08004744
 8003da4:	08004748 	.word	0x08004748

08003da8 <memset>:
 8003da8:	4402      	add	r2, r0
 8003daa:	4603      	mov	r3, r0
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d100      	bne.n	8003db2 <memset+0xa>
 8003db0:	4770      	bx	lr
 8003db2:	f803 1b01 	strb.w	r1, [r3], #1
 8003db6:	e7f9      	b.n	8003dac <memset+0x4>

08003db8 <siprintf>:
 8003db8:	b40e      	push	{r1, r2, r3}
 8003dba:	b500      	push	{lr}
 8003dbc:	b09c      	sub	sp, #112	; 0x70
 8003dbe:	ab1d      	add	r3, sp, #116	; 0x74
 8003dc0:	9002      	str	r0, [sp, #8]
 8003dc2:	9006      	str	r0, [sp, #24]
 8003dc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dc8:	4809      	ldr	r0, [pc, #36]	; (8003df0 <siprintf+0x38>)
 8003dca:	9107      	str	r1, [sp, #28]
 8003dcc:	9104      	str	r1, [sp, #16]
 8003dce:	4909      	ldr	r1, [pc, #36]	; (8003df4 <siprintf+0x3c>)
 8003dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dd4:	9105      	str	r1, [sp, #20]
 8003dd6:	6800      	ldr	r0, [r0, #0]
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	a902      	add	r1, sp, #8
 8003ddc:	f000 f868 	bl	8003eb0 <_svfiprintf_r>
 8003de0:	9b02      	ldr	r3, [sp, #8]
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	b01c      	add	sp, #112	; 0x70
 8003de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dec:	b003      	add	sp, #12
 8003dee:	4770      	bx	lr
 8003df0:	2000000c 	.word	0x2000000c
 8003df4:	ffff0208 	.word	0xffff0208

08003df8 <__ssputs_r>:
 8003df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dfc:	688e      	ldr	r6, [r1, #8]
 8003dfe:	429e      	cmp	r6, r3
 8003e00:	4682      	mov	sl, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	4690      	mov	r8, r2
 8003e06:	461f      	mov	r7, r3
 8003e08:	d838      	bhi.n	8003e7c <__ssputs_r+0x84>
 8003e0a:	898a      	ldrh	r2, [r1, #12]
 8003e0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e10:	d032      	beq.n	8003e78 <__ssputs_r+0x80>
 8003e12:	6825      	ldr	r5, [r4, #0]
 8003e14:	6909      	ldr	r1, [r1, #16]
 8003e16:	eba5 0901 	sub.w	r9, r5, r1
 8003e1a:	6965      	ldr	r5, [r4, #20]
 8003e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e24:	3301      	adds	r3, #1
 8003e26:	444b      	add	r3, r9
 8003e28:	106d      	asrs	r5, r5, #1
 8003e2a:	429d      	cmp	r5, r3
 8003e2c:	bf38      	it	cc
 8003e2e:	461d      	movcc	r5, r3
 8003e30:	0553      	lsls	r3, r2, #21
 8003e32:	d531      	bpl.n	8003e98 <__ssputs_r+0xa0>
 8003e34:	4629      	mov	r1, r5
 8003e36:	f000 fb63 	bl	8004500 <_malloc_r>
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	b950      	cbnz	r0, 8003e54 <__ssputs_r+0x5c>
 8003e3e:	230c      	movs	r3, #12
 8003e40:	f8ca 3000 	str.w	r3, [sl]
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e4a:	81a3      	strh	r3, [r4, #12]
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e54:	6921      	ldr	r1, [r4, #16]
 8003e56:	464a      	mov	r2, r9
 8003e58:	f000 fabe 	bl	80043d8 <memcpy>
 8003e5c:	89a3      	ldrh	r3, [r4, #12]
 8003e5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e66:	81a3      	strh	r3, [r4, #12]
 8003e68:	6126      	str	r6, [r4, #16]
 8003e6a:	6165      	str	r5, [r4, #20]
 8003e6c:	444e      	add	r6, r9
 8003e6e:	eba5 0509 	sub.w	r5, r5, r9
 8003e72:	6026      	str	r6, [r4, #0]
 8003e74:	60a5      	str	r5, [r4, #8]
 8003e76:	463e      	mov	r6, r7
 8003e78:	42be      	cmp	r6, r7
 8003e7a:	d900      	bls.n	8003e7e <__ssputs_r+0x86>
 8003e7c:	463e      	mov	r6, r7
 8003e7e:	6820      	ldr	r0, [r4, #0]
 8003e80:	4632      	mov	r2, r6
 8003e82:	4641      	mov	r1, r8
 8003e84:	f000 fab6 	bl	80043f4 <memmove>
 8003e88:	68a3      	ldr	r3, [r4, #8]
 8003e8a:	1b9b      	subs	r3, r3, r6
 8003e8c:	60a3      	str	r3, [r4, #8]
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	4433      	add	r3, r6
 8003e92:	6023      	str	r3, [r4, #0]
 8003e94:	2000      	movs	r0, #0
 8003e96:	e7db      	b.n	8003e50 <__ssputs_r+0x58>
 8003e98:	462a      	mov	r2, r5
 8003e9a:	f000 fba5 	bl	80045e8 <_realloc_r>
 8003e9e:	4606      	mov	r6, r0
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d1e1      	bne.n	8003e68 <__ssputs_r+0x70>
 8003ea4:	6921      	ldr	r1, [r4, #16]
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	f000 fabe 	bl	8004428 <_free_r>
 8003eac:	e7c7      	b.n	8003e3e <__ssputs_r+0x46>
	...

08003eb0 <_svfiprintf_r>:
 8003eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb4:	4698      	mov	r8, r3
 8003eb6:	898b      	ldrh	r3, [r1, #12]
 8003eb8:	061b      	lsls	r3, r3, #24
 8003eba:	b09d      	sub	sp, #116	; 0x74
 8003ebc:	4607      	mov	r7, r0
 8003ebe:	460d      	mov	r5, r1
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	d50e      	bpl.n	8003ee2 <_svfiprintf_r+0x32>
 8003ec4:	690b      	ldr	r3, [r1, #16]
 8003ec6:	b963      	cbnz	r3, 8003ee2 <_svfiprintf_r+0x32>
 8003ec8:	2140      	movs	r1, #64	; 0x40
 8003eca:	f000 fb19 	bl	8004500 <_malloc_r>
 8003ece:	6028      	str	r0, [r5, #0]
 8003ed0:	6128      	str	r0, [r5, #16]
 8003ed2:	b920      	cbnz	r0, 8003ede <_svfiprintf_r+0x2e>
 8003ed4:	230c      	movs	r3, #12
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8003edc:	e0d1      	b.n	8004082 <_svfiprintf_r+0x1d2>
 8003ede:	2340      	movs	r3, #64	; 0x40
 8003ee0:	616b      	str	r3, [r5, #20]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee6:	2320      	movs	r3, #32
 8003ee8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eec:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ef0:	2330      	movs	r3, #48	; 0x30
 8003ef2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800409c <_svfiprintf_r+0x1ec>
 8003ef6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003efa:	f04f 0901 	mov.w	r9, #1
 8003efe:	4623      	mov	r3, r4
 8003f00:	469a      	mov	sl, r3
 8003f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f06:	b10a      	cbz	r2, 8003f0c <_svfiprintf_r+0x5c>
 8003f08:	2a25      	cmp	r2, #37	; 0x25
 8003f0a:	d1f9      	bne.n	8003f00 <_svfiprintf_r+0x50>
 8003f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8003f10:	d00b      	beq.n	8003f2a <_svfiprintf_r+0x7a>
 8003f12:	465b      	mov	r3, fp
 8003f14:	4622      	mov	r2, r4
 8003f16:	4629      	mov	r1, r5
 8003f18:	4638      	mov	r0, r7
 8003f1a:	f7ff ff6d 	bl	8003df8 <__ssputs_r>
 8003f1e:	3001      	adds	r0, #1
 8003f20:	f000 80aa 	beq.w	8004078 <_svfiprintf_r+0x1c8>
 8003f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f26:	445a      	add	r2, fp
 8003f28:	9209      	str	r2, [sp, #36]	; 0x24
 8003f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80a2 	beq.w	8004078 <_svfiprintf_r+0x1c8>
 8003f34:	2300      	movs	r3, #0
 8003f36:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f3e:	f10a 0a01 	add.w	sl, sl, #1
 8003f42:	9304      	str	r3, [sp, #16]
 8003f44:	9307      	str	r3, [sp, #28]
 8003f46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f4a:	931a      	str	r3, [sp, #104]	; 0x68
 8003f4c:	4654      	mov	r4, sl
 8003f4e:	2205      	movs	r2, #5
 8003f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f54:	4851      	ldr	r0, [pc, #324]	; (800409c <_svfiprintf_r+0x1ec>)
 8003f56:	f7fc f943 	bl	80001e0 <memchr>
 8003f5a:	9a04      	ldr	r2, [sp, #16]
 8003f5c:	b9d8      	cbnz	r0, 8003f96 <_svfiprintf_r+0xe6>
 8003f5e:	06d0      	lsls	r0, r2, #27
 8003f60:	bf44      	itt	mi
 8003f62:	2320      	movmi	r3, #32
 8003f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f68:	0711      	lsls	r1, r2, #28
 8003f6a:	bf44      	itt	mi
 8003f6c:	232b      	movmi	r3, #43	; 0x2b
 8003f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f72:	f89a 3000 	ldrb.w	r3, [sl]
 8003f76:	2b2a      	cmp	r3, #42	; 0x2a
 8003f78:	d015      	beq.n	8003fa6 <_svfiprintf_r+0xf6>
 8003f7a:	9a07      	ldr	r2, [sp, #28]
 8003f7c:	4654      	mov	r4, sl
 8003f7e:	2000      	movs	r0, #0
 8003f80:	f04f 0c0a 	mov.w	ip, #10
 8003f84:	4621      	mov	r1, r4
 8003f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f8a:	3b30      	subs	r3, #48	; 0x30
 8003f8c:	2b09      	cmp	r3, #9
 8003f8e:	d94e      	bls.n	800402e <_svfiprintf_r+0x17e>
 8003f90:	b1b0      	cbz	r0, 8003fc0 <_svfiprintf_r+0x110>
 8003f92:	9207      	str	r2, [sp, #28]
 8003f94:	e014      	b.n	8003fc0 <_svfiprintf_r+0x110>
 8003f96:	eba0 0308 	sub.w	r3, r0, r8
 8003f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	9304      	str	r3, [sp, #16]
 8003fa2:	46a2      	mov	sl, r4
 8003fa4:	e7d2      	b.n	8003f4c <_svfiprintf_r+0x9c>
 8003fa6:	9b03      	ldr	r3, [sp, #12]
 8003fa8:	1d19      	adds	r1, r3, #4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	9103      	str	r1, [sp, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bfbb      	ittet	lt
 8003fb2:	425b      	neglt	r3, r3
 8003fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8003fb8:	9307      	strge	r3, [sp, #28]
 8003fba:	9307      	strlt	r3, [sp, #28]
 8003fbc:	bfb8      	it	lt
 8003fbe:	9204      	strlt	r2, [sp, #16]
 8003fc0:	7823      	ldrb	r3, [r4, #0]
 8003fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8003fc4:	d10c      	bne.n	8003fe0 <_svfiprintf_r+0x130>
 8003fc6:	7863      	ldrb	r3, [r4, #1]
 8003fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8003fca:	d135      	bne.n	8004038 <_svfiprintf_r+0x188>
 8003fcc:	9b03      	ldr	r3, [sp, #12]
 8003fce:	1d1a      	adds	r2, r3, #4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	9203      	str	r2, [sp, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bfb8      	it	lt
 8003fd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fdc:	3402      	adds	r4, #2
 8003fde:	9305      	str	r3, [sp, #20]
 8003fe0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040ac <_svfiprintf_r+0x1fc>
 8003fe4:	7821      	ldrb	r1, [r4, #0]
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	4650      	mov	r0, sl
 8003fea:	f7fc f8f9 	bl	80001e0 <memchr>
 8003fee:	b140      	cbz	r0, 8004002 <_svfiprintf_r+0x152>
 8003ff0:	2340      	movs	r3, #64	; 0x40
 8003ff2:	eba0 000a 	sub.w	r0, r0, sl
 8003ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8003ffa:	9b04      	ldr	r3, [sp, #16]
 8003ffc:	4303      	orrs	r3, r0
 8003ffe:	3401      	adds	r4, #1
 8004000:	9304      	str	r3, [sp, #16]
 8004002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004006:	4826      	ldr	r0, [pc, #152]	; (80040a0 <_svfiprintf_r+0x1f0>)
 8004008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800400c:	2206      	movs	r2, #6
 800400e:	f7fc f8e7 	bl	80001e0 <memchr>
 8004012:	2800      	cmp	r0, #0
 8004014:	d038      	beq.n	8004088 <_svfiprintf_r+0x1d8>
 8004016:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <_svfiprintf_r+0x1f4>)
 8004018:	bb1b      	cbnz	r3, 8004062 <_svfiprintf_r+0x1b2>
 800401a:	9b03      	ldr	r3, [sp, #12]
 800401c:	3307      	adds	r3, #7
 800401e:	f023 0307 	bic.w	r3, r3, #7
 8004022:	3308      	adds	r3, #8
 8004024:	9303      	str	r3, [sp, #12]
 8004026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004028:	4433      	add	r3, r6
 800402a:	9309      	str	r3, [sp, #36]	; 0x24
 800402c:	e767      	b.n	8003efe <_svfiprintf_r+0x4e>
 800402e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004032:	460c      	mov	r4, r1
 8004034:	2001      	movs	r0, #1
 8004036:	e7a5      	b.n	8003f84 <_svfiprintf_r+0xd4>
 8004038:	2300      	movs	r3, #0
 800403a:	3401      	adds	r4, #1
 800403c:	9305      	str	r3, [sp, #20]
 800403e:	4619      	mov	r1, r3
 8004040:	f04f 0c0a 	mov.w	ip, #10
 8004044:	4620      	mov	r0, r4
 8004046:	f810 2b01 	ldrb.w	r2, [r0], #1
 800404a:	3a30      	subs	r2, #48	; 0x30
 800404c:	2a09      	cmp	r2, #9
 800404e:	d903      	bls.n	8004058 <_svfiprintf_r+0x1a8>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0c5      	beq.n	8003fe0 <_svfiprintf_r+0x130>
 8004054:	9105      	str	r1, [sp, #20]
 8004056:	e7c3      	b.n	8003fe0 <_svfiprintf_r+0x130>
 8004058:	fb0c 2101 	mla	r1, ip, r1, r2
 800405c:	4604      	mov	r4, r0
 800405e:	2301      	movs	r3, #1
 8004060:	e7f0      	b.n	8004044 <_svfiprintf_r+0x194>
 8004062:	ab03      	add	r3, sp, #12
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	462a      	mov	r2, r5
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <_svfiprintf_r+0x1f8>)
 800406a:	a904      	add	r1, sp, #16
 800406c:	4638      	mov	r0, r7
 800406e:	f3af 8000 	nop.w
 8004072:	1c42      	adds	r2, r0, #1
 8004074:	4606      	mov	r6, r0
 8004076:	d1d6      	bne.n	8004026 <_svfiprintf_r+0x176>
 8004078:	89ab      	ldrh	r3, [r5, #12]
 800407a:	065b      	lsls	r3, r3, #25
 800407c:	f53f af2c 	bmi.w	8003ed8 <_svfiprintf_r+0x28>
 8004080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004082:	b01d      	add	sp, #116	; 0x74
 8004084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004088:	ab03      	add	r3, sp, #12
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	462a      	mov	r2, r5
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <_svfiprintf_r+0x1f8>)
 8004090:	a904      	add	r1, sp, #16
 8004092:	4638      	mov	r0, r7
 8004094:	f000 f87a 	bl	800418c <_printf_i>
 8004098:	e7eb      	b.n	8004072 <_svfiprintf_r+0x1c2>
 800409a:	bf00      	nop
 800409c:	08004708 	.word	0x08004708
 80040a0:	08004712 	.word	0x08004712
 80040a4:	00000000 	.word	0x00000000
 80040a8:	08003df9 	.word	0x08003df9
 80040ac:	0800470e 	.word	0x0800470e

080040b0 <_printf_common>:
 80040b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b4:	4616      	mov	r6, r2
 80040b6:	4699      	mov	r9, r3
 80040b8:	688a      	ldr	r2, [r1, #8]
 80040ba:	690b      	ldr	r3, [r1, #16]
 80040bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040c0:	4293      	cmp	r3, r2
 80040c2:	bfb8      	it	lt
 80040c4:	4613      	movlt	r3, r2
 80040c6:	6033      	str	r3, [r6, #0]
 80040c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040cc:	4607      	mov	r7, r0
 80040ce:	460c      	mov	r4, r1
 80040d0:	b10a      	cbz	r2, 80040d6 <_printf_common+0x26>
 80040d2:	3301      	adds	r3, #1
 80040d4:	6033      	str	r3, [r6, #0]
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	0699      	lsls	r1, r3, #26
 80040da:	bf42      	ittt	mi
 80040dc:	6833      	ldrmi	r3, [r6, #0]
 80040de:	3302      	addmi	r3, #2
 80040e0:	6033      	strmi	r3, [r6, #0]
 80040e2:	6825      	ldr	r5, [r4, #0]
 80040e4:	f015 0506 	ands.w	r5, r5, #6
 80040e8:	d106      	bne.n	80040f8 <_printf_common+0x48>
 80040ea:	f104 0a19 	add.w	sl, r4, #25
 80040ee:	68e3      	ldr	r3, [r4, #12]
 80040f0:	6832      	ldr	r2, [r6, #0]
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	42ab      	cmp	r3, r5
 80040f6:	dc26      	bgt.n	8004146 <_printf_common+0x96>
 80040f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040fc:	1e13      	subs	r3, r2, #0
 80040fe:	6822      	ldr	r2, [r4, #0]
 8004100:	bf18      	it	ne
 8004102:	2301      	movne	r3, #1
 8004104:	0692      	lsls	r2, r2, #26
 8004106:	d42b      	bmi.n	8004160 <_printf_common+0xb0>
 8004108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800410c:	4649      	mov	r1, r9
 800410e:	4638      	mov	r0, r7
 8004110:	47c0      	blx	r8
 8004112:	3001      	adds	r0, #1
 8004114:	d01e      	beq.n	8004154 <_printf_common+0xa4>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	68e5      	ldr	r5, [r4, #12]
 800411a:	6832      	ldr	r2, [r6, #0]
 800411c:	f003 0306 	and.w	r3, r3, #6
 8004120:	2b04      	cmp	r3, #4
 8004122:	bf08      	it	eq
 8004124:	1aad      	subeq	r5, r5, r2
 8004126:	68a3      	ldr	r3, [r4, #8]
 8004128:	6922      	ldr	r2, [r4, #16]
 800412a:	bf0c      	ite	eq
 800412c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004130:	2500      	movne	r5, #0
 8004132:	4293      	cmp	r3, r2
 8004134:	bfc4      	itt	gt
 8004136:	1a9b      	subgt	r3, r3, r2
 8004138:	18ed      	addgt	r5, r5, r3
 800413a:	2600      	movs	r6, #0
 800413c:	341a      	adds	r4, #26
 800413e:	42b5      	cmp	r5, r6
 8004140:	d11a      	bne.n	8004178 <_printf_common+0xc8>
 8004142:	2000      	movs	r0, #0
 8004144:	e008      	b.n	8004158 <_printf_common+0xa8>
 8004146:	2301      	movs	r3, #1
 8004148:	4652      	mov	r2, sl
 800414a:	4649      	mov	r1, r9
 800414c:	4638      	mov	r0, r7
 800414e:	47c0      	blx	r8
 8004150:	3001      	adds	r0, #1
 8004152:	d103      	bne.n	800415c <_printf_common+0xac>
 8004154:	f04f 30ff 	mov.w	r0, #4294967295
 8004158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415c:	3501      	adds	r5, #1
 800415e:	e7c6      	b.n	80040ee <_printf_common+0x3e>
 8004160:	18e1      	adds	r1, r4, r3
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	2030      	movs	r0, #48	; 0x30
 8004166:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800416a:	4422      	add	r2, r4
 800416c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004174:	3302      	adds	r3, #2
 8004176:	e7c7      	b.n	8004108 <_printf_common+0x58>
 8004178:	2301      	movs	r3, #1
 800417a:	4622      	mov	r2, r4
 800417c:	4649      	mov	r1, r9
 800417e:	4638      	mov	r0, r7
 8004180:	47c0      	blx	r8
 8004182:	3001      	adds	r0, #1
 8004184:	d0e6      	beq.n	8004154 <_printf_common+0xa4>
 8004186:	3601      	adds	r6, #1
 8004188:	e7d9      	b.n	800413e <_printf_common+0x8e>
	...

0800418c <_printf_i>:
 800418c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004190:	7e0f      	ldrb	r7, [r1, #24]
 8004192:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004194:	2f78      	cmp	r7, #120	; 0x78
 8004196:	4691      	mov	r9, r2
 8004198:	4680      	mov	r8, r0
 800419a:	460c      	mov	r4, r1
 800419c:	469a      	mov	sl, r3
 800419e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041a2:	d807      	bhi.n	80041b4 <_printf_i+0x28>
 80041a4:	2f62      	cmp	r7, #98	; 0x62
 80041a6:	d80a      	bhi.n	80041be <_printf_i+0x32>
 80041a8:	2f00      	cmp	r7, #0
 80041aa:	f000 80d8 	beq.w	800435e <_printf_i+0x1d2>
 80041ae:	2f58      	cmp	r7, #88	; 0x58
 80041b0:	f000 80a3 	beq.w	80042fa <_printf_i+0x16e>
 80041b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041bc:	e03a      	b.n	8004234 <_printf_i+0xa8>
 80041be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041c2:	2b15      	cmp	r3, #21
 80041c4:	d8f6      	bhi.n	80041b4 <_printf_i+0x28>
 80041c6:	a101      	add	r1, pc, #4	; (adr r1, 80041cc <_printf_i+0x40>)
 80041c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041cc:	08004225 	.word	0x08004225
 80041d0:	08004239 	.word	0x08004239
 80041d4:	080041b5 	.word	0x080041b5
 80041d8:	080041b5 	.word	0x080041b5
 80041dc:	080041b5 	.word	0x080041b5
 80041e0:	080041b5 	.word	0x080041b5
 80041e4:	08004239 	.word	0x08004239
 80041e8:	080041b5 	.word	0x080041b5
 80041ec:	080041b5 	.word	0x080041b5
 80041f0:	080041b5 	.word	0x080041b5
 80041f4:	080041b5 	.word	0x080041b5
 80041f8:	08004345 	.word	0x08004345
 80041fc:	08004269 	.word	0x08004269
 8004200:	08004327 	.word	0x08004327
 8004204:	080041b5 	.word	0x080041b5
 8004208:	080041b5 	.word	0x080041b5
 800420c:	08004367 	.word	0x08004367
 8004210:	080041b5 	.word	0x080041b5
 8004214:	08004269 	.word	0x08004269
 8004218:	080041b5 	.word	0x080041b5
 800421c:	080041b5 	.word	0x080041b5
 8004220:	0800432f 	.word	0x0800432f
 8004224:	682b      	ldr	r3, [r5, #0]
 8004226:	1d1a      	adds	r2, r3, #4
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	602a      	str	r2, [r5, #0]
 800422c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004234:	2301      	movs	r3, #1
 8004236:	e0a3      	b.n	8004380 <_printf_i+0x1f4>
 8004238:	6820      	ldr	r0, [r4, #0]
 800423a:	6829      	ldr	r1, [r5, #0]
 800423c:	0606      	lsls	r6, r0, #24
 800423e:	f101 0304 	add.w	r3, r1, #4
 8004242:	d50a      	bpl.n	800425a <_printf_i+0xce>
 8004244:	680e      	ldr	r6, [r1, #0]
 8004246:	602b      	str	r3, [r5, #0]
 8004248:	2e00      	cmp	r6, #0
 800424a:	da03      	bge.n	8004254 <_printf_i+0xc8>
 800424c:	232d      	movs	r3, #45	; 0x2d
 800424e:	4276      	negs	r6, r6
 8004250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004254:	485e      	ldr	r0, [pc, #376]	; (80043d0 <_printf_i+0x244>)
 8004256:	230a      	movs	r3, #10
 8004258:	e019      	b.n	800428e <_printf_i+0x102>
 800425a:	680e      	ldr	r6, [r1, #0]
 800425c:	602b      	str	r3, [r5, #0]
 800425e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004262:	bf18      	it	ne
 8004264:	b236      	sxthne	r6, r6
 8004266:	e7ef      	b.n	8004248 <_printf_i+0xbc>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	6820      	ldr	r0, [r4, #0]
 800426c:	1d19      	adds	r1, r3, #4
 800426e:	6029      	str	r1, [r5, #0]
 8004270:	0601      	lsls	r1, r0, #24
 8004272:	d501      	bpl.n	8004278 <_printf_i+0xec>
 8004274:	681e      	ldr	r6, [r3, #0]
 8004276:	e002      	b.n	800427e <_printf_i+0xf2>
 8004278:	0646      	lsls	r6, r0, #25
 800427a:	d5fb      	bpl.n	8004274 <_printf_i+0xe8>
 800427c:	881e      	ldrh	r6, [r3, #0]
 800427e:	4854      	ldr	r0, [pc, #336]	; (80043d0 <_printf_i+0x244>)
 8004280:	2f6f      	cmp	r7, #111	; 0x6f
 8004282:	bf0c      	ite	eq
 8004284:	2308      	moveq	r3, #8
 8004286:	230a      	movne	r3, #10
 8004288:	2100      	movs	r1, #0
 800428a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800428e:	6865      	ldr	r5, [r4, #4]
 8004290:	60a5      	str	r5, [r4, #8]
 8004292:	2d00      	cmp	r5, #0
 8004294:	bfa2      	ittt	ge
 8004296:	6821      	ldrge	r1, [r4, #0]
 8004298:	f021 0104 	bicge.w	r1, r1, #4
 800429c:	6021      	strge	r1, [r4, #0]
 800429e:	b90e      	cbnz	r6, 80042a4 <_printf_i+0x118>
 80042a0:	2d00      	cmp	r5, #0
 80042a2:	d04d      	beq.n	8004340 <_printf_i+0x1b4>
 80042a4:	4615      	mov	r5, r2
 80042a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80042aa:	fb03 6711 	mls	r7, r3, r1, r6
 80042ae:	5dc7      	ldrb	r7, [r0, r7]
 80042b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042b4:	4637      	mov	r7, r6
 80042b6:	42bb      	cmp	r3, r7
 80042b8:	460e      	mov	r6, r1
 80042ba:	d9f4      	bls.n	80042a6 <_printf_i+0x11a>
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d10b      	bne.n	80042d8 <_printf_i+0x14c>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	07de      	lsls	r6, r3, #31
 80042c4:	d508      	bpl.n	80042d8 <_printf_i+0x14c>
 80042c6:	6923      	ldr	r3, [r4, #16]
 80042c8:	6861      	ldr	r1, [r4, #4]
 80042ca:	4299      	cmp	r1, r3
 80042cc:	bfde      	ittt	le
 80042ce:	2330      	movle	r3, #48	; 0x30
 80042d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042d8:	1b52      	subs	r2, r2, r5
 80042da:	6122      	str	r2, [r4, #16]
 80042dc:	f8cd a000 	str.w	sl, [sp]
 80042e0:	464b      	mov	r3, r9
 80042e2:	aa03      	add	r2, sp, #12
 80042e4:	4621      	mov	r1, r4
 80042e6:	4640      	mov	r0, r8
 80042e8:	f7ff fee2 	bl	80040b0 <_printf_common>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d14c      	bne.n	800438a <_printf_i+0x1fe>
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295
 80042f4:	b004      	add	sp, #16
 80042f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fa:	4835      	ldr	r0, [pc, #212]	; (80043d0 <_printf_i+0x244>)
 80042fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004300:	6829      	ldr	r1, [r5, #0]
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	f851 6b04 	ldr.w	r6, [r1], #4
 8004308:	6029      	str	r1, [r5, #0]
 800430a:	061d      	lsls	r5, r3, #24
 800430c:	d514      	bpl.n	8004338 <_printf_i+0x1ac>
 800430e:	07df      	lsls	r7, r3, #31
 8004310:	bf44      	itt	mi
 8004312:	f043 0320 	orrmi.w	r3, r3, #32
 8004316:	6023      	strmi	r3, [r4, #0]
 8004318:	b91e      	cbnz	r6, 8004322 <_printf_i+0x196>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	f023 0320 	bic.w	r3, r3, #32
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	2310      	movs	r3, #16
 8004324:	e7b0      	b.n	8004288 <_printf_i+0xfc>
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	f043 0320 	orr.w	r3, r3, #32
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	2378      	movs	r3, #120	; 0x78
 8004330:	4828      	ldr	r0, [pc, #160]	; (80043d4 <_printf_i+0x248>)
 8004332:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004336:	e7e3      	b.n	8004300 <_printf_i+0x174>
 8004338:	0659      	lsls	r1, r3, #25
 800433a:	bf48      	it	mi
 800433c:	b2b6      	uxthmi	r6, r6
 800433e:	e7e6      	b.n	800430e <_printf_i+0x182>
 8004340:	4615      	mov	r5, r2
 8004342:	e7bb      	b.n	80042bc <_printf_i+0x130>
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	6826      	ldr	r6, [r4, #0]
 8004348:	6961      	ldr	r1, [r4, #20]
 800434a:	1d18      	adds	r0, r3, #4
 800434c:	6028      	str	r0, [r5, #0]
 800434e:	0635      	lsls	r5, r6, #24
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	d501      	bpl.n	8004358 <_printf_i+0x1cc>
 8004354:	6019      	str	r1, [r3, #0]
 8004356:	e002      	b.n	800435e <_printf_i+0x1d2>
 8004358:	0670      	lsls	r0, r6, #25
 800435a:	d5fb      	bpl.n	8004354 <_printf_i+0x1c8>
 800435c:	8019      	strh	r1, [r3, #0]
 800435e:	2300      	movs	r3, #0
 8004360:	6123      	str	r3, [r4, #16]
 8004362:	4615      	mov	r5, r2
 8004364:	e7ba      	b.n	80042dc <_printf_i+0x150>
 8004366:	682b      	ldr	r3, [r5, #0]
 8004368:	1d1a      	adds	r2, r3, #4
 800436a:	602a      	str	r2, [r5, #0]
 800436c:	681d      	ldr	r5, [r3, #0]
 800436e:	6862      	ldr	r2, [r4, #4]
 8004370:	2100      	movs	r1, #0
 8004372:	4628      	mov	r0, r5
 8004374:	f7fb ff34 	bl	80001e0 <memchr>
 8004378:	b108      	cbz	r0, 800437e <_printf_i+0x1f2>
 800437a:	1b40      	subs	r0, r0, r5
 800437c:	6060      	str	r0, [r4, #4]
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	6123      	str	r3, [r4, #16]
 8004382:	2300      	movs	r3, #0
 8004384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004388:	e7a8      	b.n	80042dc <_printf_i+0x150>
 800438a:	6923      	ldr	r3, [r4, #16]
 800438c:	462a      	mov	r2, r5
 800438e:	4649      	mov	r1, r9
 8004390:	4640      	mov	r0, r8
 8004392:	47d0      	blx	sl
 8004394:	3001      	adds	r0, #1
 8004396:	d0ab      	beq.n	80042f0 <_printf_i+0x164>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	079b      	lsls	r3, r3, #30
 800439c:	d413      	bmi.n	80043c6 <_printf_i+0x23a>
 800439e:	68e0      	ldr	r0, [r4, #12]
 80043a0:	9b03      	ldr	r3, [sp, #12]
 80043a2:	4298      	cmp	r0, r3
 80043a4:	bfb8      	it	lt
 80043a6:	4618      	movlt	r0, r3
 80043a8:	e7a4      	b.n	80042f4 <_printf_i+0x168>
 80043aa:	2301      	movs	r3, #1
 80043ac:	4632      	mov	r2, r6
 80043ae:	4649      	mov	r1, r9
 80043b0:	4640      	mov	r0, r8
 80043b2:	47d0      	blx	sl
 80043b4:	3001      	adds	r0, #1
 80043b6:	d09b      	beq.n	80042f0 <_printf_i+0x164>
 80043b8:	3501      	adds	r5, #1
 80043ba:	68e3      	ldr	r3, [r4, #12]
 80043bc:	9903      	ldr	r1, [sp, #12]
 80043be:	1a5b      	subs	r3, r3, r1
 80043c0:	42ab      	cmp	r3, r5
 80043c2:	dcf2      	bgt.n	80043aa <_printf_i+0x21e>
 80043c4:	e7eb      	b.n	800439e <_printf_i+0x212>
 80043c6:	2500      	movs	r5, #0
 80043c8:	f104 0619 	add.w	r6, r4, #25
 80043cc:	e7f5      	b.n	80043ba <_printf_i+0x22e>
 80043ce:	bf00      	nop
 80043d0:	08004719 	.word	0x08004719
 80043d4:	0800472a 	.word	0x0800472a

080043d8 <memcpy>:
 80043d8:	440a      	add	r2, r1
 80043da:	4291      	cmp	r1, r2
 80043dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80043e0:	d100      	bne.n	80043e4 <memcpy+0xc>
 80043e2:	4770      	bx	lr
 80043e4:	b510      	push	{r4, lr}
 80043e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043ee:	4291      	cmp	r1, r2
 80043f0:	d1f9      	bne.n	80043e6 <memcpy+0xe>
 80043f2:	bd10      	pop	{r4, pc}

080043f4 <memmove>:
 80043f4:	4288      	cmp	r0, r1
 80043f6:	b510      	push	{r4, lr}
 80043f8:	eb01 0402 	add.w	r4, r1, r2
 80043fc:	d902      	bls.n	8004404 <memmove+0x10>
 80043fe:	4284      	cmp	r4, r0
 8004400:	4623      	mov	r3, r4
 8004402:	d807      	bhi.n	8004414 <memmove+0x20>
 8004404:	1e43      	subs	r3, r0, #1
 8004406:	42a1      	cmp	r1, r4
 8004408:	d008      	beq.n	800441c <memmove+0x28>
 800440a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800440e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004412:	e7f8      	b.n	8004406 <memmove+0x12>
 8004414:	4402      	add	r2, r0
 8004416:	4601      	mov	r1, r0
 8004418:	428a      	cmp	r2, r1
 800441a:	d100      	bne.n	800441e <memmove+0x2a>
 800441c:	bd10      	pop	{r4, pc}
 800441e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004426:	e7f7      	b.n	8004418 <memmove+0x24>

08004428 <_free_r>:
 8004428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800442a:	2900      	cmp	r1, #0
 800442c:	d044      	beq.n	80044b8 <_free_r+0x90>
 800442e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004432:	9001      	str	r0, [sp, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f1a1 0404 	sub.w	r4, r1, #4
 800443a:	bfb8      	it	lt
 800443c:	18e4      	addlt	r4, r4, r3
 800443e:	f000 f913 	bl	8004668 <__malloc_lock>
 8004442:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <_free_r+0x94>)
 8004444:	9801      	ldr	r0, [sp, #4]
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	b933      	cbnz	r3, 8004458 <_free_r+0x30>
 800444a:	6063      	str	r3, [r4, #4]
 800444c:	6014      	str	r4, [r2, #0]
 800444e:	b003      	add	sp, #12
 8004450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004454:	f000 b90e 	b.w	8004674 <__malloc_unlock>
 8004458:	42a3      	cmp	r3, r4
 800445a:	d908      	bls.n	800446e <_free_r+0x46>
 800445c:	6825      	ldr	r5, [r4, #0]
 800445e:	1961      	adds	r1, r4, r5
 8004460:	428b      	cmp	r3, r1
 8004462:	bf01      	itttt	eq
 8004464:	6819      	ldreq	r1, [r3, #0]
 8004466:	685b      	ldreq	r3, [r3, #4]
 8004468:	1949      	addeq	r1, r1, r5
 800446a:	6021      	streq	r1, [r4, #0]
 800446c:	e7ed      	b.n	800444a <_free_r+0x22>
 800446e:	461a      	mov	r2, r3
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	b10b      	cbz	r3, 8004478 <_free_r+0x50>
 8004474:	42a3      	cmp	r3, r4
 8004476:	d9fa      	bls.n	800446e <_free_r+0x46>
 8004478:	6811      	ldr	r1, [r2, #0]
 800447a:	1855      	adds	r5, r2, r1
 800447c:	42a5      	cmp	r5, r4
 800447e:	d10b      	bne.n	8004498 <_free_r+0x70>
 8004480:	6824      	ldr	r4, [r4, #0]
 8004482:	4421      	add	r1, r4
 8004484:	1854      	adds	r4, r2, r1
 8004486:	42a3      	cmp	r3, r4
 8004488:	6011      	str	r1, [r2, #0]
 800448a:	d1e0      	bne.n	800444e <_free_r+0x26>
 800448c:	681c      	ldr	r4, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	6053      	str	r3, [r2, #4]
 8004492:	4421      	add	r1, r4
 8004494:	6011      	str	r1, [r2, #0]
 8004496:	e7da      	b.n	800444e <_free_r+0x26>
 8004498:	d902      	bls.n	80044a0 <_free_r+0x78>
 800449a:	230c      	movs	r3, #12
 800449c:	6003      	str	r3, [r0, #0]
 800449e:	e7d6      	b.n	800444e <_free_r+0x26>
 80044a0:	6825      	ldr	r5, [r4, #0]
 80044a2:	1961      	adds	r1, r4, r5
 80044a4:	428b      	cmp	r3, r1
 80044a6:	bf04      	itt	eq
 80044a8:	6819      	ldreq	r1, [r3, #0]
 80044aa:	685b      	ldreq	r3, [r3, #4]
 80044ac:	6063      	str	r3, [r4, #4]
 80044ae:	bf04      	itt	eq
 80044b0:	1949      	addeq	r1, r1, r5
 80044b2:	6021      	streq	r1, [r4, #0]
 80044b4:	6054      	str	r4, [r2, #4]
 80044b6:	e7ca      	b.n	800444e <_free_r+0x26>
 80044b8:	b003      	add	sp, #12
 80044ba:	bd30      	pop	{r4, r5, pc}
 80044bc:	2000013c 	.word	0x2000013c

080044c0 <sbrk_aligned>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4e0e      	ldr	r6, [pc, #56]	; (80044fc <sbrk_aligned+0x3c>)
 80044c4:	460c      	mov	r4, r1
 80044c6:	6831      	ldr	r1, [r6, #0]
 80044c8:	4605      	mov	r5, r0
 80044ca:	b911      	cbnz	r1, 80044d2 <sbrk_aligned+0x12>
 80044cc:	f000 f8bc 	bl	8004648 <_sbrk_r>
 80044d0:	6030      	str	r0, [r6, #0]
 80044d2:	4621      	mov	r1, r4
 80044d4:	4628      	mov	r0, r5
 80044d6:	f000 f8b7 	bl	8004648 <_sbrk_r>
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	d00a      	beq.n	80044f4 <sbrk_aligned+0x34>
 80044de:	1cc4      	adds	r4, r0, #3
 80044e0:	f024 0403 	bic.w	r4, r4, #3
 80044e4:	42a0      	cmp	r0, r4
 80044e6:	d007      	beq.n	80044f8 <sbrk_aligned+0x38>
 80044e8:	1a21      	subs	r1, r4, r0
 80044ea:	4628      	mov	r0, r5
 80044ec:	f000 f8ac 	bl	8004648 <_sbrk_r>
 80044f0:	3001      	adds	r0, #1
 80044f2:	d101      	bne.n	80044f8 <sbrk_aligned+0x38>
 80044f4:	f04f 34ff 	mov.w	r4, #4294967295
 80044f8:	4620      	mov	r0, r4
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	20000140 	.word	0x20000140

08004500 <_malloc_r>:
 8004500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004504:	1ccd      	adds	r5, r1, #3
 8004506:	f025 0503 	bic.w	r5, r5, #3
 800450a:	3508      	adds	r5, #8
 800450c:	2d0c      	cmp	r5, #12
 800450e:	bf38      	it	cc
 8004510:	250c      	movcc	r5, #12
 8004512:	2d00      	cmp	r5, #0
 8004514:	4607      	mov	r7, r0
 8004516:	db01      	blt.n	800451c <_malloc_r+0x1c>
 8004518:	42a9      	cmp	r1, r5
 800451a:	d905      	bls.n	8004528 <_malloc_r+0x28>
 800451c:	230c      	movs	r3, #12
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	2600      	movs	r6, #0
 8004522:	4630      	mov	r0, r6
 8004524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004528:	4e2e      	ldr	r6, [pc, #184]	; (80045e4 <_malloc_r+0xe4>)
 800452a:	f000 f89d 	bl	8004668 <__malloc_lock>
 800452e:	6833      	ldr	r3, [r6, #0]
 8004530:	461c      	mov	r4, r3
 8004532:	bb34      	cbnz	r4, 8004582 <_malloc_r+0x82>
 8004534:	4629      	mov	r1, r5
 8004536:	4638      	mov	r0, r7
 8004538:	f7ff ffc2 	bl	80044c0 <sbrk_aligned>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	4604      	mov	r4, r0
 8004540:	d14d      	bne.n	80045de <_malloc_r+0xde>
 8004542:	6834      	ldr	r4, [r6, #0]
 8004544:	4626      	mov	r6, r4
 8004546:	2e00      	cmp	r6, #0
 8004548:	d140      	bne.n	80045cc <_malloc_r+0xcc>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	4631      	mov	r1, r6
 800454e:	4638      	mov	r0, r7
 8004550:	eb04 0803 	add.w	r8, r4, r3
 8004554:	f000 f878 	bl	8004648 <_sbrk_r>
 8004558:	4580      	cmp	r8, r0
 800455a:	d13a      	bne.n	80045d2 <_malloc_r+0xd2>
 800455c:	6821      	ldr	r1, [r4, #0]
 800455e:	3503      	adds	r5, #3
 8004560:	1a6d      	subs	r5, r5, r1
 8004562:	f025 0503 	bic.w	r5, r5, #3
 8004566:	3508      	adds	r5, #8
 8004568:	2d0c      	cmp	r5, #12
 800456a:	bf38      	it	cc
 800456c:	250c      	movcc	r5, #12
 800456e:	4629      	mov	r1, r5
 8004570:	4638      	mov	r0, r7
 8004572:	f7ff ffa5 	bl	80044c0 <sbrk_aligned>
 8004576:	3001      	adds	r0, #1
 8004578:	d02b      	beq.n	80045d2 <_malloc_r+0xd2>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	442b      	add	r3, r5
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	e00e      	b.n	80045a0 <_malloc_r+0xa0>
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	1b52      	subs	r2, r2, r5
 8004586:	d41e      	bmi.n	80045c6 <_malloc_r+0xc6>
 8004588:	2a0b      	cmp	r2, #11
 800458a:	d916      	bls.n	80045ba <_malloc_r+0xba>
 800458c:	1961      	adds	r1, r4, r5
 800458e:	42a3      	cmp	r3, r4
 8004590:	6025      	str	r5, [r4, #0]
 8004592:	bf18      	it	ne
 8004594:	6059      	strne	r1, [r3, #4]
 8004596:	6863      	ldr	r3, [r4, #4]
 8004598:	bf08      	it	eq
 800459a:	6031      	streq	r1, [r6, #0]
 800459c:	5162      	str	r2, [r4, r5]
 800459e:	604b      	str	r3, [r1, #4]
 80045a0:	4638      	mov	r0, r7
 80045a2:	f104 060b 	add.w	r6, r4, #11
 80045a6:	f000 f865 	bl	8004674 <__malloc_unlock>
 80045aa:	f026 0607 	bic.w	r6, r6, #7
 80045ae:	1d23      	adds	r3, r4, #4
 80045b0:	1af2      	subs	r2, r6, r3
 80045b2:	d0b6      	beq.n	8004522 <_malloc_r+0x22>
 80045b4:	1b9b      	subs	r3, r3, r6
 80045b6:	50a3      	str	r3, [r4, r2]
 80045b8:	e7b3      	b.n	8004522 <_malloc_r+0x22>
 80045ba:	6862      	ldr	r2, [r4, #4]
 80045bc:	42a3      	cmp	r3, r4
 80045be:	bf0c      	ite	eq
 80045c0:	6032      	streq	r2, [r6, #0]
 80045c2:	605a      	strne	r2, [r3, #4]
 80045c4:	e7ec      	b.n	80045a0 <_malloc_r+0xa0>
 80045c6:	4623      	mov	r3, r4
 80045c8:	6864      	ldr	r4, [r4, #4]
 80045ca:	e7b2      	b.n	8004532 <_malloc_r+0x32>
 80045cc:	4634      	mov	r4, r6
 80045ce:	6876      	ldr	r6, [r6, #4]
 80045d0:	e7b9      	b.n	8004546 <_malloc_r+0x46>
 80045d2:	230c      	movs	r3, #12
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	4638      	mov	r0, r7
 80045d8:	f000 f84c 	bl	8004674 <__malloc_unlock>
 80045dc:	e7a1      	b.n	8004522 <_malloc_r+0x22>
 80045de:	6025      	str	r5, [r4, #0]
 80045e0:	e7de      	b.n	80045a0 <_malloc_r+0xa0>
 80045e2:	bf00      	nop
 80045e4:	2000013c 	.word	0x2000013c

080045e8 <_realloc_r>:
 80045e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ec:	4680      	mov	r8, r0
 80045ee:	4614      	mov	r4, r2
 80045f0:	460e      	mov	r6, r1
 80045f2:	b921      	cbnz	r1, 80045fe <_realloc_r+0x16>
 80045f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045f8:	4611      	mov	r1, r2
 80045fa:	f7ff bf81 	b.w	8004500 <_malloc_r>
 80045fe:	b92a      	cbnz	r2, 800460c <_realloc_r+0x24>
 8004600:	f7ff ff12 	bl	8004428 <_free_r>
 8004604:	4625      	mov	r5, r4
 8004606:	4628      	mov	r0, r5
 8004608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800460c:	f000 f838 	bl	8004680 <_malloc_usable_size_r>
 8004610:	4284      	cmp	r4, r0
 8004612:	4607      	mov	r7, r0
 8004614:	d802      	bhi.n	800461c <_realloc_r+0x34>
 8004616:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800461a:	d812      	bhi.n	8004642 <_realloc_r+0x5a>
 800461c:	4621      	mov	r1, r4
 800461e:	4640      	mov	r0, r8
 8004620:	f7ff ff6e 	bl	8004500 <_malloc_r>
 8004624:	4605      	mov	r5, r0
 8004626:	2800      	cmp	r0, #0
 8004628:	d0ed      	beq.n	8004606 <_realloc_r+0x1e>
 800462a:	42bc      	cmp	r4, r7
 800462c:	4622      	mov	r2, r4
 800462e:	4631      	mov	r1, r6
 8004630:	bf28      	it	cs
 8004632:	463a      	movcs	r2, r7
 8004634:	f7ff fed0 	bl	80043d8 <memcpy>
 8004638:	4631      	mov	r1, r6
 800463a:	4640      	mov	r0, r8
 800463c:	f7ff fef4 	bl	8004428 <_free_r>
 8004640:	e7e1      	b.n	8004606 <_realloc_r+0x1e>
 8004642:	4635      	mov	r5, r6
 8004644:	e7df      	b.n	8004606 <_realloc_r+0x1e>
	...

08004648 <_sbrk_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4d06      	ldr	r5, [pc, #24]	; (8004664 <_sbrk_r+0x1c>)
 800464c:	2300      	movs	r3, #0
 800464e:	4604      	mov	r4, r0
 8004650:	4608      	mov	r0, r1
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	f7fc fa4e 	bl	8000af4 <_sbrk>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d102      	bne.n	8004662 <_sbrk_r+0x1a>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	b103      	cbz	r3, 8004662 <_sbrk_r+0x1a>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	20000144 	.word	0x20000144

08004668 <__malloc_lock>:
 8004668:	4801      	ldr	r0, [pc, #4]	; (8004670 <__malloc_lock+0x8>)
 800466a:	f000 b811 	b.w	8004690 <__retarget_lock_acquire_recursive>
 800466e:	bf00      	nop
 8004670:	20000148 	.word	0x20000148

08004674 <__malloc_unlock>:
 8004674:	4801      	ldr	r0, [pc, #4]	; (800467c <__malloc_unlock+0x8>)
 8004676:	f000 b80c 	b.w	8004692 <__retarget_lock_release_recursive>
 800467a:	bf00      	nop
 800467c:	20000148 	.word	0x20000148

08004680 <_malloc_usable_size_r>:
 8004680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004684:	1f18      	subs	r0, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	bfbc      	itt	lt
 800468a:	580b      	ldrlt	r3, [r1, r0]
 800468c:	18c0      	addlt	r0, r0, r3
 800468e:	4770      	bx	lr

08004690 <__retarget_lock_acquire_recursive>:
 8004690:	4770      	bx	lr

08004692 <__retarget_lock_release_recursive>:
 8004692:	4770      	bx	lr

08004694 <_init>:
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	bf00      	nop
 8004698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469a:	bc08      	pop	{r3}
 800469c:	469e      	mov	lr, r3
 800469e:	4770      	bx	lr

080046a0 <_fini>:
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	bf00      	nop
 80046a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a6:	bc08      	pop	{r3}
 80046a8:	469e      	mov	lr, r3
 80046aa:	4770      	bx	lr
