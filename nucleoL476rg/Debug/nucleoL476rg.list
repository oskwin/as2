
nucleoL476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004470  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046ac  080046ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080046ac  080046ac  000146ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046b4  080046b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  0800472c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  0800472c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ded7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d34  00000000  00000000  0002df77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  00030840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026319  00000000  00000000  00031318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d162  00000000  00000000  00057631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea7cf  00000000  00000000  00064793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ef62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000334c  00000000  00000000  0014efb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045e8 	.word	0x080045e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080045e8 	.word	0x080045e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fbb9 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f8ed 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f9ad 	bl	80008e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f97b 	bl	8000884 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800058e:	f000 f939 	bl	8000804 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	// Get the ICM-20948 that it is connected
	buf[0] = ICM20648_REG_WHO_AM_I;
 8000592:	2300      	movs	r3, #0
 8000594:	703b      	strb	r3, [r7, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8000596:	23d2      	movs	r3, #210	; 0xd2
 8000598:	b299      	uxth	r1, r3
 800059a:	463a      	mov	r2, r7
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2301      	movs	r3, #1
 80005a4:	4867      	ldr	r0, [pc, #412]	; (8000744 <main+0x1cc>)
 80005a6:	f000 ff7d 	bl	80014a4 <HAL_I2C_Master_Transmit>
 80005aa:	4603      	mov	r3, r0
 80005ac:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK) {
 80005ae:	7ffb      	ldrb	r3, [r7, #31]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d009      	beq.n	80005c8 <main+0x50>
		strcpy(msg, "Error Tx\r\n");
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	4a63      	ldr	r2, [pc, #396]	; (8000748 <main+0x1d0>)
 80005ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80005bc:	c303      	stmia	r3!, {r0, r1}
 80005be:	801a      	strh	r2, [r3, #0]
 80005c0:	3302      	adds	r3, #2
 80005c2:	0c12      	lsrs	r2, r2, #16
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	e020      	b.n	800060a <main+0x92>
	} else {
		// read Who am I register
		ret = HAL_I2C_Master_Receive(&hi2c1, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 80005c8:	23d2      	movs	r3, #210	; 0xd2
 80005ca:	b299      	uxth	r1, r3
 80005cc:	463a      	mov	r2, r7
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2301      	movs	r3, #1
 80005d6:	485b      	ldr	r0, [pc, #364]	; (8000744 <main+0x1cc>)
 80005d8:	f001 f858 	bl	800168c <HAL_I2C_Master_Receive>
 80005dc:	4603      	mov	r3, r0
 80005de:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK) {
 80005e0:	7ffb      	ldrb	r3, [r7, #31]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d009      	beq.n	80005fa <main+0x82>
			strcpy(msg, "Error Tx\r\n");
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	4a57      	ldr	r2, [pc, #348]	; (8000748 <main+0x1d0>)
 80005ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ee:	c303      	stmia	r3!, {r0, r1}
 80005f0:	801a      	strh	r2, [r3, #0]
 80005f2:	3302      	adds	r3, #2
 80005f4:	0c12      	lsrs	r2, r2, #16
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	e007      	b.n	800060a <main+0x92>
		} else {
			 // Convert to string and print
			    sprintf(msg, "%hu\r\n", buf[0]);
 80005fa:	783b      	ldrb	r3, [r7, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	4952      	ldr	r1, [pc, #328]	; (800074c <main+0x1d4>)
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fbc1 	bl	8003d8c <siprintf>
		}
	}
	// send out buffer (chid id or error message)
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY); // If all is OK, you should see 0xEA (234) in Putty
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fdde 	bl	80001d0 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	f107 0108 	add.w	r1, r7, #8
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	484b      	ldr	r0, [pc, #300]	; (8000750 <main+0x1d8>)
 8000622:	f002 fefb 	bl	800341c <HAL_UART_Transmit>

	// Power up the sensors
	buf[0] = ICM20648_REG_PWR_MGMT_1;
 8000626:	2306      	movs	r3, #6
 8000628:	703b      	strb	r3, [r7, #0]
	buf[1] = 0x01;
 800062a:	2301      	movs	r3, #1
 800062c:	707b      	strb	r3, [r7, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 800062e:	23d2      	movs	r3, #210	; 0xd2
 8000630:	b299      	uxth	r1, r3
 8000632:	463a      	mov	r2, r7
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2302      	movs	r3, #2
 800063c:	4841      	ldr	r0, [pc, #260]	; (8000744 <main+0x1cc>)
 800063e:	f000 ff31 	bl	80014a4 <HAL_I2C_Master_Transmit>
 8000642:	4603      	mov	r3, r0
 8000644:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK) {
 8000646:	7ffb      	ldrb	r3, [r7, #31]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d009      	beq.n	8000660 <main+0xe8>
		strcpy(msg, "Error Tx\r\n");
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	4a3d      	ldr	r2, [pc, #244]	; (8000748 <main+0x1d0>)
 8000652:	ca07      	ldmia	r2, {r0, r1, r2}
 8000654:	c303      	stmia	r3!, {r0, r1}
 8000656:	801a      	strh	r2, [r3, #0]
 8000658:	3302      	adds	r3, #2
 800065a:	0c12      	lsrs	r2, r2, #16
 800065c:	701a      	strb	r2, [r3, #0]
 800065e:	e008      	b.n	8000672 <main+0xfa>
	} else {
				strcpy(msg, "Sensors are on\r\n");
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	4a3b      	ldr	r2, [pc, #236]	; (8000754 <main+0x1dc>)
 8000666:	461c      	mov	r4, r3
 8000668:	4615      	mov	r5, r2
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	682b      	ldr	r3, [r5, #0]
 8000670:	7023      	strb	r3, [r4, #0]
	}
	// send out buffer (power status or error message)
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fdaa 	bl	80001d0 <strlen>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	f107 0108 	add.w	r1, r7, #8
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	4831      	ldr	r0, [pc, #196]	; (8000750 <main+0x1d8>)
 800068a:	f002 fec7 	bl	800341c <HAL_UART_Transmit>
  while (1)
  {
		buf[0] = ICM20648_REG_ACCEL_XOUT_H_SH;
 800068e:	232d      	movs	r3, #45	; 0x2d
 8000690:	703b      	strb	r3, [r7, #0]
		ret = HAL_I2C_Master_Transmit(&hi2c1, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8000692:	23d2      	movs	r3, #210	; 0xd2
 8000694:	b299      	uxth	r1, r3
 8000696:	463a      	mov	r2, r7
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2301      	movs	r3, #1
 80006a0:	4828      	ldr	r0, [pc, #160]	; (8000744 <main+0x1cc>)
 80006a2:	f000 feff 	bl	80014a4 <HAL_I2C_Master_Transmit>
 80006a6:	4603      	mov	r3, r0
 80006a8:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK) {
 80006aa:	7ffb      	ldrb	r3, [r7, #31]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d009      	beq.n	80006c4 <main+0x14c>
			strcpy(msg, "Error Tx\r\n");
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	4a24      	ldr	r2, [pc, #144]	; (8000748 <main+0x1d0>)
 80006b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80006b8:	c303      	stmia	r3!, {r0, r1}
 80006ba:	801a      	strh	r2, [r3, #0]
 80006bc:	3302      	adds	r3, #2
 80006be:	0c12      	lsrs	r2, r2, #16
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	e02b      	b.n	800071c <main+0x1a4>
		} else {
			// read Who am I register
			ret = HAL_I2C_Master_Receive(&hi2c1, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 80006c4:	23d2      	movs	r3, #210	; 0xd2
 80006c6:	b299      	uxth	r1, r3
 80006c8:	463a      	mov	r2, r7
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2302      	movs	r3, #2
 80006d2:	481c      	ldr	r0, [pc, #112]	; (8000744 <main+0x1cc>)
 80006d4:	f000 ffda 	bl	800168c <HAL_I2C_Master_Receive>
 80006d8:	4603      	mov	r3, r0
 80006da:	77fb      	strb	r3, [r7, #31]
			if (ret != HAL_OK) {
 80006dc:	7ffb      	ldrb	r3, [r7, #31]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d009      	beq.n	80006f6 <main+0x17e>
				strcpy(msg, "Error Tx\r\n");
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	4a18      	ldr	r2, [pc, #96]	; (8000748 <main+0x1d0>)
 80006e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ea:	c303      	stmia	r3!, {r0, r1}
 80006ec:	801a      	strh	r2, [r3, #0]
 80006ee:	3302      	adds	r3, #2
 80006f0:	0c12      	lsrs	r2, r2, #16
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e012      	b.n	800071c <main+0x1a4>
			} else {
				 // Convert to string and print
				probeX = (buf[0] << 8 | buf[1]) - 2147483648;
 80006f6:	783b      	ldrb	r3, [r7, #0]
 80006f8:	021b      	lsls	r3, r3, #8
 80006fa:	b21a      	sxth	r2, r3
 80006fc:	787b      	ldrb	r3, [r7, #1]
 80006fe:	b21b      	sxth	r3, r3
 8000700:	4313      	orrs	r3, r2
 8000702:	b21a      	sxth	r2, r3
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <main+0x1e0>)
 8000706:	801a      	strh	r2, [r3, #0]
				sprintf(msg, "%hd\r\n", probeX);
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <main+0x1e0>)
 800070a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800070e:	461a      	mov	r2, r3
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	4911      	ldr	r1, [pc, #68]	; (800075c <main+0x1e4>)
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fb38 	bl	8003d8c <siprintf>
			}
		}
		// send out buffer (chid id or error message)
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY); // If all is OK, you should see accelX
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd55 	bl	80001d0 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f107 0108 	add.w	r1, r7, #8
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	4807      	ldr	r0, [pc, #28]	; (8000750 <main+0x1d8>)
 8000734:	f002 fe72 	bl	800341c <HAL_UART_Transmit>
		HAL_Delay(500);
 8000738:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800073c:	f000 fb56 	bl	8000dec <HAL_Delay>
		buf[0] = ICM20648_REG_ACCEL_XOUT_H_SH;
 8000740:	e7a5      	b.n	800068e <main+0x116>
 8000742:	bf00      	nop
 8000744:	2000009c 	.word	0x2000009c
 8000748:	08004600 	.word	0x08004600
 800074c:	0800460c 	.word	0x0800460c
 8000750:	200000e8 	.word	0x200000e8
 8000754:	08004614 	.word	0x08004614
 8000758:	20000098 	.word	0x20000098
 800075c:	08004628 	.word	0x08004628

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b096      	sub	sp, #88	; 0x58
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2244      	movs	r2, #68	; 0x44
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fb04 	bl	8003d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000782:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000786:	f001 fafd 	bl	8001d84 <HAL_PWREx_ControlVoltageScaling>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000790:	f000 f910 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	2302      	movs	r3, #2
 8000796:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800079c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079e:	2310      	movs	r3, #16
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a6:	2302      	movs	r3, #2
 80007a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007ae:	230a      	movs	r3, #10
 80007b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007b2:	2307      	movs	r3, #7
 80007b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fb34 	bl	8001e30 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007ce:	f000 f8f1 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d6:	2303      	movs	r3, #3
 80007d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	2104      	movs	r1, #4
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 ff06 	bl	80025fc <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007f6:	f000 f8dd 	bl	80009b4 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3758      	adds	r7, #88	; 0x58
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_I2C1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_I2C1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_I2C1_Init+0x74>)
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <MX_I2C1_Init+0x7c>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_I2C1_Init+0x74>)
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083e:	480e      	ldr	r0, [pc, #56]	; (8000878 <MX_I2C1_Init+0x74>)
 8000840:	f000 fda0 	bl	8001384 <HAL_I2C_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800084a:	f000 f8b3 	bl	80009b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4809      	ldr	r0, [pc, #36]	; (8000878 <MX_I2C1_Init+0x74>)
 8000852:	f001 f9f1 	bl	8001c38 <HAL_I2CEx_ConfigAnalogFilter>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800085c:	f000 f8aa 	bl	80009b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_I2C1_Init+0x74>)
 8000864:	f001 fa33 	bl	8001cce <HAL_I2CEx_ConfigDigitalFilter>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800086e:	f000 f8a1 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000009c 	.word	0x2000009c
 800087c:	40005400 	.word	0x40005400
 8000880:	10909cec 	.word	0x10909cec

08000884 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART2_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_USART2_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_USART2_UART_Init+0x58>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART2_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USART2_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008c8:	f002 fd5a 	bl	8003380 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f86f 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000e8 	.word	0x200000e8
 80008e0:	40004400 	.word	0x40004400

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <MX_GPIO_Init+0xc4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a2a      	ldr	r2, [pc, #168]	; (80009a8 <MX_GPIO_Init+0xc4>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <MX_GPIO_Init+0xc4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <MX_GPIO_Init+0xc4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <MX_GPIO_Init+0xc4>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <MX_GPIO_Init+0xc4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <MX_GPIO_Init+0xc4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a1e      	ldr	r2, [pc, #120]	; (80009a8 <MX_GPIO_Init+0xc4>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_GPIO_Init+0xc4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_GPIO_Init+0xc4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a18      	ldr	r2, [pc, #96]	; (80009a8 <MX_GPIO_Init+0xc4>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_GPIO_Init+0xc4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2120      	movs	r1, #32
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f000 fcf7 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_GPIO_Init+0xc8>)
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_GPIO_Init+0xcc>)
 800097c:	f000 fb40 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000980:	2320      	movs	r3, #32
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f000 fb31 	bl	8001000 <HAL_GPIO_Init>

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000
 80009ac:	10210000 	.word	0x10210000
 80009b0:	48000800 	.word	0x48000800

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x44>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <HAL_MspInit+0x44>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6613      	str	r3, [r2, #96]	; 0x60
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_MspInit+0x44>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x44>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x44>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x44>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0ac      	sub	sp, #176	; 0xb0
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2288      	movs	r2, #136	; 0x88
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 f9a7 	bl	8003d7c <memset>
  if(hi2c->Instance==I2C1)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a21      	ldr	r2, [pc, #132]	; (8000ab8 <HAL_I2C_MspInit+0xb0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d13b      	bne.n	8000ab0 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a38:	2340      	movs	r3, #64	; 0x40
 8000a3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 ffdf 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a50:	f7ff ffb0 	bl	80009b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_I2C_MspInit+0xb4>)
 8000a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a58:	4a18      	ldr	r2, [pc, #96]	; (8000abc <HAL_I2C_MspInit+0xb4>)
 8000a5a:	f043 0302 	orr.w	r3, r3, #2
 8000a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_I2C_MspInit+0xb4>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a74:	2312      	movs	r3, #18
 8000a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a86:	2304      	movs	r3, #4
 8000a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a90:	4619      	mov	r1, r3
 8000a92:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <HAL_I2C_MspInit+0xb8>)
 8000a94:	f000 fab4 	bl	8001000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_I2C_MspInit+0xb4>)
 8000a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_I2C_MspInit+0xb4>)
 8000a9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_I2C_MspInit+0xb4>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	37b0      	adds	r7, #176	; 0xb0
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40005400 	.word	0x40005400
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000400 	.word	0x48000400

08000ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0ac      	sub	sp, #176	; 0xb0
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2288      	movs	r2, #136	; 0x88
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 f949 	bl	8003d7c <memset>
  if(huart->Instance==USART2)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <HAL_UART_MspInit+0xb0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d13b      	bne.n	8000b6c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 ff81 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b0c:	f7ff ff52 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_UART_MspInit+0xb4>)
 8000b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b14:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <HAL_UART_MspInit+0xb4>)
 8000b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_UART_MspInit+0xb4>)
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_UART_MspInit+0xb4>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <HAL_UART_MspInit+0xb4>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_UART_MspInit+0xb4>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b40:	230c      	movs	r3, #12
 8000b42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b58:	2307      	movs	r3, #7
 8000b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f000 fa4a 	bl	8001000 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	37b0      	adds	r7, #176	; 0xb0
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40004400 	.word	0x40004400
 8000b78:	40021000 	.word	0x40021000

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 f8f0 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f003 f892 	bl	8003d28 <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20018000 	.word	0x20018000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	2000008c 	.word	0x2000008c
 8000c38:	20000180 	.word	0x20000180

08000c3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <SystemInit+0x5c>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <SystemInit+0x5c>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <SystemInit+0x60>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a11      	ldr	r2, [pc, #68]	; (8000c9c <SystemInit+0x60>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <SystemInit+0x60>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <SystemInit+0x60>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <SystemInit+0x60>)
 8000c68:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c6c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <SystemInit+0x60>)
 8000c74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c78:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <SystemInit+0x60>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <SystemInit+0x60>)
 8000c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <SystemInit+0x60>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca4:	f7ff ffca 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ca8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000caa:	e003      	b.n	8000cb4 <LoopCopyDataInit>

08000cac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cb0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cb2:	3104      	adds	r1, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cb4:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cb8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cbc:	d3f6      	bcc.n	8000cac <CopyDataInit>
	ldr	r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cc0:	e002      	b.n	8000cc8 <LoopFillZerobss>

08000cc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cc2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cc4:	f842 3b04 	str.w	r3, [r2], #4

08000cc8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <LoopForever+0x16>)
	cmp	r2, r3
 8000cca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ccc:	d3f9      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cce:	f003 f831 	bl	8003d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd2:	f7ff fc51 	bl	8000578 <main>

08000cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cd6:	e7fe      	b.n	8000cd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000cdc:	080046bc 	.word	0x080046bc
	ldr	r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ce4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000ce8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000cec:	20000180 	.word	0x20000180

08000cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC1_2_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_Init+0x3c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <HAL_Init+0x3c>)
 8000d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f000 f944 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d10:	2000      	movs	r0, #0
 8000d12:	f000 f80f 	bl	8000d34 <HAL_InitTick>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	e001      	b.n	8000d26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d22:	f7ff fe4d 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40022000 	.word	0x40022000

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_InitTick+0x6c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d023      	beq.n	8000d90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_InitTick+0x70>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_InitTick+0x6c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f941 	bl	8000fe6 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10f      	bne.n	8000d8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d809      	bhi.n	8000d84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f919 	bl	8000fae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_InitTick+0x74>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e007      	b.n	8000d94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	73fb      	strb	r3, [r7, #15]
 8000d88:	e004      	b.n	8000d94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	73fb      	strb	r3, [r7, #15]
 8000d8e:	e001      	b.n	8000d94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	2000016c 	.word	0x2000016c

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	2000016c 	.word	0x2000016c

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff ffee 	bl	8000dd4 <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e12:	bf00      	nop
 8000e14:	f7ff ffde 	bl	8000dd4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff47 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff5c 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff8e 	bl	8000eec <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5d 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffb0 	bl	8000f54 <SysTick_Config>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100e:	e17f      	b.n	8001310 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	2101      	movs	r1, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa01 f303 	lsl.w	r3, r1, r3
 800101c:	4013      	ands	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 8171 	beq.w	800130a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d00b      	beq.n	8001048 <HAL_GPIO_Init+0x48>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d007      	beq.n	8001048 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800103c:	2b11      	cmp	r3, #17
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b12      	cmp	r3, #18
 8001046:	d130      	bne.n	80010aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800107e:	2201      	movs	r2, #1
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	091b      	lsrs	r3, r3, #4
 8001094:	f003 0201 	and.w	r2, r3, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d118      	bne.n	80010e8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010bc:	2201      	movs	r2, #1
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	08db      	lsrs	r3, r3, #3
 80010d2:	f003 0201 	and.w	r2, r3, #1
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x128>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b12      	cmp	r3, #18
 8001126:	d123      	bne.n	8001170 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	220f      	movs	r2, #15
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	691a      	ldr	r2, [r3, #16]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	08da      	lsrs	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3208      	adds	r2, #8
 800116a:	6939      	ldr	r1, [r7, #16]
 800116c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0203 	and.w	r2, r3, #3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 80ac 	beq.w	800130a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	4b5f      	ldr	r3, [pc, #380]	; (8001330 <HAL_GPIO_Init+0x330>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b6:	4a5e      	ldr	r2, [pc, #376]	; (8001330 <HAL_GPIO_Init+0x330>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6613      	str	r3, [r2, #96]	; 0x60
 80011be:	4b5c      	ldr	r3, [pc, #368]	; (8001330 <HAL_GPIO_Init+0x330>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011ca:	4a5a      	ldr	r2, [pc, #360]	; (8001334 <HAL_GPIO_Init+0x334>)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f4:	d025      	beq.n	8001242 <HAL_GPIO_Init+0x242>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <HAL_GPIO_Init+0x338>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d01f      	beq.n	800123e <HAL_GPIO_Init+0x23e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4e      	ldr	r2, [pc, #312]	; (800133c <HAL_GPIO_Init+0x33c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d019      	beq.n	800123a <HAL_GPIO_Init+0x23a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4d      	ldr	r2, [pc, #308]	; (8001340 <HAL_GPIO_Init+0x340>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d013      	beq.n	8001236 <HAL_GPIO_Init+0x236>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <HAL_GPIO_Init+0x344>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00d      	beq.n	8001232 <HAL_GPIO_Init+0x232>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4b      	ldr	r2, [pc, #300]	; (8001348 <HAL_GPIO_Init+0x348>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d007      	beq.n	800122e <HAL_GPIO_Init+0x22e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4a      	ldr	r2, [pc, #296]	; (800134c <HAL_GPIO_Init+0x34c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d101      	bne.n	800122a <HAL_GPIO_Init+0x22a>
 8001226:	2306      	movs	r3, #6
 8001228:	e00c      	b.n	8001244 <HAL_GPIO_Init+0x244>
 800122a:	2307      	movs	r3, #7
 800122c:	e00a      	b.n	8001244 <HAL_GPIO_Init+0x244>
 800122e:	2305      	movs	r3, #5
 8001230:	e008      	b.n	8001244 <HAL_GPIO_Init+0x244>
 8001232:	2304      	movs	r3, #4
 8001234:	e006      	b.n	8001244 <HAL_GPIO_Init+0x244>
 8001236:	2303      	movs	r3, #3
 8001238:	e004      	b.n	8001244 <HAL_GPIO_Init+0x244>
 800123a:	2302      	movs	r3, #2
 800123c:	e002      	b.n	8001244 <HAL_GPIO_Init+0x244>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <HAL_GPIO_Init+0x244>
 8001242:	2300      	movs	r3, #0
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	f002 0203 	and.w	r2, r2, #3
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	4093      	lsls	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001254:	4937      	ldr	r1, [pc, #220]	; (8001334 <HAL_GPIO_Init+0x334>)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3302      	adds	r3, #2
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <HAL_GPIO_Init+0x350>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001286:	4a32      	ldr	r2, [pc, #200]	; (8001350 <HAL_GPIO_Init+0x350>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800128c:	4b30      	ldr	r3, [pc, #192]	; (8001350 <HAL_GPIO_Init+0x350>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012b0:	4a27      	ldr	r2, [pc, #156]	; (8001350 <HAL_GPIO_Init+0x350>)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <HAL_GPIO_Init+0x350>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012da:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <HAL_GPIO_Init+0x350>)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_GPIO_Init+0x350>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001304:	4a12      	ldr	r2, [pc, #72]	; (8001350 <HAL_GPIO_Init+0x350>)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa22 f303 	lsr.w	r3, r2, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	f47f ae78 	bne.w	8001010 <HAL_GPIO_Init+0x10>
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	371c      	adds	r7, #28
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
 8001334:	40010000 	.word	0x40010000
 8001338:	48000400 	.word	0x48000400
 800133c:	48000800 	.word	0x48000800
 8001340:	48000c00 	.word	0x48000c00
 8001344:	48001000 	.word	0x48001000
 8001348:	48001400 	.word	0x48001400
 800134c:	48001800 	.word	0x48001800
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
 8001360:	4613      	mov	r3, r2
 8001362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001364:	787b      	ldrb	r3, [r7, #1]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001370:	e002      	b.n	8001378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e081      	b.n	800149a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d106      	bne.n	80013b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fb2c 	bl	8000a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2224      	movs	r2, #36	; 0x24
 80013b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0201 	bic.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d107      	bne.n	80013fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	e006      	b.n	800140c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800140a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d104      	bne.n	800141e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800141c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800142c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001430:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001440:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691a      	ldr	r2, [r3, #16]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	ea42 0103 	orr.w	r1, r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	021a      	lsls	r2, r3, #8
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69d9      	ldr	r1, [r3, #28]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1a      	ldr	r2, [r3, #32]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 0201 	orr.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2220      	movs	r2, #32
 8001486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	461a      	mov	r2, r3
 80014b0:	460b      	mov	r3, r1
 80014b2:	817b      	strh	r3, [r7, #10]
 80014b4:	4613      	mov	r3, r2
 80014b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	f040 80da 	bne.w	800167a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_I2C_Master_Transmit+0x30>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e0d3      	b.n	800167c <HAL_I2C_Master_Transmit+0x1d8>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014dc:	f7ff fc7a 	bl	8000dd4 <HAL_GetTick>
 80014e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2319      	movs	r3, #25
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f9e6 	bl	80018c0 <I2C_WaitOnFlagUntilTimeout>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0be      	b.n	800167c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2221      	movs	r2, #33	; 0x21
 8001502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2210      	movs	r2, #16
 800150a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	893a      	ldrh	r2, [r7, #8]
 800151e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152a:	b29b      	uxth	r3, r3
 800152c:	2bff      	cmp	r3, #255	; 0xff
 800152e:	d90e      	bls.n	800154e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	22ff      	movs	r2, #255	; 0xff
 8001534:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153a:	b2da      	uxtb	r2, r3
 800153c:	8979      	ldrh	r1, [r7, #10]
 800153e:	4b51      	ldr	r3, [pc, #324]	; (8001684 <HAL_I2C_Master_Transmit+0x1e0>)
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 fb48 	bl	8001bdc <I2C_TransferConfig>
 800154c:	e06c      	b.n	8001628 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155c:	b2da      	uxtb	r2, r3
 800155e:	8979      	ldrh	r1, [r7, #10]
 8001560:	4b48      	ldr	r3, [pc, #288]	; (8001684 <HAL_I2C_Master_Transmit+0x1e0>)
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 fb37 	bl	8001bdc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800156e:	e05b      	b.n	8001628 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	6a39      	ldr	r1, [r7, #32]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f9e3 	bl	8001940 <I2C_WaitOnTXISFlagUntilTimeout>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e07b      	b.n	800167c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159e:	b29b      	uxth	r3, r3
 80015a0:	3b01      	subs	r3, #1
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ac:	3b01      	subs	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d034      	beq.n	8001628 <HAL_I2C_Master_Transmit+0x184>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d130      	bne.n	8001628 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	2200      	movs	r2, #0
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 f975 	bl	80018c0 <I2C_WaitOnFlagUntilTimeout>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e04d      	b.n	800167c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2bff      	cmp	r3, #255	; 0xff
 80015e8:	d90e      	bls.n	8001608 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	22ff      	movs	r2, #255	; 0xff
 80015ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	8979      	ldrh	r1, [r7, #10]
 80015f8:	2300      	movs	r3, #0
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 faeb 	bl	8001bdc <I2C_TransferConfig>
 8001606:	e00f      	b.n	8001628 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160c:	b29a      	uxth	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001616:	b2da      	uxtb	r2, r3
 8001618:	8979      	ldrh	r1, [r7, #10]
 800161a:	2300      	movs	r3, #0
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 fada 	bl	8001bdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162c:	b29b      	uxth	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d19e      	bne.n	8001570 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	6a39      	ldr	r1, [r7, #32]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 f9c2 	bl	80019c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e01a      	b.n	800167c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2220      	movs	r2, #32
 800164c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_I2C_Master_Transmit+0x1e4>)
 800165a:	400b      	ands	r3, r1
 800165c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2220      	movs	r2, #32
 8001662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800167a:	2302      	movs	r3, #2
  }
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	80002000 	.word	0x80002000
 8001688:	fe00e800 	.word	0xfe00e800

0800168c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af02      	add	r7, sp, #8
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	461a      	mov	r2, r3
 8001698:	460b      	mov	r3, r1
 800169a:	817b      	strh	r3, [r7, #10]
 800169c:	4613      	mov	r3, r2
 800169e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	f040 80db 	bne.w	8001864 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <HAL_I2C_Master_Receive+0x30>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e0d4      	b.n	8001866 <HAL_I2C_Master_Receive+0x1da>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016c4:	f7ff fb86 	bl	8000dd4 <HAL_GetTick>
 80016c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2319      	movs	r3, #25
 80016d0:	2201      	movs	r2, #1
 80016d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 f8f2 	bl	80018c0 <I2C_WaitOnFlagUntilTimeout>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0bf      	b.n	8001866 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2222      	movs	r2, #34	; 0x22
 80016ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2210      	movs	r2, #16
 80016f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	893a      	ldrh	r2, [r7, #8]
 8001706:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001712:	b29b      	uxth	r3, r3
 8001714:	2bff      	cmp	r3, #255	; 0xff
 8001716:	d90e      	bls.n	8001736 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	22ff      	movs	r2, #255	; 0xff
 800171c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001722:	b2da      	uxtb	r2, r3
 8001724:	8979      	ldrh	r1, [r7, #10]
 8001726:	4b52      	ldr	r3, [pc, #328]	; (8001870 <HAL_I2C_Master_Receive+0x1e4>)
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 fa54 	bl	8001bdc <I2C_TransferConfig>
 8001734:	e06d      	b.n	8001812 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173a:	b29a      	uxth	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001744:	b2da      	uxtb	r2, r3
 8001746:	8979      	ldrh	r1, [r7, #10]
 8001748:	4b49      	ldr	r3, [pc, #292]	; (8001870 <HAL_I2C_Master_Receive+0x1e4>)
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 fa43 	bl	8001bdc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001756:	e05c      	b.n	8001812 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	6a39      	ldr	r1, [r7, #32]
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 f96b 	bl	8001a38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e07c      	b.n	8001866 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001788:	3b01      	subs	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001794:	b29b      	uxth	r3, r3
 8001796:	3b01      	subs	r3, #1
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d034      	beq.n	8001812 <HAL_I2C_Master_Receive+0x186>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d130      	bne.n	8001812 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	2200      	movs	r2, #0
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f880 	bl	80018c0 <I2C_WaitOnFlagUntilTimeout>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e04d      	b.n	8001866 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	2bff      	cmp	r3, #255	; 0xff
 80017d2:	d90e      	bls.n	80017f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	22ff      	movs	r2, #255	; 0xff
 80017d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	8979      	ldrh	r1, [r7, #10]
 80017e2:	2300      	movs	r3, #0
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f9f6 	bl	8001bdc <I2C_TransferConfig>
 80017f0:	e00f      	b.n	8001812 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001800:	b2da      	uxtb	r2, r3
 8001802:	8979      	ldrh	r1, [r7, #10]
 8001804:	2300      	movs	r3, #0
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 f9e5 	bl	8001bdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001816:	b29b      	uxth	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d19d      	bne.n	8001758 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	6a39      	ldr	r1, [r7, #32]
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 f8cd 	bl	80019c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e01a      	b.n	8001866 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2220      	movs	r2, #32
 8001836:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6859      	ldr	r1, [r3, #4]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_I2C_Master_Receive+0x1e8>)
 8001844:	400b      	ands	r3, r1
 8001846:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2220      	movs	r2, #32
 800184c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	e000      	b.n	8001866 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001864:	2302      	movs	r3, #2
  }
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	80002400 	.word	0x80002400
 8001874:	fe00e800 	.word	0xfe00e800

08001878 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b02      	cmp	r3, #2
 800188c:	d103      	bne.n	8001896 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d007      	beq.n	80018b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699a      	ldr	r2, [r3, #24]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	619a      	str	r2, [r3, #24]
  }
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018d0:	e022      	b.n	8001918 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d8:	d01e      	beq.n	8001918 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018da:	f7ff fa7b 	bl	8000dd4 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d302      	bcc.n	80018f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d113      	bne.n	8001918 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	f043 0220 	orr.w	r2, r3, #32
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2220      	movs	r2, #32
 8001900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e00f      	b.n	8001938 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	4013      	ands	r3, r2
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	429a      	cmp	r2, r3
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	429a      	cmp	r2, r3
 8001934:	d0cd      	beq.n	80018d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800194c:	e02c      	b.n	80019a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 f8dc 	bl	8001b10 <I2C_IsAcknowledgeFailed>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e02a      	b.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d01e      	beq.n	80019a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800196a:	f7ff fa33 	bl	8000dd4 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	429a      	cmp	r2, r3
 8001978:	d302      	bcc.n	8001980 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d113      	bne.n	80019a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	f043 0220 	orr.w	r2, r3, #32
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e007      	b.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d1cb      	bne.n	800194e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019cc:	e028      	b.n	8001a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f89c 	bl	8001b10 <I2C_IsAcknowledgeFailed>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e026      	b.n	8001a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e2:	f7ff f9f7 	bl	8000dd4 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d302      	bcc.n	80019f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d113      	bne.n	8001a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	f043 0220 	orr.w	r2, r3, #32
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e007      	b.n	8001a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 0320 	and.w	r3, r3, #32
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	d1cf      	bne.n	80019ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a44:	e055      	b.n	8001af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f860 	bl	8001b10 <I2C_IsAcknowledgeFailed>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e053      	b.n	8001b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d129      	bne.n	8001abc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d105      	bne.n	8001a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e03f      	b.n	8001b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2220      	movs	r2, #32
 8001a88:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001a96:	400b      	ands	r3, r1
 8001a98:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e022      	b.n	8001b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001abc:	f7ff f98a 	bl	8000dd4 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d302      	bcc.n	8001ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10f      	bne.n	8001af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f043 0220 	orr.w	r2, r3, #32
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e007      	b.n	8001b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d1a2      	bne.n	8001a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	fe00e800 	.word	0xfe00e800

08001b10 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	d151      	bne.n	8001bce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b2a:	e022      	b.n	8001b72 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b32:	d01e      	beq.n	8001b72 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b34:	f7ff f94e 	bl	8000dd4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d302      	bcc.n	8001b4a <I2C_IsAcknowledgeFailed+0x3a>
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d113      	bne.n	8001b72 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f043 0220 	orr.w	r2, r3, #32
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e02e      	b.n	8001bd0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b20      	cmp	r3, #32
 8001b7e:	d1d5      	bne.n	8001b2c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2210      	movs	r2, #16
 8001b86:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7ff fe71 	bl	8001878 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f043 0204 	orr.w	r2, r3, #4
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	fe00e800 	.word	0xfe00e800

08001bdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	817b      	strh	r3, [r7, #10]
 8001bea:	4613      	mov	r3, r2
 8001bec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	0d5b      	lsrs	r3, r3, #21
 8001bf8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <I2C_TransferConfig+0x58>)
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	43db      	mvns	r3, r3
 8001c02:	ea02 0103 	and.w	r1, r2, r3
 8001c06:	897b      	ldrh	r3, [r7, #10]
 8001c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c0c:	7a7b      	ldrb	r3, [r7, #9]
 8001c0e:	041b      	lsls	r3, r3, #16
 8001c10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	03ff63ff 	.word	0x03ff63ff

08001c38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d138      	bne.n	8001cc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e032      	b.n	8001cc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2224      	movs	r2, #36	; 0x24
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6819      	ldr	r1, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e000      	b.n	8001cc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cc0:	2302      	movs	r3, #2
  }
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b20      	cmp	r3, #32
 8001ce2:	d139      	bne.n	8001d58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e033      	b.n	8001d5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2224      	movs	r2, #36	; 0x24
 8001cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0201 	bic.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e000      	b.n	8001d5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d58:	2302      	movs	r3, #2
  }
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40007000 	.word	0x40007000

08001d84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d92:	d130      	bne.n	8001df6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da0:	d038      	beq.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001daa:	4a1e      	ldr	r2, [pc, #120]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2232      	movs	r2, #50	; 0x32
 8001db8:	fb02 f303 	mul.w	r3, r2, r3
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0c9b      	lsrs	r3, r3, #18
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dc8:	e002      	b.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ddc:	d102      	bne.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f2      	bne.n	8001dca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df0:	d110      	bne.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e00f      	b.n	8001e16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e02:	d007      	beq.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e0c:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40007000 	.word	0x40007000
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	431bde83 	.word	0x431bde83

08001e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e3d4      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e42:	4ba1      	ldr	r3, [pc, #644]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e4c:	4b9e      	ldr	r3, [pc, #632]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80e4 	beq.w	800202c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <HAL_RCC_OscConfig+0x4a>
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	f040 808b 	bne.w	8001f88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	f040 8087 	bne.w	8001f88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e7a:	4b93      	ldr	r3, [pc, #588]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_RCC_OscConfig+0x62>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e3ac      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1a      	ldr	r2, [r3, #32]
 8001e96:	4b8c      	ldr	r3, [pc, #560]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d004      	beq.n	8001eac <HAL_RCC_OscConfig+0x7c>
 8001ea2:	4b89      	ldr	r3, [pc, #548]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eaa:	e005      	b.n	8001eb8 <HAL_RCC_OscConfig+0x88>
 8001eac:	4b86      	ldr	r3, [pc, #536]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d223      	bcs.n	8001f04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fd41 	bl	8002948 <RCC_SetFlashLatencyFromMSIRange>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e38d      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed0:	4b7d      	ldr	r3, [pc, #500]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a7c      	ldr	r2, [pc, #496]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ed6:	f043 0308 	orr.w	r3, r3, #8
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b7a      	ldr	r3, [pc, #488]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4977      	ldr	r1, [pc, #476]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eee:	4b76      	ldr	r3, [pc, #472]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	4972      	ldr	r1, [pc, #456]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
 8001f02:	e025      	b.n	8001f50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f04:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a6f      	ldr	r2, [pc, #444]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f0a:	f043 0308 	orr.w	r3, r3, #8
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	4b6d      	ldr	r3, [pc, #436]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	496a      	ldr	r1, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f22:	4b69      	ldr	r3, [pc, #420]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	4965      	ldr	r1, [pc, #404]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fd01 	bl	8002948 <RCC_SetFlashLatencyFromMSIRange>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e34d      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f50:	f000 fc36 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b5c      	ldr	r3, [pc, #368]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	495a      	ldr	r1, [pc, #360]	; (80020cc <HAL_RCC_OscConfig+0x29c>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6c:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <HAL_RCC_OscConfig+0x2a0>)
 8001f6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f70:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <HAL_RCC_OscConfig+0x2a4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fedd 	bl	8000d34 <HAL_InitTick>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d052      	beq.n	800202a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	e331      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d032      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f90:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a4c      	ldr	r2, [pc, #304]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f9c:	f7fe ff1a 	bl	8000dd4 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa4:	f7fe ff16 	bl	8000dd4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e31a      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb6:	4b44      	ldr	r3, [pc, #272]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc2:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a40      	ldr	r2, [pc, #256]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	493b      	ldr	r1, [pc, #236]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	4936      	ldr	r1, [pc, #216]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
 8001ff4:	e01a      	b.n	800202c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ff6:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a33      	ldr	r2, [pc, #204]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002002:	f7fe fee7 	bl	8000dd4 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800200a:	f7fe fee3 	bl	8000dd4 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e2e7      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f0      	bne.n	800200a <HAL_RCC_OscConfig+0x1da>
 8002028:	e000      	b.n	800202c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800202a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d074      	beq.n	8002122 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b08      	cmp	r3, #8
 800203c:	d005      	beq.n	800204a <HAL_RCC_OscConfig+0x21a>
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b0c      	cmp	r3, #12
 8002042:	d10e      	bne.n	8002062 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d10b      	bne.n	8002062 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204a:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d064      	beq.n	8002120 <HAL_RCC_OscConfig+0x2f0>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d160      	bne.n	8002120 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e2c4      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206a:	d106      	bne.n	800207a <HAL_RCC_OscConfig+0x24a>
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a15      	ldr	r2, [pc, #84]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8002072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	e01d      	b.n	80020b6 <HAL_RCC_OscConfig+0x286>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x26e>
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 800208a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8002096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x286>
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 80020a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 80020b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d01c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7fe fe89 	bl	8000dd4 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c4:	e011      	b.n	80020ea <HAL_RCC_OscConfig+0x2ba>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08004630 	.word	0x08004630
 80020d0:	20000000 	.word	0x20000000
 80020d4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d8:	f7fe fe7c 	bl	8000dd4 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e280      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ea:	4baf      	ldr	r3, [pc, #700]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x2a8>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fe6c 	bl	8000dd4 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002100:	f7fe fe68 	bl	8000dd4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e26c      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002112:	4ba5      	ldr	r3, [pc, #660]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x2d0>
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d060      	beq.n	80021f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d005      	beq.n	8002140 <HAL_RCC_OscConfig+0x310>
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d119      	bne.n	800216e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d116      	bne.n	800216e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002140:	4b99      	ldr	r3, [pc, #612]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_OscConfig+0x328>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e249      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b93      	ldr	r3, [pc, #588]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	4990      	ldr	r1, [pc, #576]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216c:	e040      	b.n	80021f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d023      	beq.n	80021be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002176:	4b8c      	ldr	r3, [pc, #560]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a8b      	ldr	r2, [pc, #556]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7fe fe27 	bl	8000dd4 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218a:	f7fe fe23 	bl	8000dd4 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e227      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219c:	4b82      	ldr	r3, [pc, #520]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	061b      	lsls	r3, r3, #24
 80021b6:	497c      	ldr	r1, [pc, #496]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
 80021bc:	e018      	b.n	80021f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021be:	4b7a      	ldr	r3, [pc, #488]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a79      	ldr	r2, [pc, #484]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80021c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7fe fe03 	bl	8000dd4 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d2:	f7fe fdff 	bl	8000dd4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e203      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e4:	4b70      	ldr	r3, [pc, #448]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d03c      	beq.n	8002276 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d01c      	beq.n	800223e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002204:	4b68      	ldr	r3, [pc, #416]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220a:	4a67      	ldr	r2, [pc, #412]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7fe fdde 	bl	8000dd4 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7fe fdda 	bl	8000dd4 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e1de      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800222e:	4b5e      	ldr	r3, [pc, #376]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ef      	beq.n	800221c <HAL_RCC_OscConfig+0x3ec>
 800223c:	e01b      	b.n	8002276 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223e:	4b5a      	ldr	r3, [pc, #360]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002244:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224e:	f7fe fdc1 	bl	8000dd4 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002256:	f7fe fdbd 	bl	8000dd4 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e1c1      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002268:	4b4f      	ldr	r3, [pc, #316]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800226a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ef      	bne.n	8002256 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80a6 	beq.w	80023d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002288:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10d      	bne.n	80022b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002294:	4b44      	ldr	r3, [pc, #272]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	4a43      	ldr	r2, [pc, #268]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800229a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229e:	6593      	str	r3, [r2, #88]	; 0x58
 80022a0:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ac:	2301      	movs	r3, #1
 80022ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b0:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <HAL_RCC_OscConfig+0x57c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d118      	bne.n	80022ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022bc:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_OscConfig+0x57c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a3a      	ldr	r2, [pc, #232]	; (80023ac <HAL_RCC_OscConfig+0x57c>)
 80022c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c8:	f7fe fd84 	bl	8000dd4 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d0:	f7fe fd80 	bl	8000dd4 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e184      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e2:	4b32      	ldr	r3, [pc, #200]	; (80023ac <HAL_RCC_OscConfig+0x57c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d108      	bne.n	8002308 <HAL_RCC_OscConfig+0x4d8>
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	4a2a      	ldr	r2, [pc, #168]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002306:	e024      	b.n	8002352 <HAL_RCC_OscConfig+0x522>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d110      	bne.n	8002332 <HAL_RCC_OscConfig+0x502>
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002330:	e00f      	b.n	8002352 <HAL_RCC_OscConfig+0x522>
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002338:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800234a:	f023 0304 	bic.w	r3, r3, #4
 800234e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7fe fd3b 	bl	8000dd4 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe fd37 	bl	8000dd4 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e139      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0ed      	beq.n	8002362 <HAL_RCC_OscConfig+0x532>
 8002386:	e01a      	b.n	80023be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7fe fd24 	bl	8000dd4 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800238e:	e00f      	b.n	80023b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f7fe fd20 	bl	8000dd4 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	; 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d906      	bls.n	80023b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e122      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b0:	4b90      	ldr	r3, [pc, #576]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1e8      	bne.n	8002390 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023be:	7ffb      	ldrb	r3, [r7, #31]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b8b      	ldr	r3, [pc, #556]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	4a8a      	ldr	r2, [pc, #552]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80023ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 8108 	beq.w	80025ea <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	2b02      	cmp	r3, #2
 80023e0:	f040 80d0 	bne.w	8002584 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023e4:	4b83      	ldr	r3, [pc, #524]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0203 	and.w	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d130      	bne.n	800245a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	3b01      	subs	r3, #1
 8002404:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d127      	bne.n	800245a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002414:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d11f      	bne.n	800245a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002424:	2a07      	cmp	r2, #7
 8002426:	bf14      	ite	ne
 8002428:	2201      	movne	r2, #1
 800242a:	2200      	moveq	r2, #0
 800242c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800242e:	4293      	cmp	r3, r2
 8002430:	d113      	bne.n	800245a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243c:	085b      	lsrs	r3, r3, #1
 800243e:	3b01      	subs	r3, #1
 8002440:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002442:	429a      	cmp	r2, r3
 8002444:	d109      	bne.n	800245a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	085b      	lsrs	r3, r3, #1
 8002452:	3b01      	subs	r3, #1
 8002454:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d06e      	beq.n	8002538 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d069      	beq.n	8002534 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002460:	4b64      	ldr	r3, [pc, #400]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d105      	bne.n	8002478 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800246c:	4b61      	ldr	r3, [pc, #388]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0b7      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800247c:	4b5d      	ldr	r3, [pc, #372]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a5c      	ldr	r2, [pc, #368]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 8002482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002486:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002488:	f7fe fca4 	bl	8000dd4 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fca0 	bl	8000dd4 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e0a4      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a2:	4b54      	ldr	r3, [pc, #336]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ae:	4b51      	ldr	r3, [pc, #324]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	4b51      	ldr	r3, [pc, #324]	; (80025f8 <HAL_RCC_OscConfig+0x7c8>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024be:	3a01      	subs	r2, #1
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	4311      	orrs	r1, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024c8:	0212      	lsls	r2, r2, #8
 80024ca:	4311      	orrs	r1, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024d0:	0852      	lsrs	r2, r2, #1
 80024d2:	3a01      	subs	r2, #1
 80024d4:	0552      	lsls	r2, r2, #21
 80024d6:	4311      	orrs	r1, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024dc:	0852      	lsrs	r2, r2, #1
 80024de:	3a01      	subs	r2, #1
 80024e0:	0652      	lsls	r2, r2, #25
 80024e2:	4311      	orrs	r1, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024e8:	0912      	lsrs	r2, r2, #4
 80024ea:	0452      	lsls	r2, r2, #17
 80024ec:	430a      	orrs	r2, r1
 80024ee:	4941      	ldr	r1, [pc, #260]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024f4:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a3e      	ldr	r2, [pc, #248]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002500:	4b3c      	ldr	r3, [pc, #240]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a3b      	ldr	r2, [pc, #236]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 8002506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800250c:	f7fe fc62 	bl	8000dd4 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe fc5e 	bl	8000dd4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e062      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002532:	e05a      	b.n	80025ea <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e059      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002538:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d152      	bne.n	80025ea <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2a      	ldr	r2, [pc, #168]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 800254a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800254e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002550:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 8002556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800255a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800255c:	f7fe fc3a 	bl	8000dd4 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe fc36 	bl	8000dd4 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e03a      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002576:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x734>
 8002582:	e032      	b.n	80025ea <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d02d      	beq.n	80025e6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 8002590:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002594:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	4a13      	ldr	r2, [pc, #76]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80025a8:	f023 0303 	bic.w	r3, r3, #3
 80025ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80025b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80025b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe fc09 	bl	8000dd4 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe fc05 	bl	8000dd4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e009      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x7c4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x796>
 80025e4:	e001      	b.n	80025ea <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3720      	adds	r7, #32
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	f99d808c 	.word	0xf99d808c

080025fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0c8      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b66      	ldr	r3, [pc, #408]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d910      	bls.n	8002640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b63      	ldr	r3, [pc, #396]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 0207 	bic.w	r2, r3, #7
 8002626:	4961      	ldr	r1, [pc, #388]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b5f      	ldr	r3, [pc, #380]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b0      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d04c      	beq.n	80026e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d107      	bne.n	8002664 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002654:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d121      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e09e      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d107      	bne.n	800267c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800266c:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d115      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e092      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002684:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e086      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002694:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e07e      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026a4:	4b42      	ldr	r3, [pc, #264]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 0203 	bic.w	r2, r3, #3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	493f      	ldr	r1, [pc, #252]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b6:	f7fe fb8d 	bl	8000dd4 <HAL_GetTick>
 80026ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026be:	f7fe fb89 	bl	8000dd4 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e066      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d4:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 020c 	and.w	r2, r3, #12
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d1eb      	bne.n	80026be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f2:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	492c      	ldr	r1, [pc, #176]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d210      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 0207 	bic.w	r2, r3, #7
 800271a:	4924      	ldr	r1, [pc, #144]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e036      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4918      	ldr	r1, [pc, #96]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4910      	ldr	r1, [pc, #64]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002772:	f000 f825 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8002776:	4602      	mov	r2, r0
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	490c      	ldr	r1, [pc, #48]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	5ccb      	ldrb	r3, [r1, r3]
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe facc 	bl	8000d34 <HAL_InitTick>
 800279c:	4603      	mov	r3, r0
 800279e:	72fb      	strb	r3, [r7, #11]

  return status;
 80027a0:	7afb      	ldrb	r3, [r7, #11]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40022000 	.word	0x40022000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	08004630 	.word	0x08004630
 80027b8:	20000000 	.word	0x20000000
 80027bc:	20000004 	.word	0x20000004

080027c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ce:	4b3e      	ldr	r3, [pc, #248]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d8:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x34>
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d121      	bne.n	8002832 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d11e      	bne.n	8002832 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027f4:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002800:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e005      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800281c:	4a2b      	ldr	r2, [pc, #172]	; (80028cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002824:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10d      	bne.n	8002848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b04      	cmp	r3, #4
 8002836:	d102      	bne.n	800283e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	e004      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d101      	bne.n	8002848 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002844:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002846:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d134      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d003      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0xa6>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d003      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0xac>
 8002864:	e005      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002868:	617b      	str	r3, [r7, #20]
      break;
 800286a:	e005      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800286e:	617b      	str	r3, [r7, #20]
      break;
 8002870:	e002      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	617b      	str	r3, [r7, #20]
      break;
 8002876:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	3301      	adds	r3, #1
 8002884:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	fb02 f203 	mul.w	r2, r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	0e5b      	lsrs	r3, r3, #25
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	3301      	adds	r3, #1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028b8:	69bb      	ldr	r3, [r7, #24]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08004648 	.word	0x08004648
 80028d0:	00f42400 	.word	0x00f42400
 80028d4:	007a1200 	.word	0x007a1200

080028d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_RCC_GetHCLKFreq+0x14>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000000 	.word	0x20000000

080028f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028f4:	f7ff fff0 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 80028f8:	4602      	mov	r2, r0
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4904      	ldr	r1, [pc, #16]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002906:	5ccb      	ldrb	r3, [r1, r3]
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	08004640 	.word	0x08004640

0800291c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002920:	f7ff ffda 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	0adb      	lsrs	r3, r3, #11
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	4904      	ldr	r1, [pc, #16]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	08004640 	.word	0x08004640

08002948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002960:	f7ff fa02 	bl	8001d68 <HAL_PWREx_GetVoltageRange>
 8002964:	6178      	str	r0, [r7, #20]
 8002966:	e014      	b.n	8002992 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	4a24      	ldr	r2, [pc, #144]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002972:	6593      	str	r3, [r2, #88]	; 0x58
 8002974:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002980:	f7ff f9f2 	bl	8001d68 <HAL_PWREx_GetVoltageRange>
 8002984:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	4a1d      	ldr	r2, [pc, #116]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800298c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002990:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002998:	d10b      	bne.n	80029b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b80      	cmp	r3, #128	; 0x80
 800299e:	d919      	bls.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2ba0      	cmp	r3, #160	; 0xa0
 80029a4:	d902      	bls.n	80029ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029a6:	2302      	movs	r3, #2
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	e013      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029ac:	2301      	movs	r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	e010      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d902      	bls.n	80029be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029b8:	2303      	movs	r3, #3
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	e00a      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b80      	cmp	r3, #128	; 0x80
 80029c2:	d102      	bne.n	80029ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029c4:	2302      	movs	r3, #2
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	e004      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b70      	cmp	r3, #112	; 0x70
 80029ce:	d101      	bne.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029d0:	2301      	movs	r3, #1
 80029d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 0207 	bic.w	r2, r3, #7
 80029dc:	4909      	ldr	r1, [pc, #36]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d001      	beq.n	80029f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40022000 	.word	0x40022000

08002a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a10:	2300      	movs	r3, #0
 8002a12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a14:	2300      	movs	r3, #0
 8002a16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d041      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a2c:	d02a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a32:	d824      	bhi.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a38:	d008      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a3e:	d81e      	bhi.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a48:	d010      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a4a:	e018      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a4c:	4b86      	ldr	r3, [pc, #536]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4a85      	ldr	r2, [pc, #532]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a58:	e015      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fabb 	bl	8002fdc <RCCEx_PLLSAI1_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a6a:	e00c      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3320      	adds	r3, #32
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fba6 	bl	80031c4 <RCCEx_PLLSAI2_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a7c:	e003      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	74fb      	strb	r3, [r7, #19]
      break;
 8002a82:	e000      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a8c:	4b76      	ldr	r3, [pc, #472]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a9a:	4973      	ldr	r1, [pc, #460]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002aa2:	e001      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d041      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002abc:	d02a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002abe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ac2:	d824      	bhi.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ac4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ac8:	d008      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002aca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ace:	d81e      	bhi.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad8:	d010      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ada:	e018      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002adc:	4b62      	ldr	r3, [pc, #392]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a61      	ldr	r2, [pc, #388]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ae8:	e015      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3304      	adds	r3, #4
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fa73 	bl	8002fdc <RCCEx_PLLSAI1_Config>
 8002af6:	4603      	mov	r3, r0
 8002af8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002afa:	e00c      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3320      	adds	r3, #32
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fb5e 	bl	80031c4 <RCCEx_PLLSAI2_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b0c:	e003      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	74fb      	strb	r3, [r7, #19]
      break;
 8002b12:	e000      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b16:	7cfb      	ldrb	r3, [r7, #19]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b1c:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b2a:	494f      	ldr	r1, [pc, #316]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b32:	e001      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80a0 	beq.w	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b60:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	4a40      	ldr	r2, [pc, #256]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b6c:	4b3e      	ldr	r3, [pc, #248]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b7c:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a3a      	ldr	r2, [pc, #232]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b88:	f7fe f924 	bl	8000dd4 <HAL_GetTick>
 8002b8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b8e:	e009      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b90:	f7fe f920 	bl	8000dd4 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d902      	bls.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ba2:	e005      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ba4:	4b31      	ldr	r3, [pc, #196]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ef      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d15c      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01f      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d019      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bd4:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002be0:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	4a20      	ldr	r2, [pc, #128]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c00:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c12:	f7fe f8df 	bl	8000dd4 <HAL_GetTick>
 8002c16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c18:	e00b      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f7fe f8db 	bl	8000dd4 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d902      	bls.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	74fb      	strb	r3, [r7, #19]
            break;
 8002c30:	e006      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ec      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c56:	4904      	ldr	r1, [pc, #16]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c5e:	e009      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	74bb      	strb	r3, [r7, #18]
 8002c64:	e006      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c74:	7c7b      	ldrb	r3, [r7, #17]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d105      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7a:	4b9e      	ldr	r3, [pc, #632]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	4a9d      	ldr	r2, [pc, #628]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c92:	4b98      	ldr	r3, [pc, #608]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c98:	f023 0203 	bic.w	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	4994      	ldr	r1, [pc, #592]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cb4:	4b8f      	ldr	r3, [pc, #572]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	f023 020c 	bic.w	r2, r3, #12
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	498c      	ldr	r1, [pc, #560]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cd6:	4b87      	ldr	r3, [pc, #540]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	4983      	ldr	r1, [pc, #524]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cf8:	4b7e      	ldr	r3, [pc, #504]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	497b      	ldr	r1, [pc, #492]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d1a:	4b76      	ldr	r3, [pc, #472]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d28:	4972      	ldr	r1, [pc, #456]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d3c:	4b6d      	ldr	r3, [pc, #436]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4a:	496a      	ldr	r1, [pc, #424]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d5e:	4b65      	ldr	r3, [pc, #404]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	4961      	ldr	r1, [pc, #388]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d80:	4b5c      	ldr	r3, [pc, #368]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8e:	4959      	ldr	r1, [pc, #356]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da2:	4b54      	ldr	r3, [pc, #336]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db0:	4950      	ldr	r1, [pc, #320]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd2:	4948      	ldr	r1, [pc, #288]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002de6:	4b43      	ldr	r3, [pc, #268]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	493f      	ldr	r1, [pc, #252]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d028      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e08:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e16:	4937      	ldr	r1, [pc, #220]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e26:	d106      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a31      	ldr	r2, [pc, #196]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e32:	60d3      	str	r3, [r2, #12]
 8002e34:	e011      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e3e:	d10c      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
 8002e44:	2101      	movs	r1, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f8c8 	bl	8002fdc <RCCEx_PLLSAI1_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d028      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e66:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	491f      	ldr	r1, [pc, #124]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e84:	d106      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e86:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	4a1a      	ldr	r2, [pc, #104]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e90:	60d3      	str	r3, [r2, #12]
 8002e92:	e011      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 f899 	bl	8002fdc <RCCEx_PLLSAI1_Config>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eae:	7cfb      	ldrb	r3, [r7, #19]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d02b      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed2:	4908      	ldr	r1, [pc, #32]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a02      	ldr	r2, [pc, #8]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eee:	60d3      	str	r3, [r2, #12]
 8002ef0:	e014      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	2101      	movs	r1, #1
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 f867 	bl	8002fdc <RCCEx_PLLSAI1_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f18:	7cfb      	ldrb	r3, [r7, #19]
 8002f1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d02f      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f28:	4b2b      	ldr	r3, [pc, #172]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f36:	4928      	ldr	r1, [pc, #160]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f46:	d10d      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f844 	bl	8002fdc <RCCEx_PLLSAI1_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f58:	7cfb      	ldrb	r3, [r7, #19]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d014      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f5e:	7cfb      	ldrb	r3, [r7, #19]
 8002f60:	74bb      	strb	r3, [r7, #18]
 8002f62:	e011      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3320      	adds	r3, #32
 8002f72:	2102      	movs	r1, #2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f925 	bl	80031c4 <RCCEx_PLLSAI2_Config>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f7e:	7cfb      	ldrb	r3, [r7, #19]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f84:	7cfb      	ldrb	r3, [r7, #19]
 8002f86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa2:	490d      	ldr	r1, [pc, #52]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc6:	4904      	ldr	r1, [pc, #16]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fce:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000

08002fdc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fea:	4b75      	ldr	r3, [pc, #468]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d018      	beq.n	8003028 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ff6:	4b72      	ldr	r3, [pc, #456]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0203 	and.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d10d      	bne.n	8003022 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
       ||
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800300e:	4b6c      	ldr	r3, [pc, #432]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
       ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d047      	beq.n	80030b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
 8003026:	e044      	b.n	80030b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d018      	beq.n	8003062 <RCCEx_PLLSAI1_Config+0x86>
 8003030:	2b03      	cmp	r3, #3
 8003032:	d825      	bhi.n	8003080 <RCCEx_PLLSAI1_Config+0xa4>
 8003034:	2b01      	cmp	r3, #1
 8003036:	d002      	beq.n	800303e <RCCEx_PLLSAI1_Config+0x62>
 8003038:	2b02      	cmp	r3, #2
 800303a:	d009      	beq.n	8003050 <RCCEx_PLLSAI1_Config+0x74>
 800303c:	e020      	b.n	8003080 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800303e:	4b60      	ldr	r3, [pc, #384]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d11d      	bne.n	8003086 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800304e:	e01a      	b.n	8003086 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003050:	4b5b      	ldr	r3, [pc, #364]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d116      	bne.n	800308a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003060:	e013      	b.n	800308a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003062:	4b57      	ldr	r3, [pc, #348]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800306e:	4b54      	ldr	r3, [pc, #336]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800307e:	e006      	b.n	800308e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      break;
 8003084:	e004      	b.n	8003090 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003086:	bf00      	nop
 8003088:	e002      	b.n	8003090 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800308a:	bf00      	nop
 800308c:	e000      	b.n	8003090 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800308e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10d      	bne.n	80030b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003096:	4b4a      	ldr	r3, [pc, #296]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6819      	ldr	r1, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	430b      	orrs	r3, r1
 80030ac:	4944      	ldr	r1, [pc, #272]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d17d      	bne.n	80031b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030b8:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a40      	ldr	r2, [pc, #256]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c4:	f7fd fe86 	bl	8000dd4 <HAL_GetTick>
 80030c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030ca:	e009      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030cc:	f7fd fe82 	bl	8000dd4 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d902      	bls.n	80030e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	73fb      	strb	r3, [r7, #15]
        break;
 80030de:	e005      	b.n	80030ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030e0:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ef      	bne.n	80030cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d160      	bne.n	80031b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d111      	bne.n	800311c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030f8:	4b31      	ldr	r3, [pc, #196]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6892      	ldr	r2, [r2, #8]
 8003108:	0211      	lsls	r1, r2, #8
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68d2      	ldr	r2, [r2, #12]
 800310e:	0912      	lsrs	r2, r2, #4
 8003110:	0452      	lsls	r2, r2, #17
 8003112:	430a      	orrs	r2, r1
 8003114:	492a      	ldr	r1, [pc, #168]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	610b      	str	r3, [r1, #16]
 800311a:	e027      	b.n	800316c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d112      	bne.n	8003148 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003122:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800312a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6892      	ldr	r2, [r2, #8]
 8003132:	0211      	lsls	r1, r2, #8
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6912      	ldr	r2, [r2, #16]
 8003138:	0852      	lsrs	r2, r2, #1
 800313a:	3a01      	subs	r2, #1
 800313c:	0552      	lsls	r2, r2, #21
 800313e:	430a      	orrs	r2, r1
 8003140:	491f      	ldr	r1, [pc, #124]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003142:	4313      	orrs	r3, r2
 8003144:	610b      	str	r3, [r1, #16]
 8003146:	e011      	b.n	800316c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003150:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6892      	ldr	r2, [r2, #8]
 8003158:	0211      	lsls	r1, r2, #8
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6952      	ldr	r2, [r2, #20]
 800315e:	0852      	lsrs	r2, r2, #1
 8003160:	3a01      	subs	r2, #1
 8003162:	0652      	lsls	r2, r2, #25
 8003164:	430a      	orrs	r2, r1
 8003166:	4916      	ldr	r1, [pc, #88]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003168:	4313      	orrs	r3, r2
 800316a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800316c:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003172:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003176:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fd fe2c 	bl	8000dd4 <HAL_GetTick>
 800317c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800317e:	e009      	b.n	8003194 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003180:	f7fd fe28 	bl	8000dd4 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d902      	bls.n	8003194 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	73fb      	strb	r3, [r7, #15]
          break;
 8003192:	e005      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ef      	beq.n	8003180 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	4904      	ldr	r1, [pc, #16]	; (80031c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000

080031c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031d2:	4b6a      	ldr	r3, [pc, #424]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d018      	beq.n	8003210 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031de:	4b67      	ldr	r3, [pc, #412]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0203 	and.w	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d10d      	bne.n	800320a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
       ||
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80031f6:	4b61      	ldr	r3, [pc, #388]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	091b      	lsrs	r3, r3, #4
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
       ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d047      	beq.n	800329a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	e044      	b.n	800329a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d018      	beq.n	800324a <RCCEx_PLLSAI2_Config+0x86>
 8003218:	2b03      	cmp	r3, #3
 800321a:	d825      	bhi.n	8003268 <RCCEx_PLLSAI2_Config+0xa4>
 800321c:	2b01      	cmp	r3, #1
 800321e:	d002      	beq.n	8003226 <RCCEx_PLLSAI2_Config+0x62>
 8003220:	2b02      	cmp	r3, #2
 8003222:	d009      	beq.n	8003238 <RCCEx_PLLSAI2_Config+0x74>
 8003224:	e020      	b.n	8003268 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003226:	4b55      	ldr	r3, [pc, #340]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d11d      	bne.n	800326e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003236:	e01a      	b.n	800326e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003238:	4b50      	ldr	r3, [pc, #320]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d116      	bne.n	8003272 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003248:	e013      	b.n	8003272 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800324a:	4b4c      	ldr	r3, [pc, #304]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10f      	bne.n	8003276 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003256:	4b49      	ldr	r3, [pc, #292]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003266:	e006      	b.n	8003276 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
      break;
 800326c:	e004      	b.n	8003278 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800326e:	bf00      	nop
 8003270:	e002      	b.n	8003278 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003272:	bf00      	nop
 8003274:	e000      	b.n	8003278 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003276:	bf00      	nop
    }

    if(status == HAL_OK)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10d      	bne.n	800329a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800327e:	4b3f      	ldr	r3, [pc, #252]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6819      	ldr	r1, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	3b01      	subs	r3, #1
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	430b      	orrs	r3, r1
 8003294:	4939      	ldr	r1, [pc, #228]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003296:	4313      	orrs	r3, r2
 8003298:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d167      	bne.n	8003370 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032a0:	4b36      	ldr	r3, [pc, #216]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a35      	ldr	r2, [pc, #212]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ac:	f7fd fd92 	bl	8000dd4 <HAL_GetTick>
 80032b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032b2:	e009      	b.n	80032c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032b4:	f7fd fd8e 	bl	8000dd4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d902      	bls.n	80032c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	73fb      	strb	r3, [r7, #15]
        break;
 80032c6:	e005      	b.n	80032d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032c8:	4b2c      	ldr	r3, [pc, #176]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1ef      	bne.n	80032b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d14a      	bne.n	8003370 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d111      	bne.n	8003304 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032e0:	4b26      	ldr	r3, [pc, #152]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6892      	ldr	r2, [r2, #8]
 80032f0:	0211      	lsls	r1, r2, #8
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68d2      	ldr	r2, [r2, #12]
 80032f6:	0912      	lsrs	r2, r2, #4
 80032f8:	0452      	lsls	r2, r2, #17
 80032fa:	430a      	orrs	r2, r1
 80032fc:	491f      	ldr	r1, [pc, #124]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	614b      	str	r3, [r1, #20]
 8003302:	e011      	b.n	8003328 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003304:	4b1d      	ldr	r3, [pc, #116]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800330c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6892      	ldr	r2, [r2, #8]
 8003314:	0211      	lsls	r1, r2, #8
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6912      	ldr	r2, [r2, #16]
 800331a:	0852      	lsrs	r2, r2, #1
 800331c:	3a01      	subs	r2, #1
 800331e:	0652      	lsls	r2, r2, #25
 8003320:	430a      	orrs	r2, r1
 8003322:	4916      	ldr	r1, [pc, #88]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003324:	4313      	orrs	r3, r2
 8003326:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003328:	4b14      	ldr	r3, [pc, #80]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a13      	ldr	r2, [pc, #76]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 800332e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003332:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fd fd4e 	bl	8000dd4 <HAL_GetTick>
 8003338:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800333a:	e009      	b.n	8003350 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800333c:	f7fd fd4a 	bl	8000dd4 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d902      	bls.n	8003350 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	73fb      	strb	r3, [r7, #15]
          break;
 800334e:	e005      	b.n	800335c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003350:	4b0a      	ldr	r3, [pc, #40]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ef      	beq.n	800333c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	4904      	ldr	r1, [pc, #16]	; (800337c <RCCEx_PLLSAI2_Config+0x1b8>)
 800336c:	4313      	orrs	r3, r2
 800336e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000

08003380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e040      	b.n	8003414 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd fb8e 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2224      	movs	r2, #36	; 0x24
 80033ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8c0 	bl	8003544 <UART_SetConfig>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e022      	b.n	8003414 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fb3e 	bl	8003a58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fbc5 	bl	8003b9c <UART_CheckIdleState>
 8003412:	4603      	mov	r3, r0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08a      	sub	sp, #40	; 0x28
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003430:	2b20      	cmp	r3, #32
 8003432:	f040 8082 	bne.w	800353a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_UART_Transmit+0x26>
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e07a      	b.n	800353c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_UART_Transmit+0x38>
 8003450:	2302      	movs	r3, #2
 8003452:	e073      	b.n	800353c <HAL_UART_Transmit+0x120>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2221      	movs	r2, #33	; 0x21
 8003468:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800346a:	f7fd fcb3 	bl	8000dd4 <HAL_GetTick>
 800346e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	88fa      	ldrh	r2, [r7, #6]
 8003474:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003488:	d108      	bne.n	800349c <HAL_UART_Transmit+0x80>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	e003      	b.n	80034a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80034ac:	e02d      	b.n	800350a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2200      	movs	r2, #0
 80034b6:	2180      	movs	r1, #128	; 0x80
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 fbb8 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e039      	b.n	800353c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10b      	bne.n	80034e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	881a      	ldrh	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034da:	b292      	uxth	r2, r2
 80034dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	3302      	adds	r3, #2
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	e008      	b.n	80034f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	b292      	uxth	r2, r2
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3301      	adds	r3, #1
 80034f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1cb      	bne.n	80034ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2200      	movs	r2, #0
 800351e:	2140      	movs	r1, #64	; 0x40
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 fb84 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e005      	b.n	800353c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e000      	b.n	800353c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800353a:	2302      	movs	r3, #2
  }
}
 800353c:	4618      	mov	r0, r3
 800353e:	3720      	adds	r7, #32
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003544:	b5b0      	push	{r4, r5, r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	4313      	orrs	r3, r2
 8003566:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4bad      	ldr	r3, [pc, #692]	; (8003824 <UART_SetConfig+0x2e0>)
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	69f9      	ldr	r1, [r7, #28]
 8003578:	430b      	orrs	r3, r1
 800357a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4aa2      	ldr	r2, [pc, #648]	; (8003828 <UART_SetConfig+0x2e4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a99      	ldr	r2, [pc, #612]	; (800382c <UART_SetConfig+0x2e8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d121      	bne.n	800360e <UART_SetConfig+0xca>
 80035ca:	4b99      	ldr	r3, [pc, #612]	; (8003830 <UART_SetConfig+0x2ec>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d817      	bhi.n	8003608 <UART_SetConfig+0xc4>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <UART_SetConfig+0x9c>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	080035f1 	.word	0x080035f1
 80035e4:	080035fd 	.word	0x080035fd
 80035e8:	080035f7 	.word	0x080035f7
 80035ec:	08003603 	.word	0x08003603
 80035f0:	2301      	movs	r3, #1
 80035f2:	76fb      	strb	r3, [r7, #27]
 80035f4:	e0e7      	b.n	80037c6 <UART_SetConfig+0x282>
 80035f6:	2302      	movs	r3, #2
 80035f8:	76fb      	strb	r3, [r7, #27]
 80035fa:	e0e4      	b.n	80037c6 <UART_SetConfig+0x282>
 80035fc:	2304      	movs	r3, #4
 80035fe:	76fb      	strb	r3, [r7, #27]
 8003600:	e0e1      	b.n	80037c6 <UART_SetConfig+0x282>
 8003602:	2308      	movs	r3, #8
 8003604:	76fb      	strb	r3, [r7, #27]
 8003606:	e0de      	b.n	80037c6 <UART_SetConfig+0x282>
 8003608:	2310      	movs	r3, #16
 800360a:	76fb      	strb	r3, [r7, #27]
 800360c:	e0db      	b.n	80037c6 <UART_SetConfig+0x282>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a88      	ldr	r2, [pc, #544]	; (8003834 <UART_SetConfig+0x2f0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d132      	bne.n	800367e <UART_SetConfig+0x13a>
 8003618:	4b85      	ldr	r3, [pc, #532]	; (8003830 <UART_SetConfig+0x2ec>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b0c      	cmp	r3, #12
 8003624:	d828      	bhi.n	8003678 <UART_SetConfig+0x134>
 8003626:	a201      	add	r2, pc, #4	; (adr r2, 800362c <UART_SetConfig+0xe8>)
 8003628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362c:	08003661 	.word	0x08003661
 8003630:	08003679 	.word	0x08003679
 8003634:	08003679 	.word	0x08003679
 8003638:	08003679 	.word	0x08003679
 800363c:	0800366d 	.word	0x0800366d
 8003640:	08003679 	.word	0x08003679
 8003644:	08003679 	.word	0x08003679
 8003648:	08003679 	.word	0x08003679
 800364c:	08003667 	.word	0x08003667
 8003650:	08003679 	.word	0x08003679
 8003654:	08003679 	.word	0x08003679
 8003658:	08003679 	.word	0x08003679
 800365c:	08003673 	.word	0x08003673
 8003660:	2300      	movs	r3, #0
 8003662:	76fb      	strb	r3, [r7, #27]
 8003664:	e0af      	b.n	80037c6 <UART_SetConfig+0x282>
 8003666:	2302      	movs	r3, #2
 8003668:	76fb      	strb	r3, [r7, #27]
 800366a:	e0ac      	b.n	80037c6 <UART_SetConfig+0x282>
 800366c:	2304      	movs	r3, #4
 800366e:	76fb      	strb	r3, [r7, #27]
 8003670:	e0a9      	b.n	80037c6 <UART_SetConfig+0x282>
 8003672:	2308      	movs	r3, #8
 8003674:	76fb      	strb	r3, [r7, #27]
 8003676:	e0a6      	b.n	80037c6 <UART_SetConfig+0x282>
 8003678:	2310      	movs	r3, #16
 800367a:	76fb      	strb	r3, [r7, #27]
 800367c:	e0a3      	b.n	80037c6 <UART_SetConfig+0x282>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a6d      	ldr	r2, [pc, #436]	; (8003838 <UART_SetConfig+0x2f4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d120      	bne.n	80036ca <UART_SetConfig+0x186>
 8003688:	4b69      	ldr	r3, [pc, #420]	; (8003830 <UART_SetConfig+0x2ec>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003692:	2b30      	cmp	r3, #48	; 0x30
 8003694:	d013      	beq.n	80036be <UART_SetConfig+0x17a>
 8003696:	2b30      	cmp	r3, #48	; 0x30
 8003698:	d814      	bhi.n	80036c4 <UART_SetConfig+0x180>
 800369a:	2b20      	cmp	r3, #32
 800369c:	d009      	beq.n	80036b2 <UART_SetConfig+0x16e>
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d810      	bhi.n	80036c4 <UART_SetConfig+0x180>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <UART_SetConfig+0x168>
 80036a6:	2b10      	cmp	r3, #16
 80036a8:	d006      	beq.n	80036b8 <UART_SetConfig+0x174>
 80036aa:	e00b      	b.n	80036c4 <UART_SetConfig+0x180>
 80036ac:	2300      	movs	r3, #0
 80036ae:	76fb      	strb	r3, [r7, #27]
 80036b0:	e089      	b.n	80037c6 <UART_SetConfig+0x282>
 80036b2:	2302      	movs	r3, #2
 80036b4:	76fb      	strb	r3, [r7, #27]
 80036b6:	e086      	b.n	80037c6 <UART_SetConfig+0x282>
 80036b8:	2304      	movs	r3, #4
 80036ba:	76fb      	strb	r3, [r7, #27]
 80036bc:	e083      	b.n	80037c6 <UART_SetConfig+0x282>
 80036be:	2308      	movs	r3, #8
 80036c0:	76fb      	strb	r3, [r7, #27]
 80036c2:	e080      	b.n	80037c6 <UART_SetConfig+0x282>
 80036c4:	2310      	movs	r3, #16
 80036c6:	76fb      	strb	r3, [r7, #27]
 80036c8:	e07d      	b.n	80037c6 <UART_SetConfig+0x282>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a5b      	ldr	r2, [pc, #364]	; (800383c <UART_SetConfig+0x2f8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d120      	bne.n	8003716 <UART_SetConfig+0x1d2>
 80036d4:	4b56      	ldr	r3, [pc, #344]	; (8003830 <UART_SetConfig+0x2ec>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036de:	2bc0      	cmp	r3, #192	; 0xc0
 80036e0:	d013      	beq.n	800370a <UART_SetConfig+0x1c6>
 80036e2:	2bc0      	cmp	r3, #192	; 0xc0
 80036e4:	d814      	bhi.n	8003710 <UART_SetConfig+0x1cc>
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d009      	beq.n	80036fe <UART_SetConfig+0x1ba>
 80036ea:	2b80      	cmp	r3, #128	; 0x80
 80036ec:	d810      	bhi.n	8003710 <UART_SetConfig+0x1cc>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <UART_SetConfig+0x1b4>
 80036f2:	2b40      	cmp	r3, #64	; 0x40
 80036f4:	d006      	beq.n	8003704 <UART_SetConfig+0x1c0>
 80036f6:	e00b      	b.n	8003710 <UART_SetConfig+0x1cc>
 80036f8:	2300      	movs	r3, #0
 80036fa:	76fb      	strb	r3, [r7, #27]
 80036fc:	e063      	b.n	80037c6 <UART_SetConfig+0x282>
 80036fe:	2302      	movs	r3, #2
 8003700:	76fb      	strb	r3, [r7, #27]
 8003702:	e060      	b.n	80037c6 <UART_SetConfig+0x282>
 8003704:	2304      	movs	r3, #4
 8003706:	76fb      	strb	r3, [r7, #27]
 8003708:	e05d      	b.n	80037c6 <UART_SetConfig+0x282>
 800370a:	2308      	movs	r3, #8
 800370c:	76fb      	strb	r3, [r7, #27]
 800370e:	e05a      	b.n	80037c6 <UART_SetConfig+0x282>
 8003710:	2310      	movs	r3, #16
 8003712:	76fb      	strb	r3, [r7, #27]
 8003714:	e057      	b.n	80037c6 <UART_SetConfig+0x282>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a49      	ldr	r2, [pc, #292]	; (8003840 <UART_SetConfig+0x2fc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d125      	bne.n	800376c <UART_SetConfig+0x228>
 8003720:	4b43      	ldr	r3, [pc, #268]	; (8003830 <UART_SetConfig+0x2ec>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800372e:	d017      	beq.n	8003760 <UART_SetConfig+0x21c>
 8003730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003734:	d817      	bhi.n	8003766 <UART_SetConfig+0x222>
 8003736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800373a:	d00b      	beq.n	8003754 <UART_SetConfig+0x210>
 800373c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003740:	d811      	bhi.n	8003766 <UART_SetConfig+0x222>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <UART_SetConfig+0x20a>
 8003746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374a:	d006      	beq.n	800375a <UART_SetConfig+0x216>
 800374c:	e00b      	b.n	8003766 <UART_SetConfig+0x222>
 800374e:	2300      	movs	r3, #0
 8003750:	76fb      	strb	r3, [r7, #27]
 8003752:	e038      	b.n	80037c6 <UART_SetConfig+0x282>
 8003754:	2302      	movs	r3, #2
 8003756:	76fb      	strb	r3, [r7, #27]
 8003758:	e035      	b.n	80037c6 <UART_SetConfig+0x282>
 800375a:	2304      	movs	r3, #4
 800375c:	76fb      	strb	r3, [r7, #27]
 800375e:	e032      	b.n	80037c6 <UART_SetConfig+0x282>
 8003760:	2308      	movs	r3, #8
 8003762:	76fb      	strb	r3, [r7, #27]
 8003764:	e02f      	b.n	80037c6 <UART_SetConfig+0x282>
 8003766:	2310      	movs	r3, #16
 8003768:	76fb      	strb	r3, [r7, #27]
 800376a:	e02c      	b.n	80037c6 <UART_SetConfig+0x282>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a2d      	ldr	r2, [pc, #180]	; (8003828 <UART_SetConfig+0x2e4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d125      	bne.n	80037c2 <UART_SetConfig+0x27e>
 8003776:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <UART_SetConfig+0x2ec>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003780:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003784:	d017      	beq.n	80037b6 <UART_SetConfig+0x272>
 8003786:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800378a:	d817      	bhi.n	80037bc <UART_SetConfig+0x278>
 800378c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003790:	d00b      	beq.n	80037aa <UART_SetConfig+0x266>
 8003792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003796:	d811      	bhi.n	80037bc <UART_SetConfig+0x278>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <UART_SetConfig+0x260>
 800379c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a0:	d006      	beq.n	80037b0 <UART_SetConfig+0x26c>
 80037a2:	e00b      	b.n	80037bc <UART_SetConfig+0x278>
 80037a4:	2300      	movs	r3, #0
 80037a6:	76fb      	strb	r3, [r7, #27]
 80037a8:	e00d      	b.n	80037c6 <UART_SetConfig+0x282>
 80037aa:	2302      	movs	r3, #2
 80037ac:	76fb      	strb	r3, [r7, #27]
 80037ae:	e00a      	b.n	80037c6 <UART_SetConfig+0x282>
 80037b0:	2304      	movs	r3, #4
 80037b2:	76fb      	strb	r3, [r7, #27]
 80037b4:	e007      	b.n	80037c6 <UART_SetConfig+0x282>
 80037b6:	2308      	movs	r3, #8
 80037b8:	76fb      	strb	r3, [r7, #27]
 80037ba:	e004      	b.n	80037c6 <UART_SetConfig+0x282>
 80037bc:	2310      	movs	r3, #16
 80037be:	76fb      	strb	r3, [r7, #27]
 80037c0:	e001      	b.n	80037c6 <UART_SetConfig+0x282>
 80037c2:	2310      	movs	r3, #16
 80037c4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a17      	ldr	r2, [pc, #92]	; (8003828 <UART_SetConfig+0x2e4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	f040 8087 	bne.w	80038e0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037d2:	7efb      	ldrb	r3, [r7, #27]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d837      	bhi.n	8003848 <UART_SetConfig+0x304>
 80037d8:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <UART_SetConfig+0x29c>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	08003805 	.word	0x08003805
 80037e4:	08003849 	.word	0x08003849
 80037e8:	0800380d 	.word	0x0800380d
 80037ec:	08003849 	.word	0x08003849
 80037f0:	08003813 	.word	0x08003813
 80037f4:	08003849 	.word	0x08003849
 80037f8:	08003849 	.word	0x08003849
 80037fc:	08003849 	.word	0x08003849
 8003800:	0800381b 	.word	0x0800381b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003804:	f7ff f874 	bl	80028f0 <HAL_RCC_GetPCLK1Freq>
 8003808:	6178      	str	r0, [r7, #20]
        break;
 800380a:	e022      	b.n	8003852 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <UART_SetConfig+0x300>)
 800380e:	617b      	str	r3, [r7, #20]
        break;
 8003810:	e01f      	b.n	8003852 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003812:	f7fe ffd5 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8003816:	6178      	str	r0, [r7, #20]
        break;
 8003818:	e01b      	b.n	8003852 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381e:	617b      	str	r3, [r7, #20]
        break;
 8003820:	e017      	b.n	8003852 <UART_SetConfig+0x30e>
 8003822:	bf00      	nop
 8003824:	efff69f3 	.word	0xefff69f3
 8003828:	40008000 	.word	0x40008000
 800382c:	40013800 	.word	0x40013800
 8003830:	40021000 	.word	0x40021000
 8003834:	40004400 	.word	0x40004400
 8003838:	40004800 	.word	0x40004800
 800383c:	40004c00 	.word	0x40004c00
 8003840:	40005000 	.word	0x40005000
 8003844:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	76bb      	strb	r3, [r7, #26]
        break;
 8003850:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80f1 	beq.w	8003a3c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	429a      	cmp	r2, r3
 8003868:	d305      	bcc.n	8003876 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	429a      	cmp	r2, r3
 8003874:	d902      	bls.n	800387c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	76bb      	strb	r3, [r7, #26]
 800387a:	e0df      	b.n	8003a3c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	4618      	mov	r0, r3
 8003880:	f04f 0100 	mov.w	r1, #0
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	020b      	lsls	r3, r1, #8
 800388e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003892:	0202      	lsls	r2, r0, #8
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	6849      	ldr	r1, [r1, #4]
 8003898:	0849      	lsrs	r1, r1, #1
 800389a:	4608      	mov	r0, r1
 800389c:	f04f 0100 	mov.w	r1, #0
 80038a0:	1814      	adds	r4, r2, r0
 80038a2:	eb43 0501 	adc.w	r5, r3, r1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	4620      	mov	r0, r4
 80038b2:	4629      	mov	r1, r5
 80038b4:	f7fc fce4 	bl	8000280 <__aeabi_uldivmod>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4613      	mov	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038c6:	d308      	bcc.n	80038da <UART_SetConfig+0x396>
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ce:	d204      	bcs.n	80038da <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	60da      	str	r2, [r3, #12]
 80038d8:	e0b0      	b.n	8003a3c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	76bb      	strb	r3, [r7, #26]
 80038de:	e0ad      	b.n	8003a3c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e8:	d15c      	bne.n	80039a4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80038ea:	7efb      	ldrb	r3, [r7, #27]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d828      	bhi.n	8003942 <UART_SetConfig+0x3fe>
 80038f0:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <UART_SetConfig+0x3b4>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	0800391d 	.word	0x0800391d
 80038fc:	08003925 	.word	0x08003925
 8003900:	0800392d 	.word	0x0800392d
 8003904:	08003943 	.word	0x08003943
 8003908:	08003933 	.word	0x08003933
 800390c:	08003943 	.word	0x08003943
 8003910:	08003943 	.word	0x08003943
 8003914:	08003943 	.word	0x08003943
 8003918:	0800393b 	.word	0x0800393b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800391c:	f7fe ffe8 	bl	80028f0 <HAL_RCC_GetPCLK1Freq>
 8003920:	6178      	str	r0, [r7, #20]
        break;
 8003922:	e013      	b.n	800394c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003924:	f7fe fffa 	bl	800291c <HAL_RCC_GetPCLK2Freq>
 8003928:	6178      	str	r0, [r7, #20]
        break;
 800392a:	e00f      	b.n	800394c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800392c:	4b49      	ldr	r3, [pc, #292]	; (8003a54 <UART_SetConfig+0x510>)
 800392e:	617b      	str	r3, [r7, #20]
        break;
 8003930:	e00c      	b.n	800394c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003932:	f7fe ff45 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8003936:	6178      	str	r0, [r7, #20]
        break;
 8003938:	e008      	b.n	800394c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800393e:	617b      	str	r3, [r7, #20]
        break;
 8003940:	e004      	b.n	800394c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	76bb      	strb	r3, [r7, #26]
        break;
 800394a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d074      	beq.n	8003a3c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	005a      	lsls	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	085b      	lsrs	r3, r3, #1
 800395c:	441a      	add	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	fbb2 f3f3 	udiv	r3, r2, r3
 8003966:	b29b      	uxth	r3, r3
 8003968:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b0f      	cmp	r3, #15
 800396e:	d916      	bls.n	800399e <UART_SetConfig+0x45a>
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003976:	d212      	bcs.n	800399e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	b29b      	uxth	r3, r3
 800397c:	f023 030f 	bic.w	r3, r3, #15
 8003980:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	085b      	lsrs	r3, r3, #1
 8003986:	b29b      	uxth	r3, r3
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	b29a      	uxth	r2, r3
 800398e:	89fb      	ldrh	r3, [r7, #14]
 8003990:	4313      	orrs	r3, r2
 8003992:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	89fa      	ldrh	r2, [r7, #14]
 800399a:	60da      	str	r2, [r3, #12]
 800399c:	e04e      	b.n	8003a3c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	76bb      	strb	r3, [r7, #26]
 80039a2:	e04b      	b.n	8003a3c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039a4:	7efb      	ldrb	r3, [r7, #27]
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d827      	bhi.n	80039fa <UART_SetConfig+0x4b6>
 80039aa:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <UART_SetConfig+0x46c>)
 80039ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b0:	080039d5 	.word	0x080039d5
 80039b4:	080039dd 	.word	0x080039dd
 80039b8:	080039e5 	.word	0x080039e5
 80039bc:	080039fb 	.word	0x080039fb
 80039c0:	080039eb 	.word	0x080039eb
 80039c4:	080039fb 	.word	0x080039fb
 80039c8:	080039fb 	.word	0x080039fb
 80039cc:	080039fb 	.word	0x080039fb
 80039d0:	080039f3 	.word	0x080039f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d4:	f7fe ff8c 	bl	80028f0 <HAL_RCC_GetPCLK1Freq>
 80039d8:	6178      	str	r0, [r7, #20]
        break;
 80039da:	e013      	b.n	8003a04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039dc:	f7fe ff9e 	bl	800291c <HAL_RCC_GetPCLK2Freq>
 80039e0:	6178      	str	r0, [r7, #20]
        break;
 80039e2:	e00f      	b.n	8003a04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e4:	4b1b      	ldr	r3, [pc, #108]	; (8003a54 <UART_SetConfig+0x510>)
 80039e6:	617b      	str	r3, [r7, #20]
        break;
 80039e8:	e00c      	b.n	8003a04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ea:	f7fe fee9 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 80039ee:	6178      	str	r0, [r7, #20]
        break;
 80039f0:	e008      	b.n	8003a04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f6:	617b      	str	r3, [r7, #20]
        break;
 80039f8:	e004      	b.n	8003a04 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	76bb      	strb	r3, [r7, #26]
        break;
 8003a02:	bf00      	nop
    }

    if (pclk != 0U)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d018      	beq.n	8003a3c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	085a      	lsrs	r2, r3, #1
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b0f      	cmp	r3, #15
 8003a24:	d908      	bls.n	8003a38 <UART_SetConfig+0x4f4>
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2c:	d204      	bcs.n	8003a38 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	60da      	str	r2, [r3, #12]
 8003a36:	e001      	b.n	8003a3c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a48:	7ebb      	ldrb	r3, [r7, #26]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bdb0      	pop	{r4, r5, r7, pc}
 8003a52:	bf00      	nop
 8003a54:	00f42400 	.word	0x00f42400

08003a58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01a      	beq.n	8003b6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b56:	d10a      	bne.n	8003b6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	605a      	str	r2, [r3, #4]
  }
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bac:	f7fd f912 	bl	8000dd4 <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d10e      	bne.n	8003bde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f82d 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e023      	b.n	8003c26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d10e      	bne.n	8003c0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f817 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e00d      	b.n	8003c26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2220      	movs	r2, #32
 8003c14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3e:	e05e      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d05a      	beq.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c48:	f7fd f8c4 	bl	8000dd4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d302      	bcc.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d11b      	bne.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c6c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0201 	bic.w	r2, r2, #1
 8003c7c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e043      	b.n	8003d1e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d02c      	beq.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb2:	d124      	bne.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cbc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ccc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e00f      	b.n	8003d1e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2301      	moveq	r3, #1
 8003d10:	2300      	movne	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d091      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <__errno>:
 8003d28:	4b01      	ldr	r3, [pc, #4]	; (8003d30 <__errno+0x8>)
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	2000000c 	.word	0x2000000c

08003d34 <__libc_init_array>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4d0d      	ldr	r5, [pc, #52]	; (8003d6c <__libc_init_array+0x38>)
 8003d38:	4c0d      	ldr	r4, [pc, #52]	; (8003d70 <__libc_init_array+0x3c>)
 8003d3a:	1b64      	subs	r4, r4, r5
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	2600      	movs	r6, #0
 8003d40:	42a6      	cmp	r6, r4
 8003d42:	d109      	bne.n	8003d58 <__libc_init_array+0x24>
 8003d44:	4d0b      	ldr	r5, [pc, #44]	; (8003d74 <__libc_init_array+0x40>)
 8003d46:	4c0c      	ldr	r4, [pc, #48]	; (8003d78 <__libc_init_array+0x44>)
 8003d48:	f000 fc4e 	bl	80045e8 <_init>
 8003d4c:	1b64      	subs	r4, r4, r5
 8003d4e:	10a4      	asrs	r4, r4, #2
 8003d50:	2600      	movs	r6, #0
 8003d52:	42a6      	cmp	r6, r4
 8003d54:	d105      	bne.n	8003d62 <__libc_init_array+0x2e>
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5c:	4798      	blx	r3
 8003d5e:	3601      	adds	r6, #1
 8003d60:	e7ee      	b.n	8003d40 <__libc_init_array+0xc>
 8003d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d66:	4798      	blx	r3
 8003d68:	3601      	adds	r6, #1
 8003d6a:	e7f2      	b.n	8003d52 <__libc_init_array+0x1e>
 8003d6c:	080046b4 	.word	0x080046b4
 8003d70:	080046b4 	.word	0x080046b4
 8003d74:	080046b4 	.word	0x080046b4
 8003d78:	080046b8 	.word	0x080046b8

08003d7c <memset>:
 8003d7c:	4402      	add	r2, r0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d100      	bne.n	8003d86 <memset+0xa>
 8003d84:	4770      	bx	lr
 8003d86:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8a:	e7f9      	b.n	8003d80 <memset+0x4>

08003d8c <siprintf>:
 8003d8c:	b40e      	push	{r1, r2, r3}
 8003d8e:	b500      	push	{lr}
 8003d90:	b09c      	sub	sp, #112	; 0x70
 8003d92:	ab1d      	add	r3, sp, #116	; 0x74
 8003d94:	9002      	str	r0, [sp, #8]
 8003d96:	9006      	str	r0, [sp, #24]
 8003d98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d9c:	4809      	ldr	r0, [pc, #36]	; (8003dc4 <siprintf+0x38>)
 8003d9e:	9107      	str	r1, [sp, #28]
 8003da0:	9104      	str	r1, [sp, #16]
 8003da2:	4909      	ldr	r1, [pc, #36]	; (8003dc8 <siprintf+0x3c>)
 8003da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003da8:	9105      	str	r1, [sp, #20]
 8003daa:	6800      	ldr	r0, [r0, #0]
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	a902      	add	r1, sp, #8
 8003db0:	f000 f868 	bl	8003e84 <_svfiprintf_r>
 8003db4:	9b02      	ldr	r3, [sp, #8]
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	b01c      	add	sp, #112	; 0x70
 8003dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dc0:	b003      	add	sp, #12
 8003dc2:	4770      	bx	lr
 8003dc4:	2000000c 	.word	0x2000000c
 8003dc8:	ffff0208 	.word	0xffff0208

08003dcc <__ssputs_r>:
 8003dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd0:	688e      	ldr	r6, [r1, #8]
 8003dd2:	429e      	cmp	r6, r3
 8003dd4:	4682      	mov	sl, r0
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	4690      	mov	r8, r2
 8003dda:	461f      	mov	r7, r3
 8003ddc:	d838      	bhi.n	8003e50 <__ssputs_r+0x84>
 8003dde:	898a      	ldrh	r2, [r1, #12]
 8003de0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003de4:	d032      	beq.n	8003e4c <__ssputs_r+0x80>
 8003de6:	6825      	ldr	r5, [r4, #0]
 8003de8:	6909      	ldr	r1, [r1, #16]
 8003dea:	eba5 0901 	sub.w	r9, r5, r1
 8003dee:	6965      	ldr	r5, [r4, #20]
 8003df0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003df4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003df8:	3301      	adds	r3, #1
 8003dfa:	444b      	add	r3, r9
 8003dfc:	106d      	asrs	r5, r5, #1
 8003dfe:	429d      	cmp	r5, r3
 8003e00:	bf38      	it	cc
 8003e02:	461d      	movcc	r5, r3
 8003e04:	0553      	lsls	r3, r2, #21
 8003e06:	d531      	bpl.n	8003e6c <__ssputs_r+0xa0>
 8003e08:	4629      	mov	r1, r5
 8003e0a:	f000 fb47 	bl	800449c <_malloc_r>
 8003e0e:	4606      	mov	r6, r0
 8003e10:	b950      	cbnz	r0, 8003e28 <__ssputs_r+0x5c>
 8003e12:	230c      	movs	r3, #12
 8003e14:	f8ca 3000 	str.w	r3, [sl]
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e1e:	81a3      	strh	r3, [r4, #12]
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e28:	6921      	ldr	r1, [r4, #16]
 8003e2a:	464a      	mov	r2, r9
 8003e2c:	f000 fabe 	bl	80043ac <memcpy>
 8003e30:	89a3      	ldrh	r3, [r4, #12]
 8003e32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3a:	81a3      	strh	r3, [r4, #12]
 8003e3c:	6126      	str	r6, [r4, #16]
 8003e3e:	6165      	str	r5, [r4, #20]
 8003e40:	444e      	add	r6, r9
 8003e42:	eba5 0509 	sub.w	r5, r5, r9
 8003e46:	6026      	str	r6, [r4, #0]
 8003e48:	60a5      	str	r5, [r4, #8]
 8003e4a:	463e      	mov	r6, r7
 8003e4c:	42be      	cmp	r6, r7
 8003e4e:	d900      	bls.n	8003e52 <__ssputs_r+0x86>
 8003e50:	463e      	mov	r6, r7
 8003e52:	4632      	mov	r2, r6
 8003e54:	6820      	ldr	r0, [r4, #0]
 8003e56:	4641      	mov	r1, r8
 8003e58:	f000 fab6 	bl	80043c8 <memmove>
 8003e5c:	68a3      	ldr	r3, [r4, #8]
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	1b9b      	subs	r3, r3, r6
 8003e62:	4432      	add	r2, r6
 8003e64:	60a3      	str	r3, [r4, #8]
 8003e66:	6022      	str	r2, [r4, #0]
 8003e68:	2000      	movs	r0, #0
 8003e6a:	e7db      	b.n	8003e24 <__ssputs_r+0x58>
 8003e6c:	462a      	mov	r2, r5
 8003e6e:	f000 fb6f 	bl	8004550 <_realloc_r>
 8003e72:	4606      	mov	r6, r0
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d1e1      	bne.n	8003e3c <__ssputs_r+0x70>
 8003e78:	6921      	ldr	r1, [r4, #16]
 8003e7a:	4650      	mov	r0, sl
 8003e7c:	f000 fabe 	bl	80043fc <_free_r>
 8003e80:	e7c7      	b.n	8003e12 <__ssputs_r+0x46>
	...

08003e84 <_svfiprintf_r>:
 8003e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e88:	4698      	mov	r8, r3
 8003e8a:	898b      	ldrh	r3, [r1, #12]
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	b09d      	sub	sp, #116	; 0x74
 8003e90:	4607      	mov	r7, r0
 8003e92:	460d      	mov	r5, r1
 8003e94:	4614      	mov	r4, r2
 8003e96:	d50e      	bpl.n	8003eb6 <_svfiprintf_r+0x32>
 8003e98:	690b      	ldr	r3, [r1, #16]
 8003e9a:	b963      	cbnz	r3, 8003eb6 <_svfiprintf_r+0x32>
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	f000 fafd 	bl	800449c <_malloc_r>
 8003ea2:	6028      	str	r0, [r5, #0]
 8003ea4:	6128      	str	r0, [r5, #16]
 8003ea6:	b920      	cbnz	r0, 8003eb2 <_svfiprintf_r+0x2e>
 8003ea8:	230c      	movs	r3, #12
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	e0d1      	b.n	8004056 <_svfiprintf_r+0x1d2>
 8003eb2:	2340      	movs	r3, #64	; 0x40
 8003eb4:	616b      	str	r3, [r5, #20]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eba:	2320      	movs	r3, #32
 8003ebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ec4:	2330      	movs	r3, #48	; 0x30
 8003ec6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004070 <_svfiprintf_r+0x1ec>
 8003eca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ece:	f04f 0901 	mov.w	r9, #1
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	469a      	mov	sl, r3
 8003ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eda:	b10a      	cbz	r2, 8003ee0 <_svfiprintf_r+0x5c>
 8003edc:	2a25      	cmp	r2, #37	; 0x25
 8003ede:	d1f9      	bne.n	8003ed4 <_svfiprintf_r+0x50>
 8003ee0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ee4:	d00b      	beq.n	8003efe <_svfiprintf_r+0x7a>
 8003ee6:	465b      	mov	r3, fp
 8003ee8:	4622      	mov	r2, r4
 8003eea:	4629      	mov	r1, r5
 8003eec:	4638      	mov	r0, r7
 8003eee:	f7ff ff6d 	bl	8003dcc <__ssputs_r>
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	f000 80aa 	beq.w	800404c <_svfiprintf_r+0x1c8>
 8003ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003efa:	445a      	add	r2, fp
 8003efc:	9209      	str	r2, [sp, #36]	; 0x24
 8003efe:	f89a 3000 	ldrb.w	r3, [sl]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80a2 	beq.w	800404c <_svfiprintf_r+0x1c8>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f12:	f10a 0a01 	add.w	sl, sl, #1
 8003f16:	9304      	str	r3, [sp, #16]
 8003f18:	9307      	str	r3, [sp, #28]
 8003f1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f1e:	931a      	str	r3, [sp, #104]	; 0x68
 8003f20:	4654      	mov	r4, sl
 8003f22:	2205      	movs	r2, #5
 8003f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f28:	4851      	ldr	r0, [pc, #324]	; (8004070 <_svfiprintf_r+0x1ec>)
 8003f2a:	f7fc f959 	bl	80001e0 <memchr>
 8003f2e:	9a04      	ldr	r2, [sp, #16]
 8003f30:	b9d8      	cbnz	r0, 8003f6a <_svfiprintf_r+0xe6>
 8003f32:	06d0      	lsls	r0, r2, #27
 8003f34:	bf44      	itt	mi
 8003f36:	2320      	movmi	r3, #32
 8003f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f3c:	0711      	lsls	r1, r2, #28
 8003f3e:	bf44      	itt	mi
 8003f40:	232b      	movmi	r3, #43	; 0x2b
 8003f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f46:	f89a 3000 	ldrb.w	r3, [sl]
 8003f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f4c:	d015      	beq.n	8003f7a <_svfiprintf_r+0xf6>
 8003f4e:	9a07      	ldr	r2, [sp, #28]
 8003f50:	4654      	mov	r4, sl
 8003f52:	2000      	movs	r0, #0
 8003f54:	f04f 0c0a 	mov.w	ip, #10
 8003f58:	4621      	mov	r1, r4
 8003f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f5e:	3b30      	subs	r3, #48	; 0x30
 8003f60:	2b09      	cmp	r3, #9
 8003f62:	d94e      	bls.n	8004002 <_svfiprintf_r+0x17e>
 8003f64:	b1b0      	cbz	r0, 8003f94 <_svfiprintf_r+0x110>
 8003f66:	9207      	str	r2, [sp, #28]
 8003f68:	e014      	b.n	8003f94 <_svfiprintf_r+0x110>
 8003f6a:	eba0 0308 	sub.w	r3, r0, r8
 8003f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f72:	4313      	orrs	r3, r2
 8003f74:	9304      	str	r3, [sp, #16]
 8003f76:	46a2      	mov	sl, r4
 8003f78:	e7d2      	b.n	8003f20 <_svfiprintf_r+0x9c>
 8003f7a:	9b03      	ldr	r3, [sp, #12]
 8003f7c:	1d19      	adds	r1, r3, #4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	9103      	str	r1, [sp, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bfbb      	ittet	lt
 8003f86:	425b      	neglt	r3, r3
 8003f88:	f042 0202 	orrlt.w	r2, r2, #2
 8003f8c:	9307      	strge	r3, [sp, #28]
 8003f8e:	9307      	strlt	r3, [sp, #28]
 8003f90:	bfb8      	it	lt
 8003f92:	9204      	strlt	r2, [sp, #16]
 8003f94:	7823      	ldrb	r3, [r4, #0]
 8003f96:	2b2e      	cmp	r3, #46	; 0x2e
 8003f98:	d10c      	bne.n	8003fb4 <_svfiprintf_r+0x130>
 8003f9a:	7863      	ldrb	r3, [r4, #1]
 8003f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9e:	d135      	bne.n	800400c <_svfiprintf_r+0x188>
 8003fa0:	9b03      	ldr	r3, [sp, #12]
 8003fa2:	1d1a      	adds	r2, r3, #4
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	9203      	str	r2, [sp, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bfb8      	it	lt
 8003fac:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fb0:	3402      	adds	r4, #2
 8003fb2:	9305      	str	r3, [sp, #20]
 8003fb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004080 <_svfiprintf_r+0x1fc>
 8003fb8:	7821      	ldrb	r1, [r4, #0]
 8003fba:	2203      	movs	r2, #3
 8003fbc:	4650      	mov	r0, sl
 8003fbe:	f7fc f90f 	bl	80001e0 <memchr>
 8003fc2:	b140      	cbz	r0, 8003fd6 <_svfiprintf_r+0x152>
 8003fc4:	2340      	movs	r3, #64	; 0x40
 8003fc6:	eba0 000a 	sub.w	r0, r0, sl
 8003fca:	fa03 f000 	lsl.w	r0, r3, r0
 8003fce:	9b04      	ldr	r3, [sp, #16]
 8003fd0:	4303      	orrs	r3, r0
 8003fd2:	3401      	adds	r4, #1
 8003fd4:	9304      	str	r3, [sp, #16]
 8003fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fda:	4826      	ldr	r0, [pc, #152]	; (8004074 <_svfiprintf_r+0x1f0>)
 8003fdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fe0:	2206      	movs	r2, #6
 8003fe2:	f7fc f8fd 	bl	80001e0 <memchr>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d038      	beq.n	800405c <_svfiprintf_r+0x1d8>
 8003fea:	4b23      	ldr	r3, [pc, #140]	; (8004078 <_svfiprintf_r+0x1f4>)
 8003fec:	bb1b      	cbnz	r3, 8004036 <_svfiprintf_r+0x1b2>
 8003fee:	9b03      	ldr	r3, [sp, #12]
 8003ff0:	3307      	adds	r3, #7
 8003ff2:	f023 0307 	bic.w	r3, r3, #7
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	9303      	str	r3, [sp, #12]
 8003ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ffc:	4433      	add	r3, r6
 8003ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8004000:	e767      	b.n	8003ed2 <_svfiprintf_r+0x4e>
 8004002:	fb0c 3202 	mla	r2, ip, r2, r3
 8004006:	460c      	mov	r4, r1
 8004008:	2001      	movs	r0, #1
 800400a:	e7a5      	b.n	8003f58 <_svfiprintf_r+0xd4>
 800400c:	2300      	movs	r3, #0
 800400e:	3401      	adds	r4, #1
 8004010:	9305      	str	r3, [sp, #20]
 8004012:	4619      	mov	r1, r3
 8004014:	f04f 0c0a 	mov.w	ip, #10
 8004018:	4620      	mov	r0, r4
 800401a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800401e:	3a30      	subs	r2, #48	; 0x30
 8004020:	2a09      	cmp	r2, #9
 8004022:	d903      	bls.n	800402c <_svfiprintf_r+0x1a8>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0c5      	beq.n	8003fb4 <_svfiprintf_r+0x130>
 8004028:	9105      	str	r1, [sp, #20]
 800402a:	e7c3      	b.n	8003fb4 <_svfiprintf_r+0x130>
 800402c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004030:	4604      	mov	r4, r0
 8004032:	2301      	movs	r3, #1
 8004034:	e7f0      	b.n	8004018 <_svfiprintf_r+0x194>
 8004036:	ab03      	add	r3, sp, #12
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	462a      	mov	r2, r5
 800403c:	4b0f      	ldr	r3, [pc, #60]	; (800407c <_svfiprintf_r+0x1f8>)
 800403e:	a904      	add	r1, sp, #16
 8004040:	4638      	mov	r0, r7
 8004042:	f3af 8000 	nop.w
 8004046:	1c42      	adds	r2, r0, #1
 8004048:	4606      	mov	r6, r0
 800404a:	d1d6      	bne.n	8003ffa <_svfiprintf_r+0x176>
 800404c:	89ab      	ldrh	r3, [r5, #12]
 800404e:	065b      	lsls	r3, r3, #25
 8004050:	f53f af2c 	bmi.w	8003eac <_svfiprintf_r+0x28>
 8004054:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004056:	b01d      	add	sp, #116	; 0x74
 8004058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405c:	ab03      	add	r3, sp, #12
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	462a      	mov	r2, r5
 8004062:	4b06      	ldr	r3, [pc, #24]	; (800407c <_svfiprintf_r+0x1f8>)
 8004064:	a904      	add	r1, sp, #16
 8004066:	4638      	mov	r0, r7
 8004068:	f000 f87a 	bl	8004160 <_printf_i>
 800406c:	e7eb      	b.n	8004046 <_svfiprintf_r+0x1c2>
 800406e:	bf00      	nop
 8004070:	08004678 	.word	0x08004678
 8004074:	08004682 	.word	0x08004682
 8004078:	00000000 	.word	0x00000000
 800407c:	08003dcd 	.word	0x08003dcd
 8004080:	0800467e 	.word	0x0800467e

08004084 <_printf_common>:
 8004084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004088:	4616      	mov	r6, r2
 800408a:	4699      	mov	r9, r3
 800408c:	688a      	ldr	r2, [r1, #8]
 800408e:	690b      	ldr	r3, [r1, #16]
 8004090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004094:	4293      	cmp	r3, r2
 8004096:	bfb8      	it	lt
 8004098:	4613      	movlt	r3, r2
 800409a:	6033      	str	r3, [r6, #0]
 800409c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040a0:	4607      	mov	r7, r0
 80040a2:	460c      	mov	r4, r1
 80040a4:	b10a      	cbz	r2, 80040aa <_printf_common+0x26>
 80040a6:	3301      	adds	r3, #1
 80040a8:	6033      	str	r3, [r6, #0]
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	0699      	lsls	r1, r3, #26
 80040ae:	bf42      	ittt	mi
 80040b0:	6833      	ldrmi	r3, [r6, #0]
 80040b2:	3302      	addmi	r3, #2
 80040b4:	6033      	strmi	r3, [r6, #0]
 80040b6:	6825      	ldr	r5, [r4, #0]
 80040b8:	f015 0506 	ands.w	r5, r5, #6
 80040bc:	d106      	bne.n	80040cc <_printf_common+0x48>
 80040be:	f104 0a19 	add.w	sl, r4, #25
 80040c2:	68e3      	ldr	r3, [r4, #12]
 80040c4:	6832      	ldr	r2, [r6, #0]
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	42ab      	cmp	r3, r5
 80040ca:	dc26      	bgt.n	800411a <_printf_common+0x96>
 80040cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040d0:	1e13      	subs	r3, r2, #0
 80040d2:	6822      	ldr	r2, [r4, #0]
 80040d4:	bf18      	it	ne
 80040d6:	2301      	movne	r3, #1
 80040d8:	0692      	lsls	r2, r2, #26
 80040da:	d42b      	bmi.n	8004134 <_printf_common+0xb0>
 80040dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040e0:	4649      	mov	r1, r9
 80040e2:	4638      	mov	r0, r7
 80040e4:	47c0      	blx	r8
 80040e6:	3001      	adds	r0, #1
 80040e8:	d01e      	beq.n	8004128 <_printf_common+0xa4>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	68e5      	ldr	r5, [r4, #12]
 80040ee:	6832      	ldr	r2, [r6, #0]
 80040f0:	f003 0306 	and.w	r3, r3, #6
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	bf08      	it	eq
 80040f8:	1aad      	subeq	r5, r5, r2
 80040fa:	68a3      	ldr	r3, [r4, #8]
 80040fc:	6922      	ldr	r2, [r4, #16]
 80040fe:	bf0c      	ite	eq
 8004100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004104:	2500      	movne	r5, #0
 8004106:	4293      	cmp	r3, r2
 8004108:	bfc4      	itt	gt
 800410a:	1a9b      	subgt	r3, r3, r2
 800410c:	18ed      	addgt	r5, r5, r3
 800410e:	2600      	movs	r6, #0
 8004110:	341a      	adds	r4, #26
 8004112:	42b5      	cmp	r5, r6
 8004114:	d11a      	bne.n	800414c <_printf_common+0xc8>
 8004116:	2000      	movs	r0, #0
 8004118:	e008      	b.n	800412c <_printf_common+0xa8>
 800411a:	2301      	movs	r3, #1
 800411c:	4652      	mov	r2, sl
 800411e:	4649      	mov	r1, r9
 8004120:	4638      	mov	r0, r7
 8004122:	47c0      	blx	r8
 8004124:	3001      	adds	r0, #1
 8004126:	d103      	bne.n	8004130 <_printf_common+0xac>
 8004128:	f04f 30ff 	mov.w	r0, #4294967295
 800412c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004130:	3501      	adds	r5, #1
 8004132:	e7c6      	b.n	80040c2 <_printf_common+0x3e>
 8004134:	18e1      	adds	r1, r4, r3
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	2030      	movs	r0, #48	; 0x30
 800413a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800413e:	4422      	add	r2, r4
 8004140:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004144:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004148:	3302      	adds	r3, #2
 800414a:	e7c7      	b.n	80040dc <_printf_common+0x58>
 800414c:	2301      	movs	r3, #1
 800414e:	4622      	mov	r2, r4
 8004150:	4649      	mov	r1, r9
 8004152:	4638      	mov	r0, r7
 8004154:	47c0      	blx	r8
 8004156:	3001      	adds	r0, #1
 8004158:	d0e6      	beq.n	8004128 <_printf_common+0xa4>
 800415a:	3601      	adds	r6, #1
 800415c:	e7d9      	b.n	8004112 <_printf_common+0x8e>
	...

08004160 <_printf_i>:
 8004160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004164:	460c      	mov	r4, r1
 8004166:	4691      	mov	r9, r2
 8004168:	7e27      	ldrb	r7, [r4, #24]
 800416a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800416c:	2f78      	cmp	r7, #120	; 0x78
 800416e:	4680      	mov	r8, r0
 8004170:	469a      	mov	sl, r3
 8004172:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004176:	d807      	bhi.n	8004188 <_printf_i+0x28>
 8004178:	2f62      	cmp	r7, #98	; 0x62
 800417a:	d80a      	bhi.n	8004192 <_printf_i+0x32>
 800417c:	2f00      	cmp	r7, #0
 800417e:	f000 80d8 	beq.w	8004332 <_printf_i+0x1d2>
 8004182:	2f58      	cmp	r7, #88	; 0x58
 8004184:	f000 80a3 	beq.w	80042ce <_printf_i+0x16e>
 8004188:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800418c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004190:	e03a      	b.n	8004208 <_printf_i+0xa8>
 8004192:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004196:	2b15      	cmp	r3, #21
 8004198:	d8f6      	bhi.n	8004188 <_printf_i+0x28>
 800419a:	a001      	add	r0, pc, #4	; (adr r0, 80041a0 <_printf_i+0x40>)
 800419c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041a0:	080041f9 	.word	0x080041f9
 80041a4:	0800420d 	.word	0x0800420d
 80041a8:	08004189 	.word	0x08004189
 80041ac:	08004189 	.word	0x08004189
 80041b0:	08004189 	.word	0x08004189
 80041b4:	08004189 	.word	0x08004189
 80041b8:	0800420d 	.word	0x0800420d
 80041bc:	08004189 	.word	0x08004189
 80041c0:	08004189 	.word	0x08004189
 80041c4:	08004189 	.word	0x08004189
 80041c8:	08004189 	.word	0x08004189
 80041cc:	08004319 	.word	0x08004319
 80041d0:	0800423d 	.word	0x0800423d
 80041d4:	080042fb 	.word	0x080042fb
 80041d8:	08004189 	.word	0x08004189
 80041dc:	08004189 	.word	0x08004189
 80041e0:	0800433b 	.word	0x0800433b
 80041e4:	08004189 	.word	0x08004189
 80041e8:	0800423d 	.word	0x0800423d
 80041ec:	08004189 	.word	0x08004189
 80041f0:	08004189 	.word	0x08004189
 80041f4:	08004303 	.word	0x08004303
 80041f8:	680b      	ldr	r3, [r1, #0]
 80041fa:	1d1a      	adds	r2, r3, #4
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	600a      	str	r2, [r1, #0]
 8004200:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004208:	2301      	movs	r3, #1
 800420a:	e0a3      	b.n	8004354 <_printf_i+0x1f4>
 800420c:	6825      	ldr	r5, [r4, #0]
 800420e:	6808      	ldr	r0, [r1, #0]
 8004210:	062e      	lsls	r6, r5, #24
 8004212:	f100 0304 	add.w	r3, r0, #4
 8004216:	d50a      	bpl.n	800422e <_printf_i+0xce>
 8004218:	6805      	ldr	r5, [r0, #0]
 800421a:	600b      	str	r3, [r1, #0]
 800421c:	2d00      	cmp	r5, #0
 800421e:	da03      	bge.n	8004228 <_printf_i+0xc8>
 8004220:	232d      	movs	r3, #45	; 0x2d
 8004222:	426d      	negs	r5, r5
 8004224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004228:	485e      	ldr	r0, [pc, #376]	; (80043a4 <_printf_i+0x244>)
 800422a:	230a      	movs	r3, #10
 800422c:	e019      	b.n	8004262 <_printf_i+0x102>
 800422e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004232:	6805      	ldr	r5, [r0, #0]
 8004234:	600b      	str	r3, [r1, #0]
 8004236:	bf18      	it	ne
 8004238:	b22d      	sxthne	r5, r5
 800423a:	e7ef      	b.n	800421c <_printf_i+0xbc>
 800423c:	680b      	ldr	r3, [r1, #0]
 800423e:	6825      	ldr	r5, [r4, #0]
 8004240:	1d18      	adds	r0, r3, #4
 8004242:	6008      	str	r0, [r1, #0]
 8004244:	0628      	lsls	r0, r5, #24
 8004246:	d501      	bpl.n	800424c <_printf_i+0xec>
 8004248:	681d      	ldr	r5, [r3, #0]
 800424a:	e002      	b.n	8004252 <_printf_i+0xf2>
 800424c:	0669      	lsls	r1, r5, #25
 800424e:	d5fb      	bpl.n	8004248 <_printf_i+0xe8>
 8004250:	881d      	ldrh	r5, [r3, #0]
 8004252:	4854      	ldr	r0, [pc, #336]	; (80043a4 <_printf_i+0x244>)
 8004254:	2f6f      	cmp	r7, #111	; 0x6f
 8004256:	bf0c      	ite	eq
 8004258:	2308      	moveq	r3, #8
 800425a:	230a      	movne	r3, #10
 800425c:	2100      	movs	r1, #0
 800425e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004262:	6866      	ldr	r6, [r4, #4]
 8004264:	60a6      	str	r6, [r4, #8]
 8004266:	2e00      	cmp	r6, #0
 8004268:	bfa2      	ittt	ge
 800426a:	6821      	ldrge	r1, [r4, #0]
 800426c:	f021 0104 	bicge.w	r1, r1, #4
 8004270:	6021      	strge	r1, [r4, #0]
 8004272:	b90d      	cbnz	r5, 8004278 <_printf_i+0x118>
 8004274:	2e00      	cmp	r6, #0
 8004276:	d04d      	beq.n	8004314 <_printf_i+0x1b4>
 8004278:	4616      	mov	r6, r2
 800427a:	fbb5 f1f3 	udiv	r1, r5, r3
 800427e:	fb03 5711 	mls	r7, r3, r1, r5
 8004282:	5dc7      	ldrb	r7, [r0, r7]
 8004284:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004288:	462f      	mov	r7, r5
 800428a:	42bb      	cmp	r3, r7
 800428c:	460d      	mov	r5, r1
 800428e:	d9f4      	bls.n	800427a <_printf_i+0x11a>
 8004290:	2b08      	cmp	r3, #8
 8004292:	d10b      	bne.n	80042ac <_printf_i+0x14c>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	07df      	lsls	r7, r3, #31
 8004298:	d508      	bpl.n	80042ac <_printf_i+0x14c>
 800429a:	6923      	ldr	r3, [r4, #16]
 800429c:	6861      	ldr	r1, [r4, #4]
 800429e:	4299      	cmp	r1, r3
 80042a0:	bfde      	ittt	le
 80042a2:	2330      	movle	r3, #48	; 0x30
 80042a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042ac:	1b92      	subs	r2, r2, r6
 80042ae:	6122      	str	r2, [r4, #16]
 80042b0:	f8cd a000 	str.w	sl, [sp]
 80042b4:	464b      	mov	r3, r9
 80042b6:	aa03      	add	r2, sp, #12
 80042b8:	4621      	mov	r1, r4
 80042ba:	4640      	mov	r0, r8
 80042bc:	f7ff fee2 	bl	8004084 <_printf_common>
 80042c0:	3001      	adds	r0, #1
 80042c2:	d14c      	bne.n	800435e <_printf_i+0x1fe>
 80042c4:	f04f 30ff 	mov.w	r0, #4294967295
 80042c8:	b004      	add	sp, #16
 80042ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ce:	4835      	ldr	r0, [pc, #212]	; (80043a4 <_printf_i+0x244>)
 80042d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	680e      	ldr	r6, [r1, #0]
 80042d8:	061f      	lsls	r7, r3, #24
 80042da:	f856 5b04 	ldr.w	r5, [r6], #4
 80042de:	600e      	str	r6, [r1, #0]
 80042e0:	d514      	bpl.n	800430c <_printf_i+0x1ac>
 80042e2:	07d9      	lsls	r1, r3, #31
 80042e4:	bf44      	itt	mi
 80042e6:	f043 0320 	orrmi.w	r3, r3, #32
 80042ea:	6023      	strmi	r3, [r4, #0]
 80042ec:	b91d      	cbnz	r5, 80042f6 <_printf_i+0x196>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	f023 0320 	bic.w	r3, r3, #32
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	2310      	movs	r3, #16
 80042f8:	e7b0      	b.n	800425c <_printf_i+0xfc>
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	f043 0320 	orr.w	r3, r3, #32
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	2378      	movs	r3, #120	; 0x78
 8004304:	4828      	ldr	r0, [pc, #160]	; (80043a8 <_printf_i+0x248>)
 8004306:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800430a:	e7e3      	b.n	80042d4 <_printf_i+0x174>
 800430c:	065e      	lsls	r6, r3, #25
 800430e:	bf48      	it	mi
 8004310:	b2ad      	uxthmi	r5, r5
 8004312:	e7e6      	b.n	80042e2 <_printf_i+0x182>
 8004314:	4616      	mov	r6, r2
 8004316:	e7bb      	b.n	8004290 <_printf_i+0x130>
 8004318:	680b      	ldr	r3, [r1, #0]
 800431a:	6826      	ldr	r6, [r4, #0]
 800431c:	6960      	ldr	r0, [r4, #20]
 800431e:	1d1d      	adds	r5, r3, #4
 8004320:	600d      	str	r5, [r1, #0]
 8004322:	0635      	lsls	r5, r6, #24
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	d501      	bpl.n	800432c <_printf_i+0x1cc>
 8004328:	6018      	str	r0, [r3, #0]
 800432a:	e002      	b.n	8004332 <_printf_i+0x1d2>
 800432c:	0671      	lsls	r1, r6, #25
 800432e:	d5fb      	bpl.n	8004328 <_printf_i+0x1c8>
 8004330:	8018      	strh	r0, [r3, #0]
 8004332:	2300      	movs	r3, #0
 8004334:	6123      	str	r3, [r4, #16]
 8004336:	4616      	mov	r6, r2
 8004338:	e7ba      	b.n	80042b0 <_printf_i+0x150>
 800433a:	680b      	ldr	r3, [r1, #0]
 800433c:	1d1a      	adds	r2, r3, #4
 800433e:	600a      	str	r2, [r1, #0]
 8004340:	681e      	ldr	r6, [r3, #0]
 8004342:	6862      	ldr	r2, [r4, #4]
 8004344:	2100      	movs	r1, #0
 8004346:	4630      	mov	r0, r6
 8004348:	f7fb ff4a 	bl	80001e0 <memchr>
 800434c:	b108      	cbz	r0, 8004352 <_printf_i+0x1f2>
 800434e:	1b80      	subs	r0, r0, r6
 8004350:	6060      	str	r0, [r4, #4]
 8004352:	6863      	ldr	r3, [r4, #4]
 8004354:	6123      	str	r3, [r4, #16]
 8004356:	2300      	movs	r3, #0
 8004358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800435c:	e7a8      	b.n	80042b0 <_printf_i+0x150>
 800435e:	6923      	ldr	r3, [r4, #16]
 8004360:	4632      	mov	r2, r6
 8004362:	4649      	mov	r1, r9
 8004364:	4640      	mov	r0, r8
 8004366:	47d0      	blx	sl
 8004368:	3001      	adds	r0, #1
 800436a:	d0ab      	beq.n	80042c4 <_printf_i+0x164>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	079b      	lsls	r3, r3, #30
 8004370:	d413      	bmi.n	800439a <_printf_i+0x23a>
 8004372:	68e0      	ldr	r0, [r4, #12]
 8004374:	9b03      	ldr	r3, [sp, #12]
 8004376:	4298      	cmp	r0, r3
 8004378:	bfb8      	it	lt
 800437a:	4618      	movlt	r0, r3
 800437c:	e7a4      	b.n	80042c8 <_printf_i+0x168>
 800437e:	2301      	movs	r3, #1
 8004380:	4632      	mov	r2, r6
 8004382:	4649      	mov	r1, r9
 8004384:	4640      	mov	r0, r8
 8004386:	47d0      	blx	sl
 8004388:	3001      	adds	r0, #1
 800438a:	d09b      	beq.n	80042c4 <_printf_i+0x164>
 800438c:	3501      	adds	r5, #1
 800438e:	68e3      	ldr	r3, [r4, #12]
 8004390:	9903      	ldr	r1, [sp, #12]
 8004392:	1a5b      	subs	r3, r3, r1
 8004394:	42ab      	cmp	r3, r5
 8004396:	dcf2      	bgt.n	800437e <_printf_i+0x21e>
 8004398:	e7eb      	b.n	8004372 <_printf_i+0x212>
 800439a:	2500      	movs	r5, #0
 800439c:	f104 0619 	add.w	r6, r4, #25
 80043a0:	e7f5      	b.n	800438e <_printf_i+0x22e>
 80043a2:	bf00      	nop
 80043a4:	08004689 	.word	0x08004689
 80043a8:	0800469a 	.word	0x0800469a

080043ac <memcpy>:
 80043ac:	440a      	add	r2, r1
 80043ae:	4291      	cmp	r1, r2
 80043b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80043b4:	d100      	bne.n	80043b8 <memcpy+0xc>
 80043b6:	4770      	bx	lr
 80043b8:	b510      	push	{r4, lr}
 80043ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043c2:	4291      	cmp	r1, r2
 80043c4:	d1f9      	bne.n	80043ba <memcpy+0xe>
 80043c6:	bd10      	pop	{r4, pc}

080043c8 <memmove>:
 80043c8:	4288      	cmp	r0, r1
 80043ca:	b510      	push	{r4, lr}
 80043cc:	eb01 0402 	add.w	r4, r1, r2
 80043d0:	d902      	bls.n	80043d8 <memmove+0x10>
 80043d2:	4284      	cmp	r4, r0
 80043d4:	4623      	mov	r3, r4
 80043d6:	d807      	bhi.n	80043e8 <memmove+0x20>
 80043d8:	1e43      	subs	r3, r0, #1
 80043da:	42a1      	cmp	r1, r4
 80043dc:	d008      	beq.n	80043f0 <memmove+0x28>
 80043de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043e6:	e7f8      	b.n	80043da <memmove+0x12>
 80043e8:	4402      	add	r2, r0
 80043ea:	4601      	mov	r1, r0
 80043ec:	428a      	cmp	r2, r1
 80043ee:	d100      	bne.n	80043f2 <memmove+0x2a>
 80043f0:	bd10      	pop	{r4, pc}
 80043f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043fa:	e7f7      	b.n	80043ec <memmove+0x24>

080043fc <_free_r>:
 80043fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043fe:	2900      	cmp	r1, #0
 8004400:	d048      	beq.n	8004494 <_free_r+0x98>
 8004402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004406:	9001      	str	r0, [sp, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f1a1 0404 	sub.w	r4, r1, #4
 800440e:	bfb8      	it	lt
 8004410:	18e4      	addlt	r4, r4, r3
 8004412:	f000 f8d3 	bl	80045bc <__malloc_lock>
 8004416:	4a20      	ldr	r2, [pc, #128]	; (8004498 <_free_r+0x9c>)
 8004418:	9801      	ldr	r0, [sp, #4]
 800441a:	6813      	ldr	r3, [r2, #0]
 800441c:	4615      	mov	r5, r2
 800441e:	b933      	cbnz	r3, 800442e <_free_r+0x32>
 8004420:	6063      	str	r3, [r4, #4]
 8004422:	6014      	str	r4, [r2, #0]
 8004424:	b003      	add	sp, #12
 8004426:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800442a:	f000 b8cd 	b.w	80045c8 <__malloc_unlock>
 800442e:	42a3      	cmp	r3, r4
 8004430:	d90b      	bls.n	800444a <_free_r+0x4e>
 8004432:	6821      	ldr	r1, [r4, #0]
 8004434:	1862      	adds	r2, r4, r1
 8004436:	4293      	cmp	r3, r2
 8004438:	bf04      	itt	eq
 800443a:	681a      	ldreq	r2, [r3, #0]
 800443c:	685b      	ldreq	r3, [r3, #4]
 800443e:	6063      	str	r3, [r4, #4]
 8004440:	bf04      	itt	eq
 8004442:	1852      	addeq	r2, r2, r1
 8004444:	6022      	streq	r2, [r4, #0]
 8004446:	602c      	str	r4, [r5, #0]
 8004448:	e7ec      	b.n	8004424 <_free_r+0x28>
 800444a:	461a      	mov	r2, r3
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	b10b      	cbz	r3, 8004454 <_free_r+0x58>
 8004450:	42a3      	cmp	r3, r4
 8004452:	d9fa      	bls.n	800444a <_free_r+0x4e>
 8004454:	6811      	ldr	r1, [r2, #0]
 8004456:	1855      	adds	r5, r2, r1
 8004458:	42a5      	cmp	r5, r4
 800445a:	d10b      	bne.n	8004474 <_free_r+0x78>
 800445c:	6824      	ldr	r4, [r4, #0]
 800445e:	4421      	add	r1, r4
 8004460:	1854      	adds	r4, r2, r1
 8004462:	42a3      	cmp	r3, r4
 8004464:	6011      	str	r1, [r2, #0]
 8004466:	d1dd      	bne.n	8004424 <_free_r+0x28>
 8004468:	681c      	ldr	r4, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	6053      	str	r3, [r2, #4]
 800446e:	4421      	add	r1, r4
 8004470:	6011      	str	r1, [r2, #0]
 8004472:	e7d7      	b.n	8004424 <_free_r+0x28>
 8004474:	d902      	bls.n	800447c <_free_r+0x80>
 8004476:	230c      	movs	r3, #12
 8004478:	6003      	str	r3, [r0, #0]
 800447a:	e7d3      	b.n	8004424 <_free_r+0x28>
 800447c:	6825      	ldr	r5, [r4, #0]
 800447e:	1961      	adds	r1, r4, r5
 8004480:	428b      	cmp	r3, r1
 8004482:	bf04      	itt	eq
 8004484:	6819      	ldreq	r1, [r3, #0]
 8004486:	685b      	ldreq	r3, [r3, #4]
 8004488:	6063      	str	r3, [r4, #4]
 800448a:	bf04      	itt	eq
 800448c:	1949      	addeq	r1, r1, r5
 800448e:	6021      	streq	r1, [r4, #0]
 8004490:	6054      	str	r4, [r2, #4]
 8004492:	e7c7      	b.n	8004424 <_free_r+0x28>
 8004494:	b003      	add	sp, #12
 8004496:	bd30      	pop	{r4, r5, pc}
 8004498:	20000090 	.word	0x20000090

0800449c <_malloc_r>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	1ccd      	adds	r5, r1, #3
 80044a0:	f025 0503 	bic.w	r5, r5, #3
 80044a4:	3508      	adds	r5, #8
 80044a6:	2d0c      	cmp	r5, #12
 80044a8:	bf38      	it	cc
 80044aa:	250c      	movcc	r5, #12
 80044ac:	2d00      	cmp	r5, #0
 80044ae:	4606      	mov	r6, r0
 80044b0:	db01      	blt.n	80044b6 <_malloc_r+0x1a>
 80044b2:	42a9      	cmp	r1, r5
 80044b4:	d903      	bls.n	80044be <_malloc_r+0x22>
 80044b6:	230c      	movs	r3, #12
 80044b8:	6033      	str	r3, [r6, #0]
 80044ba:	2000      	movs	r0, #0
 80044bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044be:	f000 f87d 	bl	80045bc <__malloc_lock>
 80044c2:	4921      	ldr	r1, [pc, #132]	; (8004548 <_malloc_r+0xac>)
 80044c4:	680a      	ldr	r2, [r1, #0]
 80044c6:	4614      	mov	r4, r2
 80044c8:	b99c      	cbnz	r4, 80044f2 <_malloc_r+0x56>
 80044ca:	4f20      	ldr	r7, [pc, #128]	; (800454c <_malloc_r+0xb0>)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	b923      	cbnz	r3, 80044da <_malloc_r+0x3e>
 80044d0:	4621      	mov	r1, r4
 80044d2:	4630      	mov	r0, r6
 80044d4:	f000 f862 	bl	800459c <_sbrk_r>
 80044d8:	6038      	str	r0, [r7, #0]
 80044da:	4629      	mov	r1, r5
 80044dc:	4630      	mov	r0, r6
 80044de:	f000 f85d 	bl	800459c <_sbrk_r>
 80044e2:	1c43      	adds	r3, r0, #1
 80044e4:	d123      	bne.n	800452e <_malloc_r+0x92>
 80044e6:	230c      	movs	r3, #12
 80044e8:	6033      	str	r3, [r6, #0]
 80044ea:	4630      	mov	r0, r6
 80044ec:	f000 f86c 	bl	80045c8 <__malloc_unlock>
 80044f0:	e7e3      	b.n	80044ba <_malloc_r+0x1e>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	1b5b      	subs	r3, r3, r5
 80044f6:	d417      	bmi.n	8004528 <_malloc_r+0x8c>
 80044f8:	2b0b      	cmp	r3, #11
 80044fa:	d903      	bls.n	8004504 <_malloc_r+0x68>
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	441c      	add	r4, r3
 8004500:	6025      	str	r5, [r4, #0]
 8004502:	e004      	b.n	800450e <_malloc_r+0x72>
 8004504:	6863      	ldr	r3, [r4, #4]
 8004506:	42a2      	cmp	r2, r4
 8004508:	bf0c      	ite	eq
 800450a:	600b      	streq	r3, [r1, #0]
 800450c:	6053      	strne	r3, [r2, #4]
 800450e:	4630      	mov	r0, r6
 8004510:	f000 f85a 	bl	80045c8 <__malloc_unlock>
 8004514:	f104 000b 	add.w	r0, r4, #11
 8004518:	1d23      	adds	r3, r4, #4
 800451a:	f020 0007 	bic.w	r0, r0, #7
 800451e:	1ac2      	subs	r2, r0, r3
 8004520:	d0cc      	beq.n	80044bc <_malloc_r+0x20>
 8004522:	1a1b      	subs	r3, r3, r0
 8004524:	50a3      	str	r3, [r4, r2]
 8004526:	e7c9      	b.n	80044bc <_malloc_r+0x20>
 8004528:	4622      	mov	r2, r4
 800452a:	6864      	ldr	r4, [r4, #4]
 800452c:	e7cc      	b.n	80044c8 <_malloc_r+0x2c>
 800452e:	1cc4      	adds	r4, r0, #3
 8004530:	f024 0403 	bic.w	r4, r4, #3
 8004534:	42a0      	cmp	r0, r4
 8004536:	d0e3      	beq.n	8004500 <_malloc_r+0x64>
 8004538:	1a21      	subs	r1, r4, r0
 800453a:	4630      	mov	r0, r6
 800453c:	f000 f82e 	bl	800459c <_sbrk_r>
 8004540:	3001      	adds	r0, #1
 8004542:	d1dd      	bne.n	8004500 <_malloc_r+0x64>
 8004544:	e7cf      	b.n	80044e6 <_malloc_r+0x4a>
 8004546:	bf00      	nop
 8004548:	20000090 	.word	0x20000090
 800454c:	20000094 	.word	0x20000094

08004550 <_realloc_r>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	4607      	mov	r7, r0
 8004554:	4614      	mov	r4, r2
 8004556:	460e      	mov	r6, r1
 8004558:	b921      	cbnz	r1, 8004564 <_realloc_r+0x14>
 800455a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800455e:	4611      	mov	r1, r2
 8004560:	f7ff bf9c 	b.w	800449c <_malloc_r>
 8004564:	b922      	cbnz	r2, 8004570 <_realloc_r+0x20>
 8004566:	f7ff ff49 	bl	80043fc <_free_r>
 800456a:	4625      	mov	r5, r4
 800456c:	4628      	mov	r0, r5
 800456e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004570:	f000 f830 	bl	80045d4 <_malloc_usable_size_r>
 8004574:	42a0      	cmp	r0, r4
 8004576:	d20f      	bcs.n	8004598 <_realloc_r+0x48>
 8004578:	4621      	mov	r1, r4
 800457a:	4638      	mov	r0, r7
 800457c:	f7ff ff8e 	bl	800449c <_malloc_r>
 8004580:	4605      	mov	r5, r0
 8004582:	2800      	cmp	r0, #0
 8004584:	d0f2      	beq.n	800456c <_realloc_r+0x1c>
 8004586:	4631      	mov	r1, r6
 8004588:	4622      	mov	r2, r4
 800458a:	f7ff ff0f 	bl	80043ac <memcpy>
 800458e:	4631      	mov	r1, r6
 8004590:	4638      	mov	r0, r7
 8004592:	f7ff ff33 	bl	80043fc <_free_r>
 8004596:	e7e9      	b.n	800456c <_realloc_r+0x1c>
 8004598:	4635      	mov	r5, r6
 800459a:	e7e7      	b.n	800456c <_realloc_r+0x1c>

0800459c <_sbrk_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4d06      	ldr	r5, [pc, #24]	; (80045b8 <_sbrk_r+0x1c>)
 80045a0:	2300      	movs	r3, #0
 80045a2:	4604      	mov	r4, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	602b      	str	r3, [r5, #0]
 80045a8:	f7fc fb12 	bl	8000bd0 <_sbrk>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d102      	bne.n	80045b6 <_sbrk_r+0x1a>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	b103      	cbz	r3, 80045b6 <_sbrk_r+0x1a>
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	20000170 	.word	0x20000170

080045bc <__malloc_lock>:
 80045bc:	4801      	ldr	r0, [pc, #4]	; (80045c4 <__malloc_lock+0x8>)
 80045be:	f000 b811 	b.w	80045e4 <__retarget_lock_acquire_recursive>
 80045c2:	bf00      	nop
 80045c4:	20000178 	.word	0x20000178

080045c8 <__malloc_unlock>:
 80045c8:	4801      	ldr	r0, [pc, #4]	; (80045d0 <__malloc_unlock+0x8>)
 80045ca:	f000 b80c 	b.w	80045e6 <__retarget_lock_release_recursive>
 80045ce:	bf00      	nop
 80045d0:	20000178 	.word	0x20000178

080045d4 <_malloc_usable_size_r>:
 80045d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d8:	1f18      	subs	r0, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bfbc      	itt	lt
 80045de:	580b      	ldrlt	r3, [r1, r0]
 80045e0:	18c0      	addlt	r0, r0, r3
 80045e2:	4770      	bx	lr

080045e4 <__retarget_lock_acquire_recursive>:
 80045e4:	4770      	bx	lr

080045e6 <__retarget_lock_release_recursive>:
 80045e6:	4770      	bx	lr

080045e8 <_init>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	bf00      	nop
 80045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ee:	bc08      	pop	{r3}
 80045f0:	469e      	mov	lr, r3
 80045f2:	4770      	bx	lr

080045f4 <_fini>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	bf00      	nop
 80045f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fa:	bc08      	pop	{r3}
 80045fc:	469e      	mov	lr, r3
 80045fe:	4770      	bx	lr
