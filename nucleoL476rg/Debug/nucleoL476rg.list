
nucleoL476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006164  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000838  080062f4  080062f4  000162f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b2c  08006b2c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b34  08006b34  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b34  08006b34  00016b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b38  08006b38  00016b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000078  08006bb4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08006bb4  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010da6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ab  00000000  00000000  00030e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00033100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00033f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027071  00000000  00000000  00034d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f1e  00000000  00000000  0005bd91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ede27  00000000  00000000  0006dcaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015bad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004154  00000000  00000000  0015bb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062dc 	.word	0x080062dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080062dc 	.word	0x080062dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	; 0x50
 8000dc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f000 fc5f 	bl	8001688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f915 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f000 fa13 	bl	80011f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dd2:	f000 f9e1 	bl	8001198 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000dd6:	f000 f9a1 	bl	800111c <MX_SPI1_Init>
  MX_I2C1_Init();
 8000dda:	f000 f95f 	bl	800109c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Set up OLED display
  ssd1306_Init();
 8000dde:	f004 fbdb 	bl	8005598 <ssd1306_Init>

  // Check that everything is setup OK. When the chip is asked for its identity, it should reply 0xEA
  do {
   buf[0] = readMask |ICM20648_REG_WHO_AM_I; // Prepare the instruction " read register 0x00 so you send 0x80
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	703b      	strb	r3, [r7, #0]
   HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET); // Pull the chip select line low
 8000de6:	2200      	movs	r2, #0
 8000de8:	2140      	movs	r1, #64	; 0x40
 8000dea:	4877      	ldr	r0, [pc, #476]	; (8000fc8 <main+0x208>)
 8000dec:	f000 ff7c 	bl	8001ce8 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(&hspi1, buf, 1, 100); // Tell the ICM20948 what you want
 8000df0:	4639      	mov	r1, r7
 8000df2:	2364      	movs	r3, #100	; 0x64
 8000df4:	2201      	movs	r2, #1
 8000df6:	4875      	ldr	r0, [pc, #468]	; (8000fcc <main+0x20c>)
 8000df8:	f002 ffdf 	bl	8003dba <HAL_SPI_Transmit>
   HAL_SPI_Receive(&hspi1, buf, 1, 100); // Get the answer
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	2364      	movs	r3, #100	; 0x64
 8000e00:	2201      	movs	r2, #1
 8000e02:	4872      	ldr	r0, [pc, #456]	; (8000fcc <main+0x20c>)
 8000e04:	f003 f947 	bl	8004096 <HAL_SPI_Receive>
   HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET); // Release the slave chip by bringing the line back up
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	486e      	ldr	r0, [pc, #440]	; (8000fc8 <main+0x208>)
 8000e0e:	f000 ff6b 	bl	8001ce8 <HAL_GPIO_WritePin>
   buf[1] = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	707b      	strb	r3, [r7, #1]
   sprintf(msg, "I am 0x%02X\r\n", buf[0]);
 8000e16:	783b      	ldrb	r3, [r7, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	496c      	ldr	r1, [pc, #432]	; (8000fd0 <main+0x210>)
 8000e20:	4618      	mov	r0, r3
 8000e22:	f004 fdfb 	bl	8005a1c <siprintf>
   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff f9d0 	bl	80001d0 <strlen>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	f107 0108 	add.w	r1, r7, #8
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3c:	4865      	ldr	r0, [pc, #404]	; (8000fd4 <main+0x214>)
 8000e3e:	f003 fe77 	bl	8004b30 <HAL_UART_Transmit>
  } while (buf[0] != 0xEA);
 8000e42:	783b      	ldrb	r3, [r7, #0]
 8000e44:	2bea      	cmp	r3, #234	; 0xea
 8000e46:	d1cc      	bne.n	8000de2 <main+0x22>


  // Turn on the sensors
  buf[0] = writeMask | ICM20648_REG_PWR_MGMT_1; // Here you want to turn on the sensors by going out of sleep mode.
 8000e48:	2306      	movs	r3, #6
 8000e4a:	703b      	strb	r3, [r7, #0]
  buf[1] = 0x01; // This is done by writing a 0 on bit 6 of the power management register in the ICM 20948
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	707b      	strb	r3, [r7, #1]
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2140      	movs	r1, #64	; 0x40
 8000e54:	485c      	ldr	r0, [pc, #368]	; (8000fc8 <main+0x208>)
 8000e56:	f000 ff47 	bl	8001ce8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, buf, 2, 100); // Send the register address and its content (2 bytes)
 8000e5a:	4639      	mov	r1, r7
 8000e5c:	2364      	movs	r3, #100	; 0x64
 8000e5e:	2202      	movs	r2, #2
 8000e60:	485a      	ldr	r0, [pc, #360]	; (8000fcc <main+0x20c>)
 8000e62:	f002 ffaa 	bl	8003dba <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2140      	movs	r1, #64	; 0x40
 8000e6a:	4857      	ldr	r0, [pc, #348]	; (8000fc8 <main+0x208>)
 8000e6c:	f000 ff3c 	bl	8001ce8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  buf[0] = readMask | ICM20648_REG_ACCEL_XOUT_H_SH; // Prepare the request to read the accelerometer data in X direction
 8000e70:	23ad      	movs	r3, #173	; 0xad
 8000e72:	703b      	strb	r3, [r7, #0]
	  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2140      	movs	r1, #64	; 0x40
 8000e78:	4853      	ldr	r0, [pc, #332]	; (8000fc8 <main+0x208>)
 8000e7a:	f000 ff35 	bl	8001ce8 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, buf, 1, 100); // Send request
 8000e7e:	4639      	mov	r1, r7
 8000e80:	2364      	movs	r3, #100	; 0x64
 8000e82:	2201      	movs	r2, #1
 8000e84:	4851      	ldr	r0, [pc, #324]	; (8000fcc <main+0x20c>)
 8000e86:	f002 ff98 	bl	8003dba <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1, buf, 6, 100); // Get the accelerations X, Y, Z high and low bytes (6 bytes)
 8000e8a:	4639      	mov	r1, r7
 8000e8c:	2364      	movs	r3, #100	; 0x64
 8000e8e:	2206      	movs	r2, #6
 8000e90:	484e      	ldr	r0, [pc, #312]	; (8000fcc <main+0x20c>)
 8000e92:	f003 f900 	bl	8004096 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2140      	movs	r1, #64	; 0x40
 8000e9a:	484b      	ldr	r0, [pc, #300]	; (8000fc8 <main+0x208>)
 8000e9c:	f000 ff24 	bl	8001ce8 <HAL_GPIO_WritePin>
	  acceleration.x = (buf[0] << 8 | buf[1]);  // Combine the two bytes into a signed 16 bit signed integer
 8000ea0:	783b      	ldrb	r3, [r7, #0]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	787b      	ldrb	r3, [r7, #1]
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b21a      	sxth	r2, r3
 8000eae:	4b4a      	ldr	r3, [pc, #296]	; (8000fd8 <main+0x218>)
 8000eb0:	801a      	strh	r2, [r3, #0]
	  acceleration.y = (buf[2] << 8 | buf[3]);
 8000eb2:	78bb      	ldrb	r3, [r7, #2]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <main+0x218>)
 8000ec2:	805a      	strh	r2, [r3, #2]
	  acceleration.z = (buf[4] << 8 | buf[5]);
 8000ec4:	793b      	ldrb	r3, [r7, #4]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	797b      	ldrb	r3, [r7, #5]
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	4b41      	ldr	r3, [pc, #260]	; (8000fd8 <main+0x218>)
 8000ed4:	809a      	strh	r2, [r3, #4]
	  char *tmpSign = (acceleration.y < 0) ? "-" : "+";
 8000ed6:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <main+0x218>)
 8000ed8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	da01      	bge.n	8000ee4 <main+0x124>
 8000ee0:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <main+0x21c>)
 8000ee2:	e000      	b.n	8000ee6 <main+0x126>
 8000ee4:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <main+0x220>)
 8000ee6:	647b      	str	r3, [r7, #68]	; 0x44
	  tmpVal = acceleration.y / 16384.0;  // 2^16 for -2g to +2g => 1g = 16384  // here g is not gram but 9.8m/s^2
 8000ee8:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <main+0x218>)
 8000eea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fb18 	bl	8000524 <__aeabi_i2d>
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	4b3a      	ldr	r3, [pc, #232]	; (8000fe4 <main+0x224>)
 8000efa:	f7ff fca7 	bl	800084c <__aeabi_ddiv>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	f7ff fd89 	bl	8000a1c <__aeabi_d2f>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	643b      	str	r3, [r7, #64]	; 0x40
	  tmpVal = (acceleration.y < 0) ? -tmpVal : tmpVal;
 8000f0e:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <main+0x218>)
 8000f10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	da04      	bge.n	8000f22 <main+0x162>
 8000f18:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000f1c:	eef1 7a67 	vneg.f32	s15, s15
 8000f20:	e001      	b.n	8000f26 <main+0x166>
 8000f22:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000f26:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	  int tmpInt1 = tmpVal;                  // Get the integer (678).
 8000f2a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000f2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f32:	ee17 3a90 	vmov	r3, s15
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
 8000f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f3a:	ee07 3a90 	vmov	s15, r3
 8000f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f42:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f4a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  int tmpInt2 = (tmpFrac * 1000);  // Turn into integer (123).char *tmpSign = (adc_read < 0) ? "-" : "";
 8000f4e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f52:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000fe8 <main+0x228>
 8000f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f5e:	ee17 3a90 	vmov	r3, s15
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
	  sprintf (msg, " Y Acceleration = %s%d.%04dg\r\n", tmpSign, tmpInt1, tmpInt2);
 8000f64:	f107 0008 	add.w	r0, r7, #8
 8000f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f70:	491e      	ldr	r1, [pc, #120]	; (8000fec <main+0x22c>)
 8000f72:	f004 fd53 	bl	8005a1c <siprintf>

	  // Send to UART2
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f928 	bl	80001d0 <strlen>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	f107 0108 	add.w	r1, r7, #8
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8c:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <main+0x214>)
 8000f8e:	f003 fdcf 	bl	8004b30 <HAL_UART_Transmit>

	  // Send to the OLED display over I2C1
	  sprintf (msg, " Y Accel = %s%d.%02dg\r\n", tmpSign, tmpInt1, tmpInt2);
 8000f92:	f107 0008 	add.w	r0, r7, #8
 8000f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f9e:	4914      	ldr	r1, [pc, #80]	; (8000ff0 <main+0x230>)
 8000fa0:	f004 fd3c 	bl	8005a1c <siprintf>
	  ssd1306_SetCursor(0, 5);
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f004 fcae 	bl	8005908 <ssd1306_SetCursor>
	  retVal = ssd1306_WriteString(msg, Font_7x10, White);
 8000fac:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <main+0x234>)
 8000fae:	f107 0008 	add.w	r0, r7, #8
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	ca06      	ldmia	r2, {r1, r2}
 8000fb6:	f004 fc81 	bl	80058bc <ssd1306_WriteString>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	  ssd1306_UpdateScreen();
 8000fc0:	f004 fb78 	bl	80056b4 <ssd1306_UpdateScreen>
  {
 8000fc4:	e754      	b.n	8000e70 <main+0xb0>
 8000fc6:	bf00      	nop
 8000fc8:	48000400 	.word	0x48000400
 8000fcc:	200000e8 	.word	0x200000e8
 8000fd0:	080062f4 	.word	0x080062f4
 8000fd4:	2000014c 	.word	0x2000014c
 8000fd8:	200001d0 	.word	0x200001d0
 8000fdc:	08006304 	.word	0x08006304
 8000fe0:	08006308 	.word	0x08006308
 8000fe4:	40d00000 	.word	0x40d00000
 8000fe8:	447a0000 	.word	0x447a0000
 8000fec:	0800630c 	.word	0x0800630c
 8000ff0:	0800632c 	.word	0x0800632c
 8000ff4:	2000000c 	.word	0x2000000c

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b096      	sub	sp, #88	; 0x58
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2244      	movs	r2, #68	; 0x44
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f004 fd00 	bl	8005a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	463b      	mov	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800101a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800101e:	f001 fb17 	bl	8002650 <HAL_PWREx_ControlVoltageScaling>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001028:	f000 f94c 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102c:	2302      	movs	r3, #2
 800102e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001034:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001036:	2310      	movs	r3, #16
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103a:	2302      	movs	r3, #2
 800103c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103e:	2302      	movs	r3, #2
 8001040:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001042:	2301      	movs	r3, #1
 8001044:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001046:	230a      	movs	r3, #10
 8001048:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800104a:	2307      	movs	r3, #7
 800104c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800104e:	2302      	movs	r3, #2
 8001050:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fb4e 	bl	80026fc <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001066:	f000 f92d 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2303      	movs	r3, #3
 8001070:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	2104      	movs	r1, #4
 8001082:	4618      	mov	r0, r3
 8001084:	f001 ff16 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800108e:	f000 f919 	bl	80012c4 <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3758      	adds	r7, #88	; 0x58
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <MX_I2C1_Init+0x74>)
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <MX_I2C1_Init+0x78>)
 80010a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MX_I2C1_Init+0x74>)
 80010a8:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <MX_I2C1_Init+0x7c>)
 80010aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <MX_I2C1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <MX_I2C1_Init+0x74>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_I2C1_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_I2C1_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_I2C1_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_I2C1_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_I2C1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d6:	480e      	ldr	r0, [pc, #56]	; (8001110 <MX_I2C1_Init+0x74>)
 80010d8:	f000 fe1e 	bl	8001d18 <HAL_I2C_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010e2:	f000 f8ef 	bl	80012c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e6:	2100      	movs	r1, #0
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <MX_I2C1_Init+0x74>)
 80010ea:	f001 fa0b 	bl	8002504 <HAL_I2CEx_ConfigAnalogFilter>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010f4:	f000 f8e6 	bl	80012c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010f8:	2100      	movs	r1, #0
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_I2C1_Init+0x74>)
 80010fc:	f001 fa4d 	bl	800259a <HAL_I2CEx_ConfigDigitalFilter>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001106:	f000 f8dd 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000094 	.word	0x20000094
 8001114:	40005400 	.word	0x40005400
 8001118:	10909cec 	.word	0x10909cec

0800111c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_SPI1_Init+0x74>)
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <MX_SPI1_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_SPI1_Init+0x74>)
 8001128:	f44f 7282 	mov.w	r2, #260	; 0x104
 800112c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_SPI1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_SPI1_Init+0x74>)
 8001136:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800113a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_SPI1_Init+0x74>)
 800113e:	2202      	movs	r2, #2
 8001140:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_SPI1_Init+0x74>)
 8001144:	2201      	movs	r2, #1
 8001146:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_SPI1_Init+0x74>)
 800114a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_SPI1_Init+0x74>)
 8001152:	2210      	movs	r2, #16
 8001154:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_SPI1_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_SPI1_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_SPI1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_SPI1_Init+0x74>)
 800116a:	2207      	movs	r2, #7
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_SPI1_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_SPI1_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_SPI1_Init+0x74>)
 800117c:	f002 fd7a 	bl	8003c74 <HAL_SPI_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001186:	f000 f89d 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000e8 	.word	0x200000e8
 8001194:	40013000 	.word	0x40013000

08001198 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 800119e:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <MX_USART2_UART_Init+0x5c>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_USART2_UART_Init+0x58>)
 80011dc:	f003 fc5a 	bl	8004a94 <HAL_UART_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011e6:	f000 f86d 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000014c 	.word	0x2000014c
 80011f4:	40004400 	.word	0x40004400

080011f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <MX_GPIO_Init+0xc0>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a29      	ldr	r2, [pc, #164]	; (80012b8 <MX_GPIO_Init+0xc0>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <MX_GPIO_Init+0xc0>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <MX_GPIO_Init+0xc0>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <MX_GPIO_Init+0xc0>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MX_GPIO_Init+0xc0>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_GPIO_Init+0xc0>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <MX_GPIO_Init+0xc0>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_GPIO_Init+0xc0>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_GPIO_Init+0xc0>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <MX_GPIO_Init+0xc0>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_GPIO_Init+0xc0>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	2140      	movs	r1, #64	; 0x40
 8001272:	4812      	ldr	r0, [pc, #72]	; (80012bc <MX_GPIO_Init+0xc4>)
 8001274:	f000 fd38 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800127e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	480c      	ldr	r0, [pc, #48]	; (80012c0 <MX_GPIO_Init+0xc8>)
 8001290:	f000 fb80 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : ChipSelect_Pin */
  GPIO_InitStruct.Pin = ChipSelect_Pin;
 8001294:	2340      	movs	r3, #64	; 0x40
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ChipSelect_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_GPIO_Init+0xc4>)
 80012ac:	f000 fb72 	bl	8001994 <HAL_GPIO_Init>

}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000400 	.word	0x48000400
 80012c0:	48000800 	.word	0x48000800

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x8>
	...

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_MspInit+0x44>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <HAL_MspInit+0x44>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6613      	str	r3, [r2, #96]	; 0x60
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <HAL_MspInit+0x44>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_MspInit+0x44>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_MspInit+0x44>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	6593      	str	r3, [r2, #88]	; 0x58
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_MspInit+0x44>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000

08001318 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0ac      	sub	sp, #176	; 0xb0
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2288      	movs	r2, #136	; 0x88
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f004 fb67 	bl	8005a0c <memset>
  if(hi2c->Instance==I2C1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <HAL_I2C_MspInit+0xb0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d13b      	bne.n	80013c0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001348:	2340      	movs	r3, #64	; 0x40
 800134a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800134c:	2300      	movs	r3, #0
 800134e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4618      	mov	r0, r3
 8001356:	f001 ffd1 	bl	80032fc <HAL_RCCEx_PeriphCLKConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001360:	f7ff ffb0 	bl	80012c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_I2C_MspInit+0xb4>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	4a18      	ldr	r2, [pc, #96]	; (80013cc <HAL_I2C_MspInit+0xb4>)
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_I2C_MspInit+0xb4>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800137c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001384:	2312      	movs	r3, #18
 8001386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001396:	2304      	movs	r3, #4
 8001398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a0:	4619      	mov	r1, r3
 80013a2:	480b      	ldr	r0, [pc, #44]	; (80013d0 <HAL_I2C_MspInit+0xb8>)
 80013a4:	f000 faf6 	bl	8001994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_I2C_MspInit+0xb4>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_I2C_MspInit+0xb4>)
 80013ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b2:	6593      	str	r3, [r2, #88]	; 0x58
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_I2C_MspInit+0xb4>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	37b0      	adds	r7, #176	; 0xb0
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40005400 	.word	0x40005400
 80013cc:	40021000 	.word	0x40021000
 80013d0:	48000400 	.word	0x48000400

080013d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a17      	ldr	r2, [pc, #92]	; (8001450 <HAL_SPI_MspInit+0x7c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d128      	bne.n	8001448 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_SPI_MspInit+0x80>)
 80013f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fa:	4a16      	ldr	r2, [pc, #88]	; (8001454 <HAL_SPI_MspInit+0x80>)
 80013fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001400:	6613      	str	r3, [r2, #96]	; 0x60
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_SPI_MspInit+0x80>)
 8001404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_SPI_MspInit+0x80>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a10      	ldr	r2, [pc, #64]	; (8001454 <HAL_SPI_MspInit+0x80>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_SPI_MspInit+0x80>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001426:	23e0      	movs	r3, #224	; 0xe0
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001436:	2305      	movs	r3, #5
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001444:	f000 faa6 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40013000 	.word	0x40013000
 8001454:	40021000 	.word	0x40021000

08001458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0ac      	sub	sp, #176	; 0xb0
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2288      	movs	r2, #136	; 0x88
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f004 fac7 	bl	8005a0c <memset>
  if(huart->Instance==USART2)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a21      	ldr	r2, [pc, #132]	; (8001508 <HAL_UART_MspInit+0xb0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d13b      	bne.n	8001500 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001488:	2302      	movs	r3, #2
 800148a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800148c:	2300      	movs	r3, #0
 800148e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4618      	mov	r0, r3
 8001496:	f001 ff31 	bl	80032fc <HAL_RCCEx_PeriphCLKConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014a0:	f7ff ff10 	bl	80012c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_UART_MspInit+0xb4>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	4a18      	ldr	r2, [pc, #96]	; (800150c <HAL_UART_MspInit+0xb4>)
 80014aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ae:	6593      	str	r3, [r2, #88]	; 0x58
 80014b0:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_UART_MspInit+0xb4>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_UART_MspInit+0xb4>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c0:	4a12      	ldr	r2, [pc, #72]	; (800150c <HAL_UART_MspInit+0xb4>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_UART_MspInit+0xb4>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin|GPIO_PIN_4;
 80014d4:	231c      	movs	r3, #28
 80014d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ec:	2307      	movs	r3, #7
 80014ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f000 fa4a 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001500:	bf00      	nop
 8001502:	37b0      	adds	r7, #176	; 0xb0
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40004400 	.word	0x40004400
 800150c:	40021000 	.word	0x40021000

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <NMI_Handler+0x4>

08001516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <HardFault_Handler+0x4>

0800151c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <MemManage_Handler+0x4>

08001522 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <BusFault_Handler+0x4>

08001528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <UsageFault_Handler+0x4>

0800152e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155c:	f000 f8f0 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f004 fa02 	bl	800599c <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20018000 	.word	0x20018000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	200001d8 	.word	0x200001d8
 80015cc:	200003f8 	.word	0x200003f8

080015d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <SystemInit+0x5c>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <SystemInit+0x5c>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <SystemInit+0x60>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a11      	ldr	r2, [pc, #68]	; (8001630 <SystemInit+0x60>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <SystemInit+0x60>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <SystemInit+0x60>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <SystemInit+0x60>)
 80015fc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001600:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001604:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <SystemInit+0x60>)
 8001608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800160c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <SystemInit+0x60>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a07      	ldr	r2, [pc, #28]	; (8001630 <SystemInit+0x60>)
 8001614:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001618:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SystemInit+0x60>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00
 8001630:	40021000 	.word	0x40021000

08001634 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800166c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001638:	f7ff ffca 	bl	80015d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800163c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800163e:	e003      	b.n	8001648 <LoopCopyDataInit>

08001640 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001642:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001644:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001646:	3104      	adds	r1, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001648:	480a      	ldr	r0, [pc, #40]	; (8001674 <LoopForever+0xa>)
	ldr	r3, =_edata
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <LoopForever+0xe>)
	adds	r2, r0, r1
 800164c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800164e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001650:	d3f6      	bcc.n	8001640 <CopyDataInit>
	ldr	r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001654:	e002      	b.n	800165c <LoopFillZerobss>

08001656 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001656:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001658:	f842 3b04 	str.w	r3, [r2], #4

0800165c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <LoopForever+0x16>)
	cmp	r2, r3
 800165e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001660:	d3f9      	bcc.n	8001656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001662:	f004 f9a1 	bl	80059a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001666:	f7ff fbab 	bl	8000dc0 <main>

0800166a <LoopForever>:

LoopForever:
    b LoopForever
 800166a:	e7fe      	b.n	800166a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800166c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001670:	08006b3c 	.word	0x08006b3c
	ldr	r0, =_sdata
 8001674:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001678:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 800167c:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001680:	200003f8 	.word	0x200003f8

08001684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC1_2_IRQHandler>
	...

08001688 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_Init+0x3c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_Init+0x3c>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169e:	2003      	movs	r0, #3
 80016a0:	f000 f944 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 f80f 	bl	80016c8 <HAL_InitTick>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	71fb      	strb	r3, [r7, #7]
 80016b4:	e001      	b.n	80016ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016b6:	f7ff fe0b 	bl	80012d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016ba:	79fb      	ldrb	r3, [r7, #7]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_InitTick+0x6c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d023      	beq.n	8001724 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <HAL_InitTick+0x70>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <HAL_InitTick+0x6c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f941 	bl	800197a <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10f      	bne.n	800171e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d809      	bhi.n	8001718 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f000 f919 	bl	8001942 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_InitTick+0x74>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e007      	b.n	8001728 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e004      	b.n	8001728 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	e001      	b.n	8001728 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000008 	.word	0x20000008
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008
 8001764:	200001dc 	.word	0x200001dc

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200001dc 	.word	0x200001dc

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000008 	.word	0x20000008

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff47 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff5c 	bl	8001810 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffb0 	bl	80018e8 <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a2:	e17f      	b.n	8001ca4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8171 	beq.w	8001c9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d005      	beq.n	80019d4 <HAL_GPIO_Init+0x40>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d130      	bne.n	8001a36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 0201 	and.w	r2, r3, #1
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d118      	bne.n	8001a74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	f003 0201 	and.w	r2, r3, #1
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d017      	beq.n	8001ab0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d123      	bne.n	8001b04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	6939      	ldr	r1, [r7, #16]
 8001b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80ac 	beq.w	8001c9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	4b5f      	ldr	r3, [pc, #380]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4a:	4a5e      	ldr	r2, [pc, #376]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6613      	str	r3, [r2, #96]	; 0x60
 8001b52:	4b5c      	ldr	r3, [pc, #368]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b5e:	4a5a      	ldr	r2, [pc, #360]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b88:	d025      	beq.n	8001bd6 <HAL_GPIO_Init+0x242>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4f      	ldr	r2, [pc, #316]	; (8001ccc <HAL_GPIO_Init+0x338>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01f      	beq.n	8001bd2 <HAL_GPIO_Init+0x23e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4e      	ldr	r2, [pc, #312]	; (8001cd0 <HAL_GPIO_Init+0x33c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d019      	beq.n	8001bce <HAL_GPIO_Init+0x23a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4d      	ldr	r2, [pc, #308]	; (8001cd4 <HAL_GPIO_Init+0x340>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0x236>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4c      	ldr	r2, [pc, #304]	; (8001cd8 <HAL_GPIO_Init+0x344>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_GPIO_Init+0x232>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4b      	ldr	r2, [pc, #300]	; (8001cdc <HAL_GPIO_Init+0x348>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_Init+0x22e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4a      	ldr	r2, [pc, #296]	; (8001ce0 <HAL_GPIO_Init+0x34c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_GPIO_Init+0x22a>
 8001bba:	2306      	movs	r3, #6
 8001bbc:	e00c      	b.n	8001bd8 <HAL_GPIO_Init+0x244>
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	e00a      	b.n	8001bd8 <HAL_GPIO_Init+0x244>
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	e008      	b.n	8001bd8 <HAL_GPIO_Init+0x244>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x244>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e004      	b.n	8001bd8 <HAL_GPIO_Init+0x244>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_Init+0x244>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_GPIO_Init+0x244>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	f002 0203 	and.w	r2, r2, #3
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	4093      	lsls	r3, r2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001be8:	4937      	ldr	r1, [pc, #220]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bf6:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <HAL_GPIO_Init+0x350>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c1a:	4a32      	ldr	r2, [pc, #200]	; (8001ce4 <HAL_GPIO_Init+0x350>)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c20:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <HAL_GPIO_Init+0x350>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c44:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <HAL_GPIO_Init+0x350>)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c4a:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <HAL_GPIO_Init+0x350>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <HAL_GPIO_Init+0x350>)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_GPIO_Init+0x350>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c98:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_GPIO_Init+0x350>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f47f ae78 	bne.w	80019a4 <HAL_GPIO_Init+0x10>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	48000400 	.word	0x48000400
 8001cd0:	48000800 	.word	0x48000800
 8001cd4:	48000c00 	.word	0x48000c00
 8001cd8:	48001000 	.word	0x48001000
 8001cdc:	48001400 	.word	0x48001400
 8001ce0:	48001800 	.word	0x48001800
 8001ce4:	40010400 	.word	0x40010400

08001ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf8:	787b      	ldrb	r3, [r7, #1]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e081      	b.n	8001e2e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff faea 	bl	8001318 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2224      	movs	r2, #36	; 0x24
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	e006      	b.n	8001da0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d104      	bne.n	8001db2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001db0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69d9      	ldr	r1, [r3, #28]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1a      	ldr	r2, [r3, #32]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	4603      	mov	r3, r0
 8001e48:	817b      	strh	r3, [r7, #10]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	813b      	strh	r3, [r7, #8]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	f040 80f9 	bne.w	8002052 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HAL_I2C_Mem_Write+0x34>
 8001e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0ed      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_I2C_Mem_Write+0x4e>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e0e6      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e8e:	f7ff fc6b 	bl	8001768 <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2319      	movs	r3, #25
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f955 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0d1      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2221      	movs	r2, #33	; 0x21
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2240      	movs	r2, #64	; 0x40
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a3a      	ldr	r2, [r7, #32]
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ed8:	88f8      	ldrh	r0, [r7, #6]
 8001eda:	893a      	ldrh	r2, [r7, #8]
 8001edc:	8979      	ldrh	r1, [r7, #10]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f8b9 	bl	8002060 <I2C_RequestMemoryWrite>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0a9      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2bff      	cmp	r3, #255	; 0xff
 8001f08:	d90e      	bls.n	8001f28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	22ff      	movs	r2, #255	; 0xff
 8001f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	8979      	ldrh	r1, [r7, #10]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 fabd 	bl	80024a0 <I2C_TransferConfig>
 8001f26:	e00f      	b.n	8001f48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	8979      	ldrh	r1, [r7, #10]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 faac 	bl	80024a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f93f 	bl	80021d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e07b      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d034      	beq.n	8002000 <HAL_I2C_Mem_Write+0x1c8>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d130      	bne.n	8002000 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2180      	movs	r1, #128	; 0x80
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f8d1 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e04d      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2bff      	cmp	r3, #255	; 0xff
 8001fc0:	d90e      	bls.n	8001fe0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	22ff      	movs	r2, #255	; 0xff
 8001fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	8979      	ldrh	r1, [r7, #10]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fa61 	bl	80024a0 <I2C_TransferConfig>
 8001fde:	e00f      	b.n	8002000 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	8979      	ldrh	r1, [r7, #10]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fa50 	bl	80024a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d19e      	bne.n	8001f48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f91e 	bl	8002250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e01a      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2220      	movs	r2, #32
 8002024:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_I2C_Mem_Write+0x224>)
 8002032:	400b      	ands	r3, r1
 8002034:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002052:	2302      	movs	r3, #2
  }
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	fe00e800 	.word	0xfe00e800

08002060 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	4608      	mov	r0, r1
 800206a:	4611      	mov	r1, r2
 800206c:	461a      	mov	r2, r3
 800206e:	4603      	mov	r3, r0
 8002070:	817b      	strh	r3, [r7, #10]
 8002072:	460b      	mov	r3, r1
 8002074:	813b      	strh	r3, [r7, #8]
 8002076:	4613      	mov	r3, r2
 8002078:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	8979      	ldrh	r1, [r7, #10]
 8002080:	4b20      	ldr	r3, [pc, #128]	; (8002104 <I2C_RequestMemoryWrite+0xa4>)
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 fa09 	bl	80024a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	69b9      	ldr	r1, [r7, #24]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f89c 	bl	80021d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e02c      	b.n	80020fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020a8:	893b      	ldrh	r3, [r7, #8]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	629a      	str	r2, [r3, #40]	; 0x28
 80020b2:	e015      	b.n	80020e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020b4:	893b      	ldrh	r3, [r7, #8]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	69b9      	ldr	r1, [r7, #24]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f882 	bl	80021d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e012      	b.n	80020fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020d6:	893b      	ldrh	r3, [r7, #8]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	2200      	movs	r2, #0
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f830 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	80002000 	.word	0x80002000

08002108 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b02      	cmp	r3, #2
 800211c:	d103      	bne.n	8002126 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2200      	movs	r2, #0
 8002124:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d007      	beq.n	8002144 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	619a      	str	r2, [r3, #24]
  }
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002160:	e022      	b.n	80021a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d01e      	beq.n	80021a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216a:	f7ff fafd 	bl	8001768 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d302      	bcc.n	8002180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d113      	bne.n	80021a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	f043 0220 	orr.w	r2, r3, #32
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e00f      	b.n	80021c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4013      	ands	r3, r2
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d0cd      	beq.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021dc:	e02c      	b.n	8002238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f870 	bl	80022c8 <I2C_IsErrorOccurred>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e02a      	b.n	8002248 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d01e      	beq.n	8002238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021fa:	f7ff fab5 	bl	8001768 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	429a      	cmp	r2, r3
 8002208:	d302      	bcc.n	8002210 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d113      	bne.n	8002238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	f043 0220 	orr.w	r2, r3, #32
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e007      	b.n	8002248 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d1cb      	bne.n	80021de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800225c:	e028      	b.n	80022b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f830 	bl	80022c8 <I2C_IsErrorOccurred>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e026      	b.n	80022c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002272:	f7ff fa79 	bl	8001768 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	429a      	cmp	r2, r3
 8002280:	d302      	bcc.n	8002288 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d113      	bne.n	80022b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	f043 0220 	orr.w	r2, r3, #32
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e007      	b.n	80022c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d1cf      	bne.n	800225e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d075      	beq.n	80023e0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2210      	movs	r2, #16
 80022fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022fc:	e056      	b.n	80023ac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d052      	beq.n	80023ac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002306:	f7ff fa2f 	bl	8001768 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	429a      	cmp	r2, r3
 8002314:	d302      	bcc.n	800231c <I2C_IsErrorOccurred+0x54>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d147      	bne.n	80023ac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002326:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800232e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800233a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800233e:	d12e      	bne.n	800239e <I2C_IsErrorOccurred+0xd6>
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002346:	d02a      	beq.n	800239e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	2b20      	cmp	r3, #32
 800234c:	d027      	beq.n	800239e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800235c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800235e:	f7ff fa03 	bl	8001768 <HAL_GetTick>
 8002362:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002364:	e01b      	b.n	800239e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002366:	f7ff f9ff 	bl	8001768 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b19      	cmp	r3, #25
 8002372:	d914      	bls.n	800239e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002378:	f043 0220 	orr.w	r2, r3, #32
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d1dc      	bne.n	8002366 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d003      	beq.n	80023c2 <I2C_IsErrorOccurred+0xfa>
 80023ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d09d      	beq.n	80022fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2220      	movs	r2, #32
 80023d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002402:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	f043 0308 	orr.w	r3, r3, #8
 800241a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002424:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002446:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800244e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002452:	2b00      	cmp	r3, #0
 8002454:	d01c      	beq.n	8002490 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f7ff fe56 	bl	8002108 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <I2C_IsErrorOccurred+0x1d4>)
 8002468:	400b      	ands	r3, r1
 800246a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	431a      	orrs	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002494:	4618      	mov	r0, r3
 8002496:	3728      	adds	r7, #40	; 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	fe00e800 	.word	0xfe00e800

080024a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	460b      	mov	r3, r1
 80024ac:	817b      	strh	r3, [r7, #10]
 80024ae:	4613      	mov	r3, r2
 80024b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024b2:	897b      	ldrh	r3, [r7, #10]
 80024b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024b8:	7a7b      	ldrb	r3, [r7, #9]
 80024ba:	041b      	lsls	r3, r3, #16
 80024bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	0d5b      	lsrs	r3, r3, #21
 80024da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <I2C_TransferConfig+0x60>)
 80024e0:	430b      	orrs	r3, r1
 80024e2:	43db      	mvns	r3, r3
 80024e4:	ea02 0103 	and.w	r1, r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024f2:	bf00      	nop
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	03ff63ff 	.word	0x03ff63ff

08002504 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b20      	cmp	r3, #32
 8002518:	d138      	bne.n	800258c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002524:	2302      	movs	r3, #2
 8002526:	e032      	b.n	800258e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2224      	movs	r2, #36	; 0x24
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0201 	bic.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002556:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	e000      	b.n	800258e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800258c:	2302      	movs	r3, #2
  }
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d139      	bne.n	8002624 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e033      	b.n	8002626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2224      	movs	r2, #36	; 0x24
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0201 	bic.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	e000      	b.n	8002626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002624:	2302      	movs	r3, #2
  }
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <HAL_PWREx_GetVoltageRange+0x18>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40007000 	.word	0x40007000

08002650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800265e:	d130      	bne.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002660:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800266c:	d038      	beq.n	80026e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002676:	4a1e      	ldr	r2, [pc, #120]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2232      	movs	r2, #50	; 0x32
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0c9b      	lsrs	r3, r3, #18
 8002690:	3301      	adds	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002694:	e002      	b.n	800269c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3b01      	subs	r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a8:	d102      	bne.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f2      	bne.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026bc:	d110      	bne.n	80026e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e00f      	b.n	80026e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ce:	d007      	beq.n	80026e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026d8:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40007000 	.word	0x40007000
 80026f4:	20000000 	.word	0x20000000
 80026f8:	431bde83 	.word	0x431bde83

080026fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e3ca      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270e:	4b97      	ldr	r3, [pc, #604]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002718:	4b94      	ldr	r3, [pc, #592]	; (800296c <HAL_RCC_OscConfig+0x270>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80e4 	beq.w	80028f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <HAL_RCC_OscConfig+0x4a>
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	2b0c      	cmp	r3, #12
 800273a:	f040 808b 	bne.w	8002854 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b01      	cmp	r3, #1
 8002742:	f040 8087 	bne.w	8002854 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002746:	4b89      	ldr	r3, [pc, #548]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_RCC_OscConfig+0x62>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e3a2      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1a      	ldr	r2, [r3, #32]
 8002762:	4b82      	ldr	r3, [pc, #520]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <HAL_RCC_OscConfig+0x7c>
 800276e:	4b7f      	ldr	r3, [pc, #508]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002776:	e005      	b.n	8002784 <HAL_RCC_OscConfig+0x88>
 8002778:	4b7c      	ldr	r3, [pc, #496]	; (800296c <HAL_RCC_OscConfig+0x270>)
 800277a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277e:	091b      	lsrs	r3, r3, #4
 8002780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002784:	4293      	cmp	r3, r2
 8002786:	d223      	bcs.n	80027d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fd55 	bl	800323c <RCC_SetFlashLatencyFromMSIRange>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e383      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800279c:	4b73      	ldr	r3, [pc, #460]	; (800296c <HAL_RCC_OscConfig+0x270>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a72      	ldr	r2, [pc, #456]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80027a2:	f043 0308 	orr.w	r3, r3, #8
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b70      	ldr	r3, [pc, #448]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	496d      	ldr	r1, [pc, #436]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ba:	4b6c      	ldr	r3, [pc, #432]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	4968      	ldr	r1, [pc, #416]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
 80027ce:	e025      	b.n	800281c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027d0:	4b66      	ldr	r3, [pc, #408]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a65      	ldr	r2, [pc, #404]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	4b63      	ldr	r3, [pc, #396]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4960      	ldr	r1, [pc, #384]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ee:	4b5f      	ldr	r3, [pc, #380]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	495b      	ldr	r1, [pc, #364]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fd15 	bl	800323c <RCC_SetFlashLatencyFromMSIRange>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e343      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800281c:	f000 fc4a 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b52      	ldr	r3, [pc, #328]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	4950      	ldr	r1, [pc, #320]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
 8002838:	4a4e      	ldr	r2, [pc, #312]	; (8002974 <HAL_RCC_OscConfig+0x278>)
 800283a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800283c:	4b4e      	ldr	r3, [pc, #312]	; (8002978 <HAL_RCC_OscConfig+0x27c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe ff41 	bl	80016c8 <HAL_InitTick>
 8002846:	4603      	mov	r3, r0
 8002848:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d052      	beq.n	80028f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	e327      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d032      	beq.n	80028c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800285c:	4b43      	ldr	r3, [pc, #268]	; (800296c <HAL_RCC_OscConfig+0x270>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a42      	ldr	r2, [pc, #264]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002868:	f7fe ff7e 	bl	8001768 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002870:	f7fe ff7a 	bl	8001768 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e310      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002882:	4b3a      	ldr	r3, [pc, #232]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a36      	ldr	r2, [pc, #216]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4b34      	ldr	r3, [pc, #208]	; (800296c <HAL_RCC_OscConfig+0x270>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4931      	ldr	r1, [pc, #196]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ac:	4b2f      	ldr	r3, [pc, #188]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	492c      	ldr	r1, [pc, #176]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
 80028c0:	e01a      	b.n	80028f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028c2:	4b2a      	ldr	r3, [pc, #168]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a29      	ldr	r2, [pc, #164]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028ce:	f7fe ff4b 	bl	8001768 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028d6:	f7fe ff47 	bl	8001768 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e2dd      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028e8:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x1da>
 80028f4:	e000      	b.n	80028f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d074      	beq.n	80029ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b08      	cmp	r3, #8
 8002908:	d005      	beq.n	8002916 <HAL_RCC_OscConfig+0x21a>
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	2b0c      	cmp	r3, #12
 800290e:	d10e      	bne.n	800292e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d10b      	bne.n	800292e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d064      	beq.n	80029ec <HAL_RCC_OscConfig+0x2f0>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d160      	bne.n	80029ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e2ba      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x24a>
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_RCC_OscConfig+0x270>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0b      	ldr	r2, [pc, #44]	; (800296c <HAL_RCC_OscConfig+0x270>)
 800293e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	e026      	b.n	8002994 <HAL_RCC_OscConfig+0x298>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800294e:	d115      	bne.n	800297c <HAL_RCC_OscConfig+0x280>
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a05      	ldr	r2, [pc, #20]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002956:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_RCC_OscConfig+0x270>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a02      	ldr	r2, [pc, #8]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	e014      	b.n	8002994 <HAL_RCC_OscConfig+0x298>
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	08006344 	.word	0x08006344
 8002974:	20000000 	.word	0x20000000
 8002978:	20000004 	.word	0x20000004
 800297c:	4ba0      	ldr	r3, [pc, #640]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a9f      	ldr	r2, [pc, #636]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4b9d      	ldr	r3, [pc, #628]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a9c      	ldr	r2, [pc, #624]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 800298e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fee4 	bl	8001768 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fe fee0 	bl	8001768 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e276      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029b6:	4b92      	ldr	r3, [pc, #584]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x2a8>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe fed0 	bl	8001768 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029cc:	f7fe fecc 	bl	8001768 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	; 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e262      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029de:	4b88      	ldr	r3, [pc, #544]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x2d0>
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d060      	beq.n	8002abc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_OscConfig+0x310>
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d119      	bne.n	8002a3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d116      	bne.n	8002a3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0c:	4b7c      	ldr	r3, [pc, #496]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_OscConfig+0x328>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e23f      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a24:	4b76      	ldr	r3, [pc, #472]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	4973      	ldr	r1, [pc, #460]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a38:	e040      	b.n	8002abc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d023      	beq.n	8002a8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a42:	4b6f      	ldr	r3, [pc, #444]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6e      	ldr	r2, [pc, #440]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fe8b 	bl	8001768 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a56:	f7fe fe87 	bl	8001768 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e21d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a68:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a74:	4b62      	ldr	r3, [pc, #392]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	495f      	ldr	r1, [pc, #380]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
 8002a88:	e018      	b.n	8002abc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a5c      	ldr	r2, [pc, #368]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe fe67 	bl	8001768 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fe63 	bl	8001768 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e1f9      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ab0:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d03c      	beq.n	8002b42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad6:	4a4a      	ldr	r2, [pc, #296]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fe42 	bl	8001768 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7fe fe3e 	bl	8001768 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1d4      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002afa:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ef      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x3ec>
 8002b08:	e01b      	b.n	8002b42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b10:	4a3b      	ldr	r2, [pc, #236]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fe25 	bl	8001768 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b22:	f7fe fe21 	bl	8001768 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1b7      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b34:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ef      	bne.n	8002b22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80a6 	beq.w	8002c9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b50:	2300      	movs	r3, #0
 8002b52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b54:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10d      	bne.n	8002b7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b6c:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_RCC_OscConfig+0x508>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d118      	bne.n	8002bba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b88:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_RCC_OscConfig+0x508>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <HAL_RCC_OscConfig+0x508>)
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b94:	f7fe fde8 	bl	8001768 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9c:	f7fe fde4 	bl	8001768 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e17a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_RCC_OscConfig+0x508>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d108      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x4d8>
 8002bc2:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bd2:	e029      	b.n	8002c28 <HAL_RCC_OscConfig+0x52c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d115      	bne.n	8002c08 <HAL_RCC_OscConfig+0x50c>
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be2:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf2:	4a03      	ldr	r2, [pc, #12]	; (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bfc:	e014      	b.n	8002c28 <HAL_RCC_OscConfig+0x52c>
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40007000 	.word	0x40007000
 8002c08:	4b9c      	ldr	r3, [pc, #624]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	4a9b      	ldr	r2, [pc, #620]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c18:	4b98      	ldr	r3, [pc, #608]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	4a97      	ldr	r2, [pc, #604]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002c20:	f023 0304 	bic.w	r3, r3, #4
 8002c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d016      	beq.n	8002c5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fe fd9a 	bl	8001768 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c38:	f7fe fd96 	bl	8001768 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e12a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4e:	4b8b      	ldr	r3, [pc, #556]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ed      	beq.n	8002c38 <HAL_RCC_OscConfig+0x53c>
 8002c5c:	e015      	b.n	8002c8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fd83 	bl	8001768 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fe fd7f 	bl	8001768 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e113      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c7c:	4b7f      	ldr	r3, [pc, #508]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ed      	bne.n	8002c66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8a:	7ffb      	ldrb	r3, [r7, #31]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b7a      	ldr	r3, [pc, #488]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c94:	4a79      	ldr	r2, [pc, #484]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80fe 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	f040 80d0 	bne.w	8002e50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cb0:	4b72      	ldr	r3, [pc, #456]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 0203 	and.w	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d130      	bne.n	8002d26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d127      	bne.n	8002d26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d11f      	bne.n	8002d26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cf0:	2a07      	cmp	r2, #7
 8002cf2:	bf14      	ite	ne
 8002cf4:	2201      	movne	r2, #1
 8002cf6:	2200      	moveq	r2, #0
 8002cf8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d113      	bne.n	8002d26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	085b      	lsrs	r3, r3, #1
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d109      	bne.n	8002d26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d06e      	beq.n	8002e04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d069      	beq.n	8002e00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d2c:	4b53      	ldr	r3, [pc, #332]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d38:	4b50      	ldr	r3, [pc, #320]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0ad      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d48:	4b4c      	ldr	r3, [pc, #304]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a4b      	ldr	r2, [pc, #300]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d54:	f7fe fd08 	bl	8001768 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7fe fd04 	bl	8001768 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e09a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d6e:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d7a:	4b40      	ldr	r3, [pc, #256]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d8a:	3a01      	subs	r2, #1
 8002d8c:	0112      	lsls	r2, r2, #4
 8002d8e:	4311      	orrs	r1, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d94:	0212      	lsls	r2, r2, #8
 8002d96:	4311      	orrs	r1, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d9c:	0852      	lsrs	r2, r2, #1
 8002d9e:	3a01      	subs	r2, #1
 8002da0:	0552      	lsls	r2, r2, #21
 8002da2:	4311      	orrs	r1, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002da8:	0852      	lsrs	r2, r2, #1
 8002daa:	3a01      	subs	r2, #1
 8002dac:	0652      	lsls	r2, r2, #25
 8002dae:	4311      	orrs	r1, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002db4:	0912      	lsrs	r2, r2, #4
 8002db6:	0452      	lsls	r2, r2, #17
 8002db8:	430a      	orrs	r2, r1
 8002dba:	4930      	ldr	r1, [pc, #192]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dc0:	4b2e      	ldr	r3, [pc, #184]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a2d      	ldr	r2, [pc, #180]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a2a      	ldr	r2, [pc, #168]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dd8:	f7fe fcc6 	bl	8001768 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe fcc2 	bl	8001768 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e058      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dfe:	e050      	b.n	8002ea2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e04f      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d148      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e28:	f7fe fc9e 	bl	8001768 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe fc9a 	bl	8001768 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e030      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x734>
 8002e4e:	e028      	b.n	8002ea2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d023      	beq.n	8002e9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <HAL_RCC_OscConfig+0x780>)
 8002e5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe fc81 	bl	8001768 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e68:	e00c      	b.n	8002e84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6a:	f7fe fc7d 	bl	8001768 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d905      	bls.n	8002e84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e013      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_OscConfig+0x7b0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1ec      	bne.n	8002e6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_RCC_OscConfig+0x7b0>)
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	4905      	ldr	r1, [pc, #20]	; (8002eac <HAL_RCC_OscConfig+0x7b0>)
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_RCC_OscConfig+0x7b4>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60cb      	str	r3, [r1, #12]
 8002e9c:	e001      	b.n	8002ea2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3720      	adds	r7, #32
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	feeefffc 	.word	0xfeeefffc

08002eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0e7      	b.n	8003098 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b75      	ldr	r3, [pc, #468]	; (80030a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d910      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b72      	ldr	r3, [pc, #456]	; (80030a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 0207 	bic.w	r2, r3, #7
 8002ede:	4970      	ldr	r1, [pc, #448]	; (80030a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b6e      	ldr	r3, [pc, #440]	; (80030a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0cf      	b.n	8003098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d010      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	4b66      	ldr	r3, [pc, #408]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d908      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f14:	4b63      	ldr	r3, [pc, #396]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4960      	ldr	r1, [pc, #384]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d04c      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3a:	4b5a      	ldr	r3, [pc, #360]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d121      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0a6      	b.n	8003098 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f52:	4b54      	ldr	r3, [pc, #336]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d115      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e09a      	b.n	8003098 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f6a:	4b4e      	ldr	r3, [pc, #312]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e08e      	b.n	8003098 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f7a:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e086      	b.n	8003098 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f8a:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4943      	ldr	r1, [pc, #268]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9c:	f7fe fbe4 	bl	8001768 <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa4:	f7fe fbe0 	bl	8001768 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e06e      	b.n	8003098 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	4b3a      	ldr	r3, [pc, #232]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 020c 	and.w	r2, r3, #12
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1eb      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d010      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d208      	bcs.n	8002ffa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe8:	4b2e      	ldr	r3, [pc, #184]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	492b      	ldr	r1, [pc, #172]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffa:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d210      	bcs.n	800302a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003008:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <HAL_RCC_ClockConfig+0x1ec>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 0207 	bic.w	r2, r3, #7
 8003010:	4923      	ldr	r1, [pc, #140]	; (80030a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003018:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <HAL_RCC_ClockConfig+0x1ec>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d001      	beq.n	800302a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e036      	b.n	8003098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003036:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	4918      	ldr	r1, [pc, #96]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003054:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4910      	ldr	r1, [pc, #64]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003064:	4313      	orrs	r3, r2
 8003066:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003068:	f000 f824 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 800306c:	4602      	mov	r2, r0
 800306e:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	490b      	ldr	r1, [pc, #44]	; (80030a8 <HAL_RCC_ClockConfig+0x1f4>)
 800307a:	5ccb      	ldrb	r3, [r1, r3]
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
 8003084:	4a09      	ldr	r2, [pc, #36]	; (80030ac <HAL_RCC_ClockConfig+0x1f8>)
 8003086:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RCC_ClockConfig+0x1fc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe fb1b 	bl	80016c8 <HAL_InitTick>
 8003092:	4603      	mov	r3, r0
 8003094:	72fb      	strb	r3, [r7, #11]

  return status;
 8003096:	7afb      	ldrb	r3, [r7, #11]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40022000 	.word	0x40022000
 80030a4:	40021000 	.word	0x40021000
 80030a8:	08006344 	.word	0x08006344
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030c2:	4b3e      	ldr	r3, [pc, #248]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030cc:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x34>
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b0c      	cmp	r3, #12
 80030e0:	d121      	bne.n	8003126 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d11e      	bne.n	8003126 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030e8:	4b34      	ldr	r3, [pc, #208]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030f4:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 80030f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e005      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003104:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003110:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003118:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10d      	bne.n	800313c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003124:	e00a      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d102      	bne.n	8003132 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800312c:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	e004      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d101      	bne.n	800313c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003138:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800313a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b0c      	cmp	r3, #12
 8003140:	d134      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003142:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d003      	beq.n	800315a <HAL_RCC_GetSysClockFreq+0xa6>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b03      	cmp	r3, #3
 8003156:	d003      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0xac>
 8003158:	e005      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800315a:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800315c:	617b      	str	r3, [r7, #20]
      break;
 800315e:	e005      	b.n	800316c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003162:	617b      	str	r3, [r7, #20]
      break;
 8003164:	e002      	b.n	800316c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	617b      	str	r3, [r7, #20]
      break;
 800316a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800316c:	4b13      	ldr	r3, [pc, #76]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	3301      	adds	r3, #1
 8003178:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	fb03 f202 	mul.w	r2, r3, r2
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	0e5b      	lsrs	r3, r3, #25
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	3301      	adds	r3, #1
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031ac:	69bb      	ldr	r3, [r7, #24]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3724      	adds	r7, #36	; 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	0800635c 	.word	0x0800635c
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	007a1200 	.word	0x007a1200

080031cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000000 	.word	0x20000000

080031e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031e8:	f7ff fff0 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	0a1b      	lsrs	r3, r3, #8
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	4904      	ldr	r1, [pc, #16]	; (800320c <HAL_RCC_GetPCLK1Freq+0x28>)
 80031fa:	5ccb      	ldrb	r3, [r1, r3]
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	08006354 	.word	0x08006354

08003210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003214:	f7ff ffda 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	0adb      	lsrs	r3, r3, #11
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4904      	ldr	r1, [pc, #16]	; (8003238 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	08006354 	.word	0x08006354

0800323c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003248:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003254:	f7ff f9ee 	bl	8002634 <HAL_PWREx_GetVoltageRange>
 8003258:	6178      	str	r0, [r7, #20]
 800325a:	e014      	b.n	8003286 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	4a24      	ldr	r2, [pc, #144]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003266:	6593      	str	r3, [r2, #88]	; 0x58
 8003268:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003274:	f7ff f9de 	bl	8002634 <HAL_PWREx_GetVoltageRange>
 8003278:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800327a:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003284:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328c:	d10b      	bne.n	80032a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b80      	cmp	r3, #128	; 0x80
 8003292:	d919      	bls.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2ba0      	cmp	r3, #160	; 0xa0
 8003298:	d902      	bls.n	80032a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800329a:	2302      	movs	r3, #2
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	e013      	b.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032a0:	2301      	movs	r3, #1
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	e010      	b.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b80      	cmp	r3, #128	; 0x80
 80032aa:	d902      	bls.n	80032b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032ac:	2303      	movs	r3, #3
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	e00a      	b.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b80      	cmp	r3, #128	; 0x80
 80032b6:	d102      	bne.n	80032be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032b8:	2302      	movs	r3, #2
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	e004      	b.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b70      	cmp	r3, #112	; 0x70
 80032c2:	d101      	bne.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032c4:	2301      	movs	r3, #1
 80032c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 0207 	bic.w	r2, r3, #7
 80032d0:	4909      	ldr	r1, [pc, #36]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d001      	beq.n	80032ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40022000 	.word	0x40022000

080032fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003304:	2300      	movs	r3, #0
 8003306:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003308:	2300      	movs	r3, #0
 800330a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003314:	2b00      	cmp	r3, #0
 8003316:	d041      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800331c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003320:	d02a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003322:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003326:	d824      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003328:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800332c:	d008      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800332e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003332:	d81e      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800333c:	d010      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800333e:	e018      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003340:	4b86      	ldr	r3, [pc, #536]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a85      	ldr	r2, [pc, #532]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800334c:	e015      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3304      	adds	r3, #4
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fabb 	bl	80038d0 <RCCEx_PLLSAI1_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800335e:	e00c      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3320      	adds	r3, #32
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fba6 	bl	8003ab8 <RCCEx_PLLSAI2_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003370:	e003      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	74fb      	strb	r3, [r7, #19]
      break;
 8003376:	e000      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800337a:	7cfb      	ldrb	r3, [r7, #19]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003380:	4b76      	ldr	r3, [pc, #472]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800338e:	4973      	ldr	r1, [pc, #460]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003396:	e001      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d041      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033b0:	d02a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033b6:	d824      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033bc:	d008      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033c2:	d81e      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033cc:	d010      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033ce:	e018      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033d0:	4b62      	ldr	r3, [pc, #392]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4a61      	ldr	r2, [pc, #388]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033dc:	e015      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3304      	adds	r3, #4
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fa73 	bl	80038d0 <RCCEx_PLLSAI1_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ee:	e00c      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3320      	adds	r3, #32
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fb5e 	bl	8003ab8 <RCCEx_PLLSAI2_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003400:	e003      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	74fb      	strb	r3, [r7, #19]
      break;
 8003406:	e000      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800340a:	7cfb      	ldrb	r3, [r7, #19]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003410:	4b52      	ldr	r3, [pc, #328]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800341e:	494f      	ldr	r1, [pc, #316]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003426:	e001      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a0 	beq.w	800357a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800343e:	4b47      	ldr	r3, [pc, #284]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800344e:	2300      	movs	r3, #0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00d      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003454:	4b41      	ldr	r3, [pc, #260]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	4a40      	ldr	r2, [pc, #256]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345e:	6593      	str	r3, [r2, #88]	; 0x58
 8003460:	4b3e      	ldr	r3, [pc, #248]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800346c:	2301      	movs	r3, #1
 800346e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003470:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a3a      	ldr	r2, [pc, #232]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800347c:	f7fe f974 	bl	8001768 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003482:	e009      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003484:	f7fe f970 	bl	8001768 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d902      	bls.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	74fb      	strb	r3, [r7, #19]
        break;
 8003496:	e005      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003498:	4b31      	ldr	r3, [pc, #196]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ef      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d15c      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034aa:	4b2c      	ldr	r3, [pc, #176]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01f      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d019      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034c8:	4b24      	ldr	r3, [pc, #144]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034d4:	4b21      	ldr	r3, [pc, #132]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	4a20      	ldr	r2, [pc, #128]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ea:	4a1c      	ldr	r2, [pc, #112]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034f4:	4a19      	ldr	r2, [pc, #100]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d016      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fe f92f 	bl	8001768 <HAL_GetTick>
 800350a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350c:	e00b      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350e:	f7fe f92b 	bl	8001768 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	; 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d902      	bls.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	74fb      	strb	r3, [r7, #19]
            break;
 8003524:	e006      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0ec      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354a:	4904      	ldr	r1, [pc, #16]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003552:	e009      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	74bb      	strb	r3, [r7, #18]
 8003558:	e006      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003568:	7c7b      	ldrb	r3, [r7, #17]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d105      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356e:	4b9e      	ldr	r3, [pc, #632]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	4a9d      	ldr	r2, [pc, #628]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003578:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003586:	4b98      	ldr	r3, [pc, #608]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f023 0203 	bic.w	r2, r3, #3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	4994      	ldr	r1, [pc, #592]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035a8:	4b8f      	ldr	r3, [pc, #572]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f023 020c 	bic.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	498c      	ldr	r1, [pc, #560]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035ca:	4b87      	ldr	r3, [pc, #540]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	4983      	ldr	r1, [pc, #524]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035ec:	4b7e      	ldr	r3, [pc, #504]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	497b      	ldr	r1, [pc, #492]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800360e:	4b76      	ldr	r3, [pc, #472]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361c:	4972      	ldr	r1, [pc, #456]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003630:	4b6d      	ldr	r3, [pc, #436]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363e:	496a      	ldr	r1, [pc, #424]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003652:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003660:	4961      	ldr	r1, [pc, #388]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003674:	4b5c      	ldr	r3, [pc, #368]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003682:	4959      	ldr	r1, [pc, #356]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003696:	4b54      	ldr	r3, [pc, #336]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a4:	4950      	ldr	r1, [pc, #320]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036b8:	4b4b      	ldr	r3, [pc, #300]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	4948      	ldr	r1, [pc, #288]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036da:	4b43      	ldr	r3, [pc, #268]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	493f      	ldr	r1, [pc, #252]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d028      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036fc:	4b3a      	ldr	r3, [pc, #232]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370a:	4937      	ldr	r1, [pc, #220]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800371a:	d106      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800371c:	4b32      	ldr	r3, [pc, #200]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4a31      	ldr	r2, [pc, #196]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003726:	60d3      	str	r3, [r2, #12]
 8003728:	e011      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003732:	d10c      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	2101      	movs	r1, #1
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f8c8 	bl	80038d0 <RCCEx_PLLSAI1_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800374a:	7cfb      	ldrb	r3, [r7, #19]
 800374c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d028      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800375a:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	491f      	ldr	r1, [pc, #124]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003778:	d106      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800377a:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	4a1a      	ldr	r2, [pc, #104]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003784:	60d3      	str	r3, [r2, #12]
 8003786:	e011      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003790:	d10c      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	2101      	movs	r1, #1
 8003798:	4618      	mov	r0, r3
 800379a:	f000 f899 	bl	80038d0 <RCCEx_PLLSAI1_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037a2:	7cfb      	ldrb	r3, [r7, #19]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d02b      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c6:	4908      	ldr	r1, [pc, #32]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d6:	d109      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a02      	ldr	r2, [pc, #8]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037e2:	60d3      	str	r3, [r2, #12]
 80037e4:	e014      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037f4:	d10c      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3304      	adds	r3, #4
 80037fa:	2101      	movs	r1, #1
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 f867 	bl	80038d0 <RCCEx_PLLSAI1_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d02f      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800381c:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800382a:	4928      	ldr	r1, [pc, #160]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800383a:	d10d      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	2102      	movs	r1, #2
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f844 	bl	80038d0 <RCCEx_PLLSAI1_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d014      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003852:	7cfb      	ldrb	r3, [r7, #19]
 8003854:	74bb      	strb	r3, [r7, #18]
 8003856:	e011      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800385c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003860:	d10c      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3320      	adds	r3, #32
 8003866:	2102      	movs	r1, #2
 8003868:	4618      	mov	r0, r3
 800386a:	f000 f925 	bl	8003ab8 <RCCEx_PLLSAI2_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003872:	7cfb      	ldrb	r3, [r7, #19]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003896:	490d      	ldr	r1, [pc, #52]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ba:	4904      	ldr	r1, [pc, #16]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021000 	.word	0x40021000

080038d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038de:	4b75      	ldr	r3, [pc, #468]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d018      	beq.n	800391c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038ea:	4b72      	ldr	r3, [pc, #456]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0203 	and.w	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d10d      	bne.n	8003916 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
       ||
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003902:	4b6c      	ldr	r3, [pc, #432]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
       ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d047      	beq.n	80039a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
 800391a:	e044      	b.n	80039a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b03      	cmp	r3, #3
 8003922:	d018      	beq.n	8003956 <RCCEx_PLLSAI1_Config+0x86>
 8003924:	2b03      	cmp	r3, #3
 8003926:	d825      	bhi.n	8003974 <RCCEx_PLLSAI1_Config+0xa4>
 8003928:	2b01      	cmp	r3, #1
 800392a:	d002      	beq.n	8003932 <RCCEx_PLLSAI1_Config+0x62>
 800392c:	2b02      	cmp	r3, #2
 800392e:	d009      	beq.n	8003944 <RCCEx_PLLSAI1_Config+0x74>
 8003930:	e020      	b.n	8003974 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003932:	4b60      	ldr	r3, [pc, #384]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d11d      	bne.n	800397a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003942:	e01a      	b.n	800397a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003944:	4b5b      	ldr	r3, [pc, #364]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394c:	2b00      	cmp	r3, #0
 800394e:	d116      	bne.n	800397e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003954:	e013      	b.n	800397e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003956:	4b57      	ldr	r3, [pc, #348]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10f      	bne.n	8003982 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003962:	4b54      	ldr	r3, [pc, #336]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003972:	e006      	b.n	8003982 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
      break;
 8003978:	e004      	b.n	8003984 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800397a:	bf00      	nop
 800397c:	e002      	b.n	8003984 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800397e:	bf00      	nop
 8003980:	e000      	b.n	8003984 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003982:	bf00      	nop
    }

    if(status == HAL_OK)
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10d      	bne.n	80039a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800398a:	4b4a      	ldr	r3, [pc, #296]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6819      	ldr	r1, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	430b      	orrs	r3, r1
 80039a0:	4944      	ldr	r1, [pc, #272]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d17d      	bne.n	8003aa8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039ac:	4b41      	ldr	r3, [pc, #260]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a40      	ldr	r2, [pc, #256]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b8:	f7fd fed6 	bl	8001768 <HAL_GetTick>
 80039bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039be:	e009      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039c0:	f7fd fed2 	bl	8001768 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d902      	bls.n	80039d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	73fb      	strb	r3, [r7, #15]
        break;
 80039d2:	e005      	b.n	80039e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039d4:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1ef      	bne.n	80039c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d160      	bne.n	8003aa8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d111      	bne.n	8003a10 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ec:	4b31      	ldr	r3, [pc, #196]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6892      	ldr	r2, [r2, #8]
 80039fc:	0211      	lsls	r1, r2, #8
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68d2      	ldr	r2, [r2, #12]
 8003a02:	0912      	lsrs	r2, r2, #4
 8003a04:	0452      	lsls	r2, r2, #17
 8003a06:	430a      	orrs	r2, r1
 8003a08:	492a      	ldr	r1, [pc, #168]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	610b      	str	r3, [r1, #16]
 8003a0e:	e027      	b.n	8003a60 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d112      	bne.n	8003a3c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a16:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6892      	ldr	r2, [r2, #8]
 8003a26:	0211      	lsls	r1, r2, #8
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6912      	ldr	r2, [r2, #16]
 8003a2c:	0852      	lsrs	r2, r2, #1
 8003a2e:	3a01      	subs	r2, #1
 8003a30:	0552      	lsls	r2, r2, #21
 8003a32:	430a      	orrs	r2, r1
 8003a34:	491f      	ldr	r1, [pc, #124]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	610b      	str	r3, [r1, #16]
 8003a3a:	e011      	b.n	8003a60 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a3c:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6892      	ldr	r2, [r2, #8]
 8003a4c:	0211      	lsls	r1, r2, #8
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6952      	ldr	r2, [r2, #20]
 8003a52:	0852      	lsrs	r2, r2, #1
 8003a54:	3a01      	subs	r2, #1
 8003a56:	0652      	lsls	r2, r2, #25
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	4916      	ldr	r1, [pc, #88]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a13      	ldr	r2, [pc, #76]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fd fe7c 	bl	8001768 <HAL_GetTick>
 8003a70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a72:	e009      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a74:	f7fd fe78 	bl	8001768 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d902      	bls.n	8003a88 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	73fb      	strb	r3, [r7, #15]
          break;
 8003a86:	e005      	b.n	8003a94 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0ef      	beq.n	8003a74 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	4904      	ldr	r1, [pc, #16]	; (8003ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000

08003ab8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ac6:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d018      	beq.n	8003b04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ad2:	4b67      	ldr	r3, [pc, #412]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0203 	and.w	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d10d      	bne.n	8003afe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003aea:	4b61      	ldr	r3, [pc, #388]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
       ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d047      	beq.n	8003b8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
 8003b02:	e044      	b.n	8003b8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d018      	beq.n	8003b3e <RCCEx_PLLSAI2_Config+0x86>
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d825      	bhi.n	8003b5c <RCCEx_PLLSAI2_Config+0xa4>
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d002      	beq.n	8003b1a <RCCEx_PLLSAI2_Config+0x62>
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d009      	beq.n	8003b2c <RCCEx_PLLSAI2_Config+0x74>
 8003b18:	e020      	b.n	8003b5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b1a:	4b55      	ldr	r3, [pc, #340]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11d      	bne.n	8003b62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b2a:	e01a      	b.n	8003b62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b2c:	4b50      	ldr	r3, [pc, #320]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d116      	bne.n	8003b66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b3c:	e013      	b.n	8003b66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b3e:	4b4c      	ldr	r3, [pc, #304]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10f      	bne.n	8003b6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b4a:	4b49      	ldr	r3, [pc, #292]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b5a:	e006      	b.n	8003b6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b60:	e004      	b.n	8003b6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b62:	bf00      	nop
 8003b64:	e002      	b.n	8003b6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10d      	bne.n	8003b8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b72:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	430b      	orrs	r3, r1
 8003b88:	4939      	ldr	r1, [pc, #228]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d167      	bne.n	8003c64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b94:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a35      	ldr	r2, [pc, #212]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba0:	f7fd fde2 	bl	8001768 <HAL_GetTick>
 8003ba4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ba6:	e009      	b.n	8003bbc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ba8:	f7fd fdde 	bl	8001768 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d902      	bls.n	8003bbc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	73fb      	strb	r3, [r7, #15]
        break;
 8003bba:	e005      	b.n	8003bc8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bbc:	4b2c      	ldr	r3, [pc, #176]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1ef      	bne.n	8003ba8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d14a      	bne.n	8003c64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d111      	bne.n	8003bf8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bd4:	4b26      	ldr	r3, [pc, #152]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6892      	ldr	r2, [r2, #8]
 8003be4:	0211      	lsls	r1, r2, #8
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68d2      	ldr	r2, [r2, #12]
 8003bea:	0912      	lsrs	r2, r2, #4
 8003bec:	0452      	lsls	r2, r2, #17
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	491f      	ldr	r1, [pc, #124]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	614b      	str	r3, [r1, #20]
 8003bf6:	e011      	b.n	8003c1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6892      	ldr	r2, [r2, #8]
 8003c08:	0211      	lsls	r1, r2, #8
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6912      	ldr	r2, [r2, #16]
 8003c0e:	0852      	lsrs	r2, r2, #1
 8003c10:	3a01      	subs	r2, #1
 8003c12:	0652      	lsls	r2, r2, #25
 8003c14:	430a      	orrs	r2, r1
 8003c16:	4916      	ldr	r1, [pc, #88]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c28:	f7fd fd9e 	bl	8001768 <HAL_GetTick>
 8003c2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c2e:	e009      	b.n	8003c44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c30:	f7fd fd9a 	bl	8001768 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d902      	bls.n	8003c44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	73fb      	strb	r3, [r7, #15]
          break;
 8003c42:	e005      	b.n	8003c50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c44:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ef      	beq.n	8003c30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4904      	ldr	r1, [pc, #16]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000

08003c74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e095      	b.n	8003db2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d108      	bne.n	8003ca0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c96:	d009      	beq.n	8003cac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	61da      	str	r2, [r3, #28]
 8003c9e:	e005      	b.n	8003cac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd fb84 	bl	80013d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cec:	d902      	bls.n	8003cf4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e002      	b.n	8003cfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d02:	d007      	beq.n	8003d14 <HAL_SPI_Init+0xa0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d0c:	d002      	beq.n	8003d14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	ea42 0103 	orr.w	r1, r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	0c1b      	lsrs	r3, r3, #16
 8003d70:	f003 0204 	and.w	r2, r3, #4
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d90:	ea42 0103 	orr.w	r1, r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b088      	sub	sp, #32
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_SPI_Transmit+0x22>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e158      	b.n	800408e <HAL_SPI_Transmit+0x2d4>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003de4:	f7fd fcc0 	bl	8001768 <HAL_GetTick>
 8003de8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d002      	beq.n	8003e00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dfe:	e13d      	b.n	800407c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_SPI_Transmit+0x52>
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e10:	e134      	b.n	800407c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2203      	movs	r2, #3
 8003e16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	88fa      	ldrh	r2, [r7, #6]
 8003e2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e5c:	d10f      	bne.n	8003e7e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	d007      	beq.n	8003e9c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ea4:	d94b      	bls.n	8003f3e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_SPI_Transmit+0xfa>
 8003eae:	8afb      	ldrh	r3, [r7, #22]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d13e      	bne.n	8003f32 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	881a      	ldrh	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	1c9a      	adds	r2, r3, #2
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ed8:	e02b      	b.n	8003f32 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d112      	bne.n	8003f0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	881a      	ldrh	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	1c9a      	adds	r2, r3, #2
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f0c:	e011      	b.n	8003f32 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f0e:	f7fd fc2b 	bl	8001768 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d803      	bhi.n	8003f26 <HAL_SPI_Transmit+0x16c>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	d102      	bne.n	8003f2c <HAL_SPI_Transmit+0x172>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f30:	e0a4      	b.n	800407c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1ce      	bne.n	8003eda <HAL_SPI_Transmit+0x120>
 8003f3c:	e07c      	b.n	8004038 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_SPI_Transmit+0x192>
 8003f46:	8afb      	ldrh	r3, [r7, #22]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d170      	bne.n	800402e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d912      	bls.n	8003f7c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	881a      	ldrh	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	1c9a      	adds	r2, r3, #2
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b02      	subs	r3, #2
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f7a:	e058      	b.n	800402e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	7812      	ldrb	r2, [r2, #0]
 8003f88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003fa2:	e044      	b.n	800402e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d12b      	bne.n	800400a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d912      	bls.n	8003fe2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	881a      	ldrh	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	1c9a      	adds	r2, r3, #2
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b02      	subs	r3, #2
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fe0:	e025      	b.n	800402e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	330c      	adds	r3, #12
 8003fec:	7812      	ldrb	r2, [r2, #0]
 8003fee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004008:	e011      	b.n	800402e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800400a:	f7fd fbad 	bl	8001768 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d803      	bhi.n	8004022 <HAL_SPI_Transmit+0x268>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d102      	bne.n	8004028 <HAL_SPI_Transmit+0x26e>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800402c:	e026      	b.n	800407c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1b5      	bne.n	8003fa4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	6839      	ldr	r1, [r7, #0]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fce3 	bl	8004a08 <SPI_EndRxTxTransaction>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004056:	2300      	movs	r3, #0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e000      	b.n	800407c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800407a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800408c:	7ffb      	ldrb	r3, [r7, #31]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b088      	sub	sp, #32
 800409a:	af02      	add	r7, sp, #8
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	4613      	mov	r3, r2
 80040a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b2:	d112      	bne.n	80040da <HAL_SPI_Receive+0x44>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10e      	bne.n	80040da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2204      	movs	r2, #4
 80040c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	4613      	mov	r3, r2
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f910 	bl	80042f6 <HAL_SPI_TransmitReceive>
 80040d6:	4603      	mov	r3, r0
 80040d8:	e109      	b.n	80042ee <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_SPI_Receive+0x52>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e102      	b.n	80042ee <HAL_SPI_Receive+0x258>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040f0:	f7fd fb3a 	bl	8001768 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d002      	beq.n	8004108 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004102:	2302      	movs	r3, #2
 8004104:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004106:	e0e9      	b.n	80042dc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_SPI_Receive+0x7e>
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004118:	e0e0      	b.n	80042dc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2204      	movs	r2, #4
 800411e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	88fa      	ldrh	r2, [r7, #6]
 8004132:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	88fa      	ldrh	r2, [r7, #6]
 800413a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004164:	d908      	bls.n	8004178 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	e007      	b.n	8004188 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004186:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004190:	d10f      	bne.n	80041b2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b40      	cmp	r3, #64	; 0x40
 80041be:	d007      	beq.n	80041d0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041d8:	d867      	bhi.n	80042aa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80041da:	e030      	b.n	800423e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d117      	bne.n	800421a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f103 020c 	add.w	r2, r3, #12
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	7812      	ldrb	r2, [r2, #0]
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004218:	e011      	b.n	800423e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800421a:	f7fd faa5 	bl	8001768 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d803      	bhi.n	8004232 <HAL_SPI_Receive+0x19c>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d102      	bne.n	8004238 <HAL_SPI_Receive+0x1a2>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d102      	bne.n	800423e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800423c:	e04e      	b.n	80042dc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1c8      	bne.n	80041dc <HAL_SPI_Receive+0x146>
 800424a:	e034      	b.n	80042b6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d115      	bne.n	8004286 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	b292      	uxth	r2, r2
 8004266:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	1c9a      	adds	r2, r3, #2
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004284:	e011      	b.n	80042aa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004286:	f7fd fa6f 	bl	8001768 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d803      	bhi.n	800429e <HAL_SPI_Receive+0x208>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d102      	bne.n	80042a4 <HAL_SPI_Receive+0x20e>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042a8:	e018      	b.n	80042dc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1ca      	bne.n	800424c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fb4c 	bl	8004958 <SPI_EndRxTransaction>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	75fb      	strb	r3, [r7, #23]
 80042d8:	e000      	b.n	80042dc <HAL_SPI_Receive+0x246>
  }

error :
 80042da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b08a      	sub	sp, #40	; 0x28
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	607a      	str	r2, [r7, #4]
 8004302:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004304:	2301      	movs	r3, #1
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_SPI_TransmitReceive+0x26>
 8004318:	2302      	movs	r3, #2
 800431a:	e1fb      	b.n	8004714 <HAL_SPI_TransmitReceive+0x41e>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004324:	f7fd fa20 	bl	8001768 <HAL_GetTick>
 8004328:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004330:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004338:	887b      	ldrh	r3, [r7, #2]
 800433a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800433c:	887b      	ldrh	r3, [r7, #2]
 800433e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004340:	7efb      	ldrb	r3, [r7, #27]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d00e      	beq.n	8004364 <HAL_SPI_TransmitReceive+0x6e>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800434c:	d106      	bne.n	800435c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <HAL_SPI_TransmitReceive+0x66>
 8004356:	7efb      	ldrb	r3, [r7, #27]
 8004358:	2b04      	cmp	r3, #4
 800435a:	d003      	beq.n	8004364 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800435c:	2302      	movs	r3, #2
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004362:	e1cd      	b.n	8004700 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_SPI_TransmitReceive+0x80>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_SPI_TransmitReceive+0x80>
 8004370:	887b      	ldrh	r3, [r7, #2]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d103      	bne.n	800437e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800437c:	e1c0      	b.n	8004700 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b04      	cmp	r3, #4
 8004388:	d003      	beq.n	8004392 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2205      	movs	r2, #5
 800438e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	887a      	ldrh	r2, [r7, #2]
 80043a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	887a      	ldrh	r2, [r7, #2]
 80043aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	887a      	ldrh	r2, [r7, #2]
 80043b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	887a      	ldrh	r2, [r7, #2]
 80043be:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043d4:	d802      	bhi.n	80043dc <HAL_SPI_TransmitReceive+0xe6>
 80043d6:	8a3b      	ldrh	r3, [r7, #16]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d908      	bls.n	80043ee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	e007      	b.n	80043fe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b40      	cmp	r3, #64	; 0x40
 800440a:	d007      	beq.n	800441c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800441a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004424:	d97c      	bls.n	8004520 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_SPI_TransmitReceive+0x13e>
 800442e:	8a7b      	ldrh	r3, [r7, #18]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d169      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	881a      	ldrh	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	1c9a      	adds	r2, r3, #2
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004458:	e056      	b.n	8004508 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d11b      	bne.n	80044a0 <HAL_SPI_TransmitReceive+0x1aa>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d016      	beq.n	80044a0 <HAL_SPI_TransmitReceive+0x1aa>
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	2b01      	cmp	r3, #1
 8004476:	d113      	bne.n	80044a0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	881a      	ldrh	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	1c9a      	adds	r2, r3, #2
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d11c      	bne.n	80044e8 <HAL_SPI_TransmitReceive+0x1f2>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d016      	beq.n	80044e8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	b292      	uxth	r2, r2
 80044c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	1c9a      	adds	r2, r3, #2
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044e4:	2301      	movs	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044e8:	f7fd f93e 	bl	8001768 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d807      	bhi.n	8004508 <HAL_SPI_TransmitReceive+0x212>
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fe:	d003      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004506:	e0fb      	b.n	8004700 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1a3      	bne.n	800445a <HAL_SPI_TransmitReceive+0x164>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d19d      	bne.n	800445a <HAL_SPI_TransmitReceive+0x164>
 800451e:	e0df      	b.n	80046e0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_SPI_TransmitReceive+0x23a>
 8004528:	8a7b      	ldrh	r3, [r7, #18]
 800452a:	2b01      	cmp	r3, #1
 800452c:	f040 80cb 	bne.w	80046c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b01      	cmp	r3, #1
 8004538:	d912      	bls.n	8004560 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	881a      	ldrh	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	1c9a      	adds	r2, r3, #2
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b02      	subs	r3, #2
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800455e:	e0b2      	b.n	80046c6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	7812      	ldrb	r2, [r2, #0]
 800456c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004586:	e09e      	b.n	80046c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b02      	cmp	r3, #2
 8004594:	d134      	bne.n	8004600 <HAL_SPI_TransmitReceive+0x30a>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02f      	beq.n	8004600 <HAL_SPI_TransmitReceive+0x30a>
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d12c      	bne.n	8004600 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d912      	bls.n	80045d6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	1c9a      	adds	r2, r3, #2
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b02      	subs	r3, #2
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045d4:	e012      	b.n	80045fc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	7812      	ldrb	r2, [r2, #0]
 80045e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d148      	bne.n	80046a0 <HAL_SPI_TransmitReceive+0x3aa>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d042      	beq.n	80046a0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d923      	bls.n	800466e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	b292      	uxth	r2, r2
 8004632:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	1c9a      	adds	r2, r3, #2
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b02      	subs	r3, #2
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d81f      	bhi.n	800469c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	e016      	b.n	800469c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f103 020c 	add.w	r2, r3, #12
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	7812      	ldrb	r2, [r2, #0]
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800469c:	2301      	movs	r3, #1
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046a0:	f7fd f862 	bl	8001768 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d803      	bhi.n	80046b8 <HAL_SPI_TransmitReceive+0x3c2>
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b6:	d102      	bne.n	80046be <HAL_SPI_TransmitReceive+0x3c8>
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046c4:	e01c      	b.n	8004700 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f47f af5b 	bne.w	8004588 <HAL_SPI_TransmitReceive+0x292>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f47f af54 	bne.w	8004588 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f98f 	bl	8004a08 <SPI_EndRxTxTransaction>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d006      	beq.n	80046fe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	661a      	str	r2, [r3, #96]	; 0x60
 80046fc:	e000      	b.n	8004700 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80046fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004714:	4618      	mov	r0, r3
 8004716:	3728      	adds	r7, #40	; 0x28
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800472c:	f7fd f81c 	bl	8001768 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	4413      	add	r3, r2
 800473a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800473c:	f7fd f814 	bl	8001768 <HAL_GetTick>
 8004740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004742:	4b39      	ldr	r3, [pc, #228]	; (8004828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	015b      	lsls	r3, r3, #5
 8004748:	0d1b      	lsrs	r3, r3, #20
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	fb02 f303 	mul.w	r3, r2, r3
 8004750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004752:	e054      	b.n	80047fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d050      	beq.n	80047fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800475c:	f7fd f804 	bl	8001768 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	429a      	cmp	r2, r3
 800476a:	d902      	bls.n	8004772 <SPI_WaitFlagStateUntilTimeout+0x56>
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d13d      	bne.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800478a:	d111      	bne.n	80047b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004794:	d004      	beq.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479e:	d107      	bne.n	80047b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b8:	d10f      	bne.n	80047da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e017      	b.n	800481e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4013      	ands	r3, r2
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	bf0c      	ite	eq
 800480e:	2301      	moveq	r3, #1
 8004810:	2300      	movne	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	461a      	mov	r2, r3
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	429a      	cmp	r2, r3
 800481a:	d19b      	bne.n	8004754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20000000 	.word	0x20000000

0800482c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08a      	sub	sp, #40	; 0x28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800483e:	f7fc ff93 	bl	8001768 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	4413      	add	r3, r2
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800484e:	f7fc ff8b 	bl	8001768 <HAL_GetTick>
 8004852:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	330c      	adds	r3, #12
 800485a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800485c:	4b3d      	ldr	r3, [pc, #244]	; (8004954 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	00da      	lsls	r2, r3, #3
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	0d1b      	lsrs	r3, r3, #20
 800486c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004874:	e060      	b.n	8004938 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800487c:	d107      	bne.n	800488e <SPI_WaitFifoStateUntilTimeout+0x62>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800488c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d050      	beq.n	8004938 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004896:	f7fc ff67 	bl	8001768 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d902      	bls.n	80048ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d13d      	bne.n	8004928 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c4:	d111      	bne.n	80048ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ce:	d004      	beq.n	80048da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d8:	d107      	bne.n	80048ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f2:	d10f      	bne.n	8004914 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004912:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e010      	b.n	800494a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	3b01      	subs	r3, #1
 8004936:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4013      	ands	r3, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d196      	bne.n	8004876 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3728      	adds	r7, #40	; 0x28
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000000 	.word	0x20000000

08004958 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496c:	d111      	bne.n	8004992 <SPI_EndRxTransaction+0x3a>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004976:	d004      	beq.n	8004982 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004980:	d107      	bne.n	8004992 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004990:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2200      	movs	r2, #0
 800499a:	2180      	movs	r1, #128	; 0x80
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff febd 	bl	800471c <SPI_WaitFlagStateUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e023      	b.n	8004a00 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c0:	d11d      	bne.n	80049fe <SPI_EndRxTransaction+0xa6>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ca:	d004      	beq.n	80049d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d4:	d113      	bne.n	80049fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2200      	movs	r2, #0
 80049de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff ff22 	bl	800482c <SPI_WaitFifoStateUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e000      	b.n	8004a00 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f7ff ff03 	bl	800482c <SPI_WaitFifoStateUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a30:	f043 0220 	orr.w	r2, r3, #32
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e027      	b.n	8004a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2200      	movs	r2, #0
 8004a44:	2180      	movs	r1, #128	; 0x80
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff fe68 	bl	800471c <SPI_WaitFlagStateUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a56:	f043 0220 	orr.w	r2, r3, #32
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e014      	b.n	8004a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7ff fedc 	bl	800482c <SPI_WaitFifoStateUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7e:	f043 0220 	orr.w	r2, r3, #32
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e000      	b.n	8004a8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e040      	b.n	8004b28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fc fcce 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	; 0x24
 8004ac0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f8c0 	bl	8004c58 <UART_SetConfig>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e022      	b.n	8004b28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fb6c 	bl	80051c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fbf3 	bl	800530c <UART_CheckIdleState>
 8004b26:	4603      	mov	r3, r0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	f040 8082 	bne.w	8004c4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_UART_Transmit+0x26>
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e07a      	b.n	8004c50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_UART_Transmit+0x38>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e073      	b.n	8004c50 <HAL_UART_Transmit+0x120>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2221      	movs	r2, #33	; 0x21
 8004b7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b7e:	f7fc fdf3 	bl	8001768 <HAL_GetTick>
 8004b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	88fa      	ldrh	r2, [r7, #6]
 8004b90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9c:	d108      	bne.n	8004bb0 <HAL_UART_Transmit+0x80>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d104      	bne.n	8004bb0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	e003      	b.n	8004bb8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004bc0:	e02d      	b.n	8004c1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2180      	movs	r1, #128	; 0x80
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 fbe6 	bl	800539e <UART_WaitOnFlagUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e039      	b.n	8004c50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10b      	bne.n	8004bfa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	881a      	ldrh	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bee:	b292      	uxth	r2, r2
 8004bf0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	3302      	adds	r3, #2
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	e008      	b.n	8004c0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	781a      	ldrb	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	b292      	uxth	r2, r2
 8004c04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1cb      	bne.n	8004bc2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2200      	movs	r2, #0
 8004c32:	2140      	movs	r1, #64	; 0x40
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fbb2 	bl	800539e <UART_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e005      	b.n	8004c50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e000      	b.n	8004c50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c4e:	2302      	movs	r3, #2
  }
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c5c:	b08a      	sub	sp, #40	; 0x28
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	431a      	orrs	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4ba4      	ldr	r3, [pc, #656]	; (8004f18 <UART_SetConfig+0x2c0>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a99      	ldr	r2, [pc, #612]	; (8004f1c <UART_SetConfig+0x2c4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a90      	ldr	r2, [pc, #576]	; (8004f20 <UART_SetConfig+0x2c8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d126      	bne.n	8004d30 <UART_SetConfig+0xd8>
 8004ce2:	4b90      	ldr	r3, [pc, #576]	; (8004f24 <UART_SetConfig+0x2cc>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d81b      	bhi.n	8004d28 <UART_SetConfig+0xd0>
 8004cf0:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0xa0>)
 8004cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf6:	bf00      	nop
 8004cf8:	08004d09 	.word	0x08004d09
 8004cfc:	08004d19 	.word	0x08004d19
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d21 	.word	0x08004d21
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	e116      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004d10:	2302      	movs	r3, #2
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d16:	e112      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1e:	e10e      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004d20:	2308      	movs	r3, #8
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d26:	e10a      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2e:	e106      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a7c      	ldr	r2, [pc, #496]	; (8004f28 <UART_SetConfig+0x2d0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d138      	bne.n	8004dac <UART_SetConfig+0x154>
 8004d3a:	4b7a      	ldr	r3, [pc, #488]	; (8004f24 <UART_SetConfig+0x2cc>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f003 030c 	and.w	r3, r3, #12
 8004d44:	2b0c      	cmp	r3, #12
 8004d46:	d82d      	bhi.n	8004da4 <UART_SetConfig+0x14c>
 8004d48:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <UART_SetConfig+0xf8>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08004da5 	.word	0x08004da5
 8004d58:	08004da5 	.word	0x08004da5
 8004d5c:	08004da5 	.word	0x08004da5
 8004d60:	08004d95 	.word	0x08004d95
 8004d64:	08004da5 	.word	0x08004da5
 8004d68:	08004da5 	.word	0x08004da5
 8004d6c:	08004da5 	.word	0x08004da5
 8004d70:	08004d8d 	.word	0x08004d8d
 8004d74:	08004da5 	.word	0x08004da5
 8004d78:	08004da5 	.word	0x08004da5
 8004d7c:	08004da5 	.word	0x08004da5
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	2300      	movs	r3, #0
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e0d8      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e0d4      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004d94:	2304      	movs	r3, #4
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e0d0      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	e0cc      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004da4:	2310      	movs	r3, #16
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	e0c8      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a5e      	ldr	r2, [pc, #376]	; (8004f2c <UART_SetConfig+0x2d4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d125      	bne.n	8004e02 <UART_SetConfig+0x1aa>
 8004db6:	4b5b      	ldr	r3, [pc, #364]	; (8004f24 <UART_SetConfig+0x2cc>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dc0:	2b30      	cmp	r3, #48	; 0x30
 8004dc2:	d016      	beq.n	8004df2 <UART_SetConfig+0x19a>
 8004dc4:	2b30      	cmp	r3, #48	; 0x30
 8004dc6:	d818      	bhi.n	8004dfa <UART_SetConfig+0x1a2>
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d00a      	beq.n	8004de2 <UART_SetConfig+0x18a>
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d814      	bhi.n	8004dfa <UART_SetConfig+0x1a2>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <UART_SetConfig+0x182>
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d008      	beq.n	8004dea <UART_SetConfig+0x192>
 8004dd8:	e00f      	b.n	8004dfa <UART_SetConfig+0x1a2>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de0:	e0ad      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004de2:	2302      	movs	r3, #2
 8004de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de8:	e0a9      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004dea:	2304      	movs	r3, #4
 8004dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df0:	e0a5      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004df2:	2308      	movs	r3, #8
 8004df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df8:	e0a1      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004dfa:	2310      	movs	r3, #16
 8004dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e00:	e09d      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a4a      	ldr	r2, [pc, #296]	; (8004f30 <UART_SetConfig+0x2d8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d125      	bne.n	8004e58 <UART_SetConfig+0x200>
 8004e0c:	4b45      	ldr	r3, [pc, #276]	; (8004f24 <UART_SetConfig+0x2cc>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e16:	2bc0      	cmp	r3, #192	; 0xc0
 8004e18:	d016      	beq.n	8004e48 <UART_SetConfig+0x1f0>
 8004e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e1c:	d818      	bhi.n	8004e50 <UART_SetConfig+0x1f8>
 8004e1e:	2b80      	cmp	r3, #128	; 0x80
 8004e20:	d00a      	beq.n	8004e38 <UART_SetConfig+0x1e0>
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d814      	bhi.n	8004e50 <UART_SetConfig+0x1f8>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <UART_SetConfig+0x1d8>
 8004e2a:	2b40      	cmp	r3, #64	; 0x40
 8004e2c:	d008      	beq.n	8004e40 <UART_SetConfig+0x1e8>
 8004e2e:	e00f      	b.n	8004e50 <UART_SetConfig+0x1f8>
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e36:	e082      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e07e      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004e40:	2304      	movs	r3, #4
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e07a      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004e48:	2308      	movs	r3, #8
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	e076      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004e50:	2310      	movs	r3, #16
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	e072      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a35      	ldr	r2, [pc, #212]	; (8004f34 <UART_SetConfig+0x2dc>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d12a      	bne.n	8004eb8 <UART_SetConfig+0x260>
 8004e62:	4b30      	ldr	r3, [pc, #192]	; (8004f24 <UART_SetConfig+0x2cc>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e70:	d01a      	beq.n	8004ea8 <UART_SetConfig+0x250>
 8004e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e76:	d81b      	bhi.n	8004eb0 <UART_SetConfig+0x258>
 8004e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7c:	d00c      	beq.n	8004e98 <UART_SetConfig+0x240>
 8004e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e82:	d815      	bhi.n	8004eb0 <UART_SetConfig+0x258>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <UART_SetConfig+0x238>
 8004e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8c:	d008      	beq.n	8004ea0 <UART_SetConfig+0x248>
 8004e8e:	e00f      	b.n	8004eb0 <UART_SetConfig+0x258>
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e96:	e052      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9e:	e04e      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea6:	e04a      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eae:	e046      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb6:	e042      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <UART_SetConfig+0x2c4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d13a      	bne.n	8004f38 <UART_SetConfig+0x2e0>
 8004ec2:	4b18      	ldr	r3, [pc, #96]	; (8004f24 <UART_SetConfig+0x2cc>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ed0:	d01a      	beq.n	8004f08 <UART_SetConfig+0x2b0>
 8004ed2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ed6:	d81b      	bhi.n	8004f10 <UART_SetConfig+0x2b8>
 8004ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004edc:	d00c      	beq.n	8004ef8 <UART_SetConfig+0x2a0>
 8004ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee2:	d815      	bhi.n	8004f10 <UART_SetConfig+0x2b8>
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <UART_SetConfig+0x298>
 8004ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eec:	d008      	beq.n	8004f00 <UART_SetConfig+0x2a8>
 8004eee:	e00f      	b.n	8004f10 <UART_SetConfig+0x2b8>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef6:	e022      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efe:	e01e      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004f00:	2304      	movs	r3, #4
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f06:	e01a      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004f08:	2308      	movs	r3, #8
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0e:	e016      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004f10:	2310      	movs	r3, #16
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f16:	e012      	b.n	8004f3e <UART_SetConfig+0x2e6>
 8004f18:	efff69f3 	.word	0xefff69f3
 8004f1c:	40008000 	.word	0x40008000
 8004f20:	40013800 	.word	0x40013800
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40004400 	.word	0x40004400
 8004f2c:	40004800 	.word	0x40004800
 8004f30:	40004c00 	.word	0x40004c00
 8004f34:	40005000 	.word	0x40005000
 8004f38:	2310      	movs	r3, #16
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a9f      	ldr	r2, [pc, #636]	; (80051c0 <UART_SetConfig+0x568>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d17a      	bne.n	800503e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d824      	bhi.n	8004f9a <UART_SetConfig+0x342>
 8004f50:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <UART_SetConfig+0x300>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004f9b 	.word	0x08004f9b
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f9b 	.word	0x08004f9b
 8004f68:	08004f8b 	.word	0x08004f8b
 8004f6c:	08004f9b 	.word	0x08004f9b
 8004f70:	08004f9b 	.word	0x08004f9b
 8004f74:	08004f9b 	.word	0x08004f9b
 8004f78:	08004f93 	.word	0x08004f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7fe f932 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 8004f80:	61f8      	str	r0, [r7, #28]
        break;
 8004f82:	e010      	b.n	8004fa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f84:	4b8f      	ldr	r3, [pc, #572]	; (80051c4 <UART_SetConfig+0x56c>)
 8004f86:	61fb      	str	r3, [r7, #28]
        break;
 8004f88:	e00d      	b.n	8004fa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f8a:	f7fe f893 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8004f8e:	61f8      	str	r0, [r7, #28]
        break;
 8004f90:	e009      	b.n	8004fa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f96:	61fb      	str	r3, [r7, #28]
        break;
 8004f98:	e005      	b.n	8004fa6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 80fb 	beq.w	80051a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d305      	bcc.n	8004fca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d903      	bls.n	8004fd2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fd0:	e0e8      	b.n	80051a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	461c      	mov	r4, r3
 8004fd8:	4615      	mov	r5, r2
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	022b      	lsls	r3, r5, #8
 8004fe4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004fe8:	0222      	lsls	r2, r4, #8
 8004fea:	68f9      	ldr	r1, [r7, #12]
 8004fec:	6849      	ldr	r1, [r1, #4]
 8004fee:	0849      	lsrs	r1, r1, #1
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	4688      	mov	r8, r1
 8004ff4:	4681      	mov	r9, r0
 8004ff6:	eb12 0a08 	adds.w	sl, r2, r8
 8004ffa:	eb43 0b09 	adc.w	fp, r3, r9
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800500c:	4650      	mov	r0, sl
 800500e:	4659      	mov	r1, fp
 8005010:	f7fb fd54 	bl	8000abc <__aeabi_uldivmod>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4613      	mov	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005022:	d308      	bcc.n	8005036 <UART_SetConfig+0x3de>
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800502a:	d204      	bcs.n	8005036 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	60da      	str	r2, [r3, #12]
 8005034:	e0b6      	b.n	80051a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800503c:	e0b2      	b.n	80051a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005046:	d15e      	bne.n	8005106 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005048:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800504c:	2b08      	cmp	r3, #8
 800504e:	d828      	bhi.n	80050a2 <UART_SetConfig+0x44a>
 8005050:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <UART_SetConfig+0x400>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	0800507d 	.word	0x0800507d
 800505c:	08005085 	.word	0x08005085
 8005060:	0800508d 	.word	0x0800508d
 8005064:	080050a3 	.word	0x080050a3
 8005068:	08005093 	.word	0x08005093
 800506c:	080050a3 	.word	0x080050a3
 8005070:	080050a3 	.word	0x080050a3
 8005074:	080050a3 	.word	0x080050a3
 8005078:	0800509b 	.word	0x0800509b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800507c:	f7fe f8b2 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 8005080:	61f8      	str	r0, [r7, #28]
        break;
 8005082:	e014      	b.n	80050ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7fe f8c4 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 8005088:	61f8      	str	r0, [r7, #28]
        break;
 800508a:	e010      	b.n	80050ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800508c:	4b4d      	ldr	r3, [pc, #308]	; (80051c4 <UART_SetConfig+0x56c>)
 800508e:	61fb      	str	r3, [r7, #28]
        break;
 8005090:	e00d      	b.n	80050ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005092:	f7fe f80f 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8005096:	61f8      	str	r0, [r7, #28]
        break;
 8005098:	e009      	b.n	80050ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509e:	61fb      	str	r3, [r7, #28]
        break;
 80050a0:	e005      	b.n	80050ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d077      	beq.n	80051a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	005a      	lsls	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	085b      	lsrs	r3, r3, #1
 80050be:	441a      	add	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b0f      	cmp	r3, #15
 80050ce:	d916      	bls.n	80050fe <UART_SetConfig+0x4a6>
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d6:	d212      	bcs.n	80050fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f023 030f 	bic.w	r3, r3, #15
 80050e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	085b      	lsrs	r3, r3, #1
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	8afb      	ldrh	r3, [r7, #22]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	8afa      	ldrh	r2, [r7, #22]
 80050fa:	60da      	str	r2, [r3, #12]
 80050fc:	e052      	b.n	80051a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005104:	e04e      	b.n	80051a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005106:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800510a:	2b08      	cmp	r3, #8
 800510c:	d827      	bhi.n	800515e <UART_SetConfig+0x506>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <UART_SetConfig+0x4bc>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005139 	.word	0x08005139
 8005118:	08005141 	.word	0x08005141
 800511c:	08005149 	.word	0x08005149
 8005120:	0800515f 	.word	0x0800515f
 8005124:	0800514f 	.word	0x0800514f
 8005128:	0800515f 	.word	0x0800515f
 800512c:	0800515f 	.word	0x0800515f
 8005130:	0800515f 	.word	0x0800515f
 8005134:	08005157 	.word	0x08005157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005138:	f7fe f854 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 800513c:	61f8      	str	r0, [r7, #28]
        break;
 800513e:	e014      	b.n	800516a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005140:	f7fe f866 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 8005144:	61f8      	str	r0, [r7, #28]
        break;
 8005146:	e010      	b.n	800516a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005148:	4b1e      	ldr	r3, [pc, #120]	; (80051c4 <UART_SetConfig+0x56c>)
 800514a:	61fb      	str	r3, [r7, #28]
        break;
 800514c:	e00d      	b.n	800516a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514e:	f7fd ffb1 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8005152:	61f8      	str	r0, [r7, #28]
        break;
 8005154:	e009      	b.n	800516a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800515a:	61fb      	str	r3, [r7, #28]
        break;
 800515c:	e005      	b.n	800516a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005168:	bf00      	nop
    }

    if (pclk != 0U)
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d019      	beq.n	80051a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	085a      	lsrs	r2, r3, #1
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	441a      	add	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005182:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b0f      	cmp	r3, #15
 8005188:	d909      	bls.n	800519e <UART_SetConfig+0x546>
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005190:	d205      	bcs.n	800519e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	60da      	str	r2, [r3, #12]
 800519c:	e002      	b.n	80051a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3728      	adds	r7, #40	; 0x28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051be:	bf00      	nop
 80051c0:	40008000 	.word	0x40008000
 80051c4:	00f42400 	.word	0x00f42400

080051c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01a      	beq.n	80052de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c6:	d10a      	bne.n	80052de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	605a      	str	r2, [r3, #4]
  }
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af02      	add	r7, sp, #8
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800531c:	f7fc fa24 	bl	8001768 <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b08      	cmp	r3, #8
 800532e:	d10e      	bne.n	800534e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f82d 	bl	800539e <UART_WaitOnFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e023      	b.n	8005396 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b04      	cmp	r3, #4
 800535a:	d10e      	bne.n	800537a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800535c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f817 	bl	800539e <UART_WaitOnFlagUntilTimeout>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e00d      	b.n	8005396 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b09c      	sub	sp, #112	; 0x70
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	4613      	mov	r3, r2
 80053ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ae:	e0a5      	b.n	80054fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	f000 80a1 	beq.w	80054fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ba:	f7fc f9d5 	bl	8001768 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d302      	bcc.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80053ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d13e      	bne.n	800544e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053e4:	667b      	str	r3, [r7, #100]	; 0x64
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e6      	bne.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	f023 0301 	bic.w	r3, r3, #1
 8005418:	663b      	str	r3, [r7, #96]	; 0x60
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3308      	adds	r3, #8
 8005420:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005422:	64ba      	str	r2, [r7, #72]	; 0x48
 8005424:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005428:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e5      	bne.n	8005402 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e067      	b.n	800551e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d04f      	beq.n	80054fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546a:	d147      	bne.n	80054fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005474:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800548a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
 8005496:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800549a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800549c:	e841 2300 	strex	r3, r2, [r1]
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e6      	bne.n	8005476 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	613b      	str	r3, [r7, #16]
   return(result);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f023 0301 	bic.w	r3, r3, #1
 80054be:	66bb      	str	r3, [r7, #104]	; 0x68
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3308      	adds	r3, #8
 80054c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054c8:	623a      	str	r2, [r7, #32]
 80054ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	69f9      	ldr	r1, [r7, #28]
 80054ce:	6a3a      	ldr	r2, [r7, #32]
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e5      	bne.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e010      	b.n	800551e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69da      	ldr	r2, [r3, #28]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4013      	ands	r3, r2
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	429a      	cmp	r2, r3
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	461a      	mov	r2, r3
 8005514:	79fb      	ldrb	r3, [r7, #7]
 8005516:	429a      	cmp	r2, r3
 8005518:	f43f af4a 	beq.w	80053b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3770      	adds	r7, #112	; 0x70
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005526:	b480      	push	{r7}
 8005528:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800552a:	bf00      	nop
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af04      	add	r7, sp, #16
 800553a:	4603      	mov	r3, r0
 800553c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800553e:	f04f 33ff 	mov.w	r3, #4294967295
 8005542:	9302      	str	r3, [sp, #8]
 8005544:	2301      	movs	r3, #1
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	1dfb      	adds	r3, r7, #7
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	2301      	movs	r3, #1
 800554e:	2200      	movs	r2, #0
 8005550:	2178      	movs	r1, #120	; 0x78
 8005552:	4803      	ldr	r0, [pc, #12]	; (8005560 <ssd1306_WriteCommand+0x2c>)
 8005554:	f7fc fc70 	bl	8001e38 <HAL_I2C_Mem_Write>
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000094 	.word	0x20000094

08005564 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af04      	add	r7, sp, #16
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	f04f 32ff 	mov.w	r2, #4294967295
 8005576:	9202      	str	r2, [sp, #8]
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	2301      	movs	r3, #1
 8005580:	2240      	movs	r2, #64	; 0x40
 8005582:	2178      	movs	r1, #120	; 0x78
 8005584:	4803      	ldr	r0, [pc, #12]	; (8005594 <ssd1306_WriteData+0x30>)
 8005586:	f7fc fc57 	bl	8001e38 <HAL_I2C_Mem_Write>
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000094 	.word	0x20000094

08005598 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800559c:	f7ff ffc3 	bl	8005526 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80055a0:	2064      	movs	r0, #100	; 0x64
 80055a2:	f7fc f8ed 	bl	8001780 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80055a6:	2000      	movs	r0, #0
 80055a8:	f000 f9da 	bl	8005960 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80055ac:	2020      	movs	r0, #32
 80055ae:	f7ff ffc1 	bl	8005534 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80055b2:	2000      	movs	r0, #0
 80055b4:	f7ff ffbe 	bl	8005534 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80055b8:	20b0      	movs	r0, #176	; 0xb0
 80055ba:	f7ff ffbb 	bl	8005534 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80055be:	20c8      	movs	r0, #200	; 0xc8
 80055c0:	f7ff ffb8 	bl	8005534 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80055c4:	2000      	movs	r0, #0
 80055c6:	f7ff ffb5 	bl	8005534 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80055ca:	2010      	movs	r0, #16
 80055cc:	f7ff ffb2 	bl	8005534 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80055d0:	2040      	movs	r0, #64	; 0x40
 80055d2:	f7ff ffaf 	bl	8005534 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80055d6:	20ff      	movs	r0, #255	; 0xff
 80055d8:	f000 f9ae 	bl	8005938 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80055dc:	20a1      	movs	r0, #161	; 0xa1
 80055de:	f7ff ffa9 	bl	8005534 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80055e2:	20a6      	movs	r0, #166	; 0xa6
 80055e4:	f7ff ffa6 	bl	8005534 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80055e8:	20a8      	movs	r0, #168	; 0xa8
 80055ea:	f7ff ffa3 	bl	8005534 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80055ee:	201f      	movs	r0, #31
 80055f0:	f7ff ffa0 	bl	8005534 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80055f4:	20a4      	movs	r0, #164	; 0xa4
 80055f6:	f7ff ff9d 	bl	8005534 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80055fa:	20d3      	movs	r0, #211	; 0xd3
 80055fc:	f7ff ff9a 	bl	8005534 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005600:	2000      	movs	r0, #0
 8005602:	f7ff ff97 	bl	8005534 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005606:	20d5      	movs	r0, #213	; 0xd5
 8005608:	f7ff ff94 	bl	8005534 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800560c:	20f0      	movs	r0, #240	; 0xf0
 800560e:	f7ff ff91 	bl	8005534 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005612:	20d9      	movs	r0, #217	; 0xd9
 8005614:	f7ff ff8e 	bl	8005534 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005618:	2022      	movs	r0, #34	; 0x22
 800561a:	f7ff ff8b 	bl	8005534 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800561e:	20da      	movs	r0, #218	; 0xda
 8005620:	f7ff ff88 	bl	8005534 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8005624:	2002      	movs	r0, #2
 8005626:	f7ff ff85 	bl	8005534 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800562a:	20db      	movs	r0, #219	; 0xdb
 800562c:	f7ff ff82 	bl	8005534 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005630:	2020      	movs	r0, #32
 8005632:	f7ff ff7f 	bl	8005534 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005636:	208d      	movs	r0, #141	; 0x8d
 8005638:	f7ff ff7c 	bl	8005534 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800563c:	2014      	movs	r0, #20
 800563e:	f7ff ff79 	bl	8005534 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005642:	2001      	movs	r0, #1
 8005644:	f000 f98c 	bl	8005960 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005648:	2000      	movs	r0, #0
 800564a:	f000 f80f 	bl	800566c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800564e:	f000 f831 	bl	80056b4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <ssd1306_Init+0xd0>)
 8005654:	2200      	movs	r2, #0
 8005656:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005658:	4b03      	ldr	r3, [pc, #12]	; (8005668 <ssd1306_Init+0xd0>)
 800565a:	2200      	movs	r2, #0
 800565c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800565e:	4b02      	ldr	r3, [pc, #8]	; (8005668 <ssd1306_Init+0xd0>)
 8005660:	2201      	movs	r2, #1
 8005662:	711a      	strb	r2, [r3, #4]
}
 8005664:	bf00      	nop
 8005666:	bd80      	pop	{r7, pc}
 8005668:	200003e0 	.word	0x200003e0

0800566c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	e00d      	b.n	8005698 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <ssd1306_Fill+0x1a>
 8005682:	2100      	movs	r1, #0
 8005684:	e000      	b.n	8005688 <ssd1306_Fill+0x1c>
 8005686:	21ff      	movs	r1, #255	; 0xff
 8005688:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <ssd1306_Fill+0x44>)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	460a      	mov	r2, r1
 8005690:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3301      	adds	r3, #1
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800569e:	d3ed      	bcc.n	800567c <ssd1306_Fill+0x10>
    }
}
 80056a0:	bf00      	nop
 80056a2:	bf00      	nop
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	200001e0 	.word	0x200001e0

080056b4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80056ba:	2300      	movs	r3, #0
 80056bc:	71fb      	strb	r3, [r7, #7]
 80056be:	e016      	b.n	80056ee <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	3b50      	subs	r3, #80	; 0x50
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff ff34 	bl	8005534 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80056cc:	2000      	movs	r0, #0
 80056ce:	f7ff ff31 	bl	8005534 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80056d2:	2010      	movs	r0, #16
 80056d4:	f7ff ff2e 	bl	8005534 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	01db      	lsls	r3, r3, #7
 80056dc:	4a08      	ldr	r2, [pc, #32]	; (8005700 <ssd1306_UpdateScreen+0x4c>)
 80056de:	4413      	add	r3, r2
 80056e0:	2180      	movs	r1, #128	; 0x80
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff ff3e 	bl	8005564 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	3301      	adds	r3, #1
 80056ec:	71fb      	strb	r3, [r7, #7]
 80056ee:	79fb      	ldrb	r3, [r7, #7]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d9e5      	bls.n	80056c0 <ssd1306_UpdateScreen+0xc>
    }
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	200001e0 	.word	0x200001e0

08005704 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	71fb      	strb	r3, [r7, #7]
 800570e:	460b      	mov	r3, r1
 8005710:	71bb      	strb	r3, [r7, #6]
 8005712:	4613      	mov	r3, r2
 8005714:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571a:	2b00      	cmp	r3, #0
 800571c:	db3d      	blt.n	800579a <ssd1306_DrawPixel+0x96>
 800571e:	79bb      	ldrb	r3, [r7, #6]
 8005720:	2b1f      	cmp	r3, #31
 8005722:	d83a      	bhi.n	800579a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005724:	797b      	ldrb	r3, [r7, #5]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d11a      	bne.n	8005760 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800572a:	79fa      	ldrb	r2, [r7, #7]
 800572c:	79bb      	ldrb	r3, [r7, #6]
 800572e:	08db      	lsrs	r3, r3, #3
 8005730:	b2d8      	uxtb	r0, r3
 8005732:	4603      	mov	r3, r0
 8005734:	01db      	lsls	r3, r3, #7
 8005736:	4413      	add	r3, r2
 8005738:	4a1b      	ldr	r2, [pc, #108]	; (80057a8 <ssd1306_DrawPixel+0xa4>)
 800573a:	5cd3      	ldrb	r3, [r2, r3]
 800573c:	b25a      	sxtb	r2, r3
 800573e:	79bb      	ldrb	r3, [r7, #6]
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	2101      	movs	r1, #1
 8005746:	fa01 f303 	lsl.w	r3, r1, r3
 800574a:	b25b      	sxtb	r3, r3
 800574c:	4313      	orrs	r3, r2
 800574e:	b259      	sxtb	r1, r3
 8005750:	79fa      	ldrb	r2, [r7, #7]
 8005752:	4603      	mov	r3, r0
 8005754:	01db      	lsls	r3, r3, #7
 8005756:	4413      	add	r3, r2
 8005758:	b2c9      	uxtb	r1, r1
 800575a:	4a13      	ldr	r2, [pc, #76]	; (80057a8 <ssd1306_DrawPixel+0xa4>)
 800575c:	54d1      	strb	r1, [r2, r3]
 800575e:	e01d      	b.n	800579c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005760:	79fa      	ldrb	r2, [r7, #7]
 8005762:	79bb      	ldrb	r3, [r7, #6]
 8005764:	08db      	lsrs	r3, r3, #3
 8005766:	b2d8      	uxtb	r0, r3
 8005768:	4603      	mov	r3, r0
 800576a:	01db      	lsls	r3, r3, #7
 800576c:	4413      	add	r3, r2
 800576e:	4a0e      	ldr	r2, [pc, #56]	; (80057a8 <ssd1306_DrawPixel+0xa4>)
 8005770:	5cd3      	ldrb	r3, [r2, r3]
 8005772:	b25a      	sxtb	r2, r3
 8005774:	79bb      	ldrb	r3, [r7, #6]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2101      	movs	r1, #1
 800577c:	fa01 f303 	lsl.w	r3, r1, r3
 8005780:	b25b      	sxtb	r3, r3
 8005782:	43db      	mvns	r3, r3
 8005784:	b25b      	sxtb	r3, r3
 8005786:	4013      	ands	r3, r2
 8005788:	b259      	sxtb	r1, r3
 800578a:	79fa      	ldrb	r2, [r7, #7]
 800578c:	4603      	mov	r3, r0
 800578e:	01db      	lsls	r3, r3, #7
 8005790:	4413      	add	r3, r2
 8005792:	b2c9      	uxtb	r1, r1
 8005794:	4a04      	ldr	r2, [pc, #16]	; (80057a8 <ssd1306_DrawPixel+0xa4>)
 8005796:	54d1      	strb	r1, [r2, r3]
 8005798:	e000      	b.n	800579c <ssd1306_DrawPixel+0x98>
        return;
 800579a:	bf00      	nop
    }
}
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	200001e0 	.word	0x200001e0

080057ac <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80057ac:	b590      	push	{r4, r7, lr}
 80057ae:	b089      	sub	sp, #36	; 0x24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4604      	mov	r4, r0
 80057b4:	1d38      	adds	r0, r7, #4
 80057b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80057ba:	461a      	mov	r2, r3
 80057bc:	4623      	mov	r3, r4
 80057be:	73fb      	strb	r3, [r7, #15]
 80057c0:	4613      	mov	r3, r2
 80057c2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b1f      	cmp	r3, #31
 80057c8:	d902      	bls.n	80057d0 <ssd1306_WriteChar+0x24>
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	2b7e      	cmp	r3, #126	; 0x7e
 80057ce:	d901      	bls.n	80057d4 <ssd1306_WriteChar+0x28>
        return 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e06d      	b.n	80058b0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80057d4:	4b38      	ldr	r3, [pc, #224]	; (80058b8 <ssd1306_WriteChar+0x10c>)
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	793b      	ldrb	r3, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	2b80      	cmp	r3, #128	; 0x80
 80057e0:	dc06      	bgt.n	80057f0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80057e2:	4b35      	ldr	r3, [pc, #212]	; (80058b8 <ssd1306_WriteChar+0x10c>)
 80057e4:	885b      	ldrh	r3, [r3, #2]
 80057e6:	461a      	mov	r2, r3
 80057e8:	797b      	ldrb	r3, [r7, #5]
 80057ea:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	dd01      	ble.n	80057f4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e05d      	b.n	80058b0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80057f4:	2300      	movs	r3, #0
 80057f6:	61fb      	str	r3, [r7, #28]
 80057f8:	e04c      	b.n	8005894 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	3b20      	subs	r3, #32
 8005800:	7979      	ldrb	r1, [r7, #5]
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	4619      	mov	r1, r3
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	440b      	add	r3, r1
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005814:	2300      	movs	r3, #0
 8005816:	61bb      	str	r3, [r7, #24]
 8005818:	e034      	b.n	8005884 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d012      	beq.n	8005850 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800582a:	4b23      	ldr	r3, [pc, #140]	; (80058b8 <ssd1306_WriteChar+0x10c>)
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b2da      	uxtb	r2, r3
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	4413      	add	r3, r2
 8005836:	b2d8      	uxtb	r0, r3
 8005838:	4b1f      	ldr	r3, [pc, #124]	; (80058b8 <ssd1306_WriteChar+0x10c>)
 800583a:	885b      	ldrh	r3, [r3, #2]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	4413      	add	r3, r2
 8005844:	b2db      	uxtb	r3, r3
 8005846:	7bba      	ldrb	r2, [r7, #14]
 8005848:	4619      	mov	r1, r3
 800584a:	f7ff ff5b 	bl	8005704 <ssd1306_DrawPixel>
 800584e:	e016      	b.n	800587e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005850:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <ssd1306_WriteChar+0x10c>)
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b2da      	uxtb	r2, r3
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	4413      	add	r3, r2
 800585c:	b2d8      	uxtb	r0, r3
 800585e:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <ssd1306_WriteChar+0x10c>)
 8005860:	885b      	ldrh	r3, [r3, #2]
 8005862:	b2da      	uxtb	r2, r3
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	4413      	add	r3, r2
 800586a:	b2d9      	uxtb	r1, r3
 800586c:	7bbb      	ldrb	r3, [r7, #14]
 800586e:	2b00      	cmp	r3, #0
 8005870:	bf0c      	ite	eq
 8005872:	2301      	moveq	r3, #1
 8005874:	2300      	movne	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	461a      	mov	r2, r3
 800587a:	f7ff ff43 	bl	8005704 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	3301      	adds	r3, #1
 8005882:	61bb      	str	r3, [r7, #24]
 8005884:	793b      	ldrb	r3, [r7, #4]
 8005886:	461a      	mov	r2, r3
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	4293      	cmp	r3, r2
 800588c:	d3c5      	bcc.n	800581a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3301      	adds	r3, #1
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	797b      	ldrb	r3, [r7, #5]
 8005896:	461a      	mov	r2, r3
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	4293      	cmp	r3, r2
 800589c:	d3ad      	bcc.n	80057fa <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800589e:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <ssd1306_WriteChar+0x10c>)
 80058a0:	881a      	ldrh	r2, [r3, #0]
 80058a2:	793b      	ldrb	r3, [r7, #4]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	4b03      	ldr	r3, [pc, #12]	; (80058b8 <ssd1306_WriteChar+0x10c>)
 80058ac:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3724      	adds	r7, #36	; 0x24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd90      	pop	{r4, r7, pc}
 80058b8:	200003e0 	.word	0x200003e0

080058bc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	1d38      	adds	r0, r7, #4
 80058c6:	e880 0006 	stmia.w	r0, {r1, r2}
 80058ca:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80058cc:	e012      	b.n	80058f4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	7818      	ldrb	r0, [r3, #0]
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	1d3a      	adds	r2, r7, #4
 80058d6:	ca06      	ldmia	r2, {r1, r2}
 80058d8:	f7ff ff68 	bl	80057ac <ssd1306_WriteChar>
 80058dc:	4603      	mov	r3, r0
 80058de:	461a      	mov	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d002      	beq.n	80058ee <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	e008      	b.n	8005900 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e8      	bne.n	80058ce <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	781b      	ldrb	r3, [r3, #0]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	460a      	mov	r2, r1
 8005912:	71fb      	strb	r3, [r7, #7]
 8005914:	4613      	mov	r3, r2
 8005916:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	b29a      	uxth	r2, r3
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <ssd1306_SetCursor+0x2c>)
 800591e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005920:	79bb      	ldrb	r3, [r7, #6]
 8005922:	b29a      	uxth	r2, r3
 8005924:	4b03      	ldr	r3, [pc, #12]	; (8005934 <ssd1306_SetCursor+0x2c>)
 8005926:	805a      	strh	r2, [r3, #2]
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	200003e0 	.word	0x200003e0

08005938 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	4603      	mov	r3, r0
 8005940:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005942:	2381      	movs	r3, #129	; 0x81
 8005944:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005946:	7bfb      	ldrb	r3, [r7, #15]
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff fdf3 	bl	8005534 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fdef 	bl	8005534 <ssd1306_WriteCommand>
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005970:	23af      	movs	r3, #175	; 0xaf
 8005972:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005974:	4b08      	ldr	r3, [pc, #32]	; (8005998 <ssd1306_SetDisplayOn+0x38>)
 8005976:	2201      	movs	r2, #1
 8005978:	715a      	strb	r2, [r3, #5]
 800597a:	e004      	b.n	8005986 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800597c:	23ae      	movs	r3, #174	; 0xae
 800597e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <ssd1306_SetDisplayOn+0x38>)
 8005982:	2200      	movs	r2, #0
 8005984:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff fdd3 	bl	8005534 <ssd1306_WriteCommand>
}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	200003e0 	.word	0x200003e0

0800599c <__errno>:
 800599c:	4b01      	ldr	r3, [pc, #4]	; (80059a4 <__errno+0x8>)
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	20000014 	.word	0x20000014

080059a8 <__libc_init_array>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	4d0d      	ldr	r5, [pc, #52]	; (80059e0 <__libc_init_array+0x38>)
 80059ac:	4c0d      	ldr	r4, [pc, #52]	; (80059e4 <__libc_init_array+0x3c>)
 80059ae:	1b64      	subs	r4, r4, r5
 80059b0:	10a4      	asrs	r4, r4, #2
 80059b2:	2600      	movs	r6, #0
 80059b4:	42a6      	cmp	r6, r4
 80059b6:	d109      	bne.n	80059cc <__libc_init_array+0x24>
 80059b8:	4d0b      	ldr	r5, [pc, #44]	; (80059e8 <__libc_init_array+0x40>)
 80059ba:	4c0c      	ldr	r4, [pc, #48]	; (80059ec <__libc_init_array+0x44>)
 80059bc:	f000 fc8e 	bl	80062dc <_init>
 80059c0:	1b64      	subs	r4, r4, r5
 80059c2:	10a4      	asrs	r4, r4, #2
 80059c4:	2600      	movs	r6, #0
 80059c6:	42a6      	cmp	r6, r4
 80059c8:	d105      	bne.n	80059d6 <__libc_init_array+0x2e>
 80059ca:	bd70      	pop	{r4, r5, r6, pc}
 80059cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d0:	4798      	blx	r3
 80059d2:	3601      	adds	r6, #1
 80059d4:	e7ee      	b.n	80059b4 <__libc_init_array+0xc>
 80059d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059da:	4798      	blx	r3
 80059dc:	3601      	adds	r6, #1
 80059de:	e7f2      	b.n	80059c6 <__libc_init_array+0x1e>
 80059e0:	08006b34 	.word	0x08006b34
 80059e4:	08006b34 	.word	0x08006b34
 80059e8:	08006b34 	.word	0x08006b34
 80059ec:	08006b38 	.word	0x08006b38

080059f0 <memcpy>:
 80059f0:	440a      	add	r2, r1
 80059f2:	4291      	cmp	r1, r2
 80059f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059f8:	d100      	bne.n	80059fc <memcpy+0xc>
 80059fa:	4770      	bx	lr
 80059fc:	b510      	push	{r4, lr}
 80059fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a06:	4291      	cmp	r1, r2
 8005a08:	d1f9      	bne.n	80059fe <memcpy+0xe>
 8005a0a:	bd10      	pop	{r4, pc}

08005a0c <memset>:
 8005a0c:	4402      	add	r2, r0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d100      	bne.n	8005a16 <memset+0xa>
 8005a14:	4770      	bx	lr
 8005a16:	f803 1b01 	strb.w	r1, [r3], #1
 8005a1a:	e7f9      	b.n	8005a10 <memset+0x4>

08005a1c <siprintf>:
 8005a1c:	b40e      	push	{r1, r2, r3}
 8005a1e:	b500      	push	{lr}
 8005a20:	b09c      	sub	sp, #112	; 0x70
 8005a22:	ab1d      	add	r3, sp, #116	; 0x74
 8005a24:	9002      	str	r0, [sp, #8]
 8005a26:	9006      	str	r0, [sp, #24]
 8005a28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a2c:	4809      	ldr	r0, [pc, #36]	; (8005a54 <siprintf+0x38>)
 8005a2e:	9107      	str	r1, [sp, #28]
 8005a30:	9104      	str	r1, [sp, #16]
 8005a32:	4909      	ldr	r1, [pc, #36]	; (8005a58 <siprintf+0x3c>)
 8005a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a38:	9105      	str	r1, [sp, #20]
 8005a3a:	6800      	ldr	r0, [r0, #0]
 8005a3c:	9301      	str	r3, [sp, #4]
 8005a3e:	a902      	add	r1, sp, #8
 8005a40:	f000 f868 	bl	8005b14 <_svfiprintf_r>
 8005a44:	9b02      	ldr	r3, [sp, #8]
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	b01c      	add	sp, #112	; 0x70
 8005a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a50:	b003      	add	sp, #12
 8005a52:	4770      	bx	lr
 8005a54:	20000014 	.word	0x20000014
 8005a58:	ffff0208 	.word	0xffff0208

08005a5c <__ssputs_r>:
 8005a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a60:	688e      	ldr	r6, [r1, #8]
 8005a62:	429e      	cmp	r6, r3
 8005a64:	4682      	mov	sl, r0
 8005a66:	460c      	mov	r4, r1
 8005a68:	4690      	mov	r8, r2
 8005a6a:	461f      	mov	r7, r3
 8005a6c:	d838      	bhi.n	8005ae0 <__ssputs_r+0x84>
 8005a6e:	898a      	ldrh	r2, [r1, #12]
 8005a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a74:	d032      	beq.n	8005adc <__ssputs_r+0x80>
 8005a76:	6825      	ldr	r5, [r4, #0]
 8005a78:	6909      	ldr	r1, [r1, #16]
 8005a7a:	eba5 0901 	sub.w	r9, r5, r1
 8005a7e:	6965      	ldr	r5, [r4, #20]
 8005a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a88:	3301      	adds	r3, #1
 8005a8a:	444b      	add	r3, r9
 8005a8c:	106d      	asrs	r5, r5, #1
 8005a8e:	429d      	cmp	r5, r3
 8005a90:	bf38      	it	cc
 8005a92:	461d      	movcc	r5, r3
 8005a94:	0553      	lsls	r3, r2, #21
 8005a96:	d531      	bpl.n	8005afc <__ssputs_r+0xa0>
 8005a98:	4629      	mov	r1, r5
 8005a9a:	f000 fb55 	bl	8006148 <_malloc_r>
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	b950      	cbnz	r0, 8005ab8 <__ssputs_r+0x5c>
 8005aa2:	230c      	movs	r3, #12
 8005aa4:	f8ca 3000 	str.w	r3, [sl]
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aae:	81a3      	strh	r3, [r4, #12]
 8005ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab8:	6921      	ldr	r1, [r4, #16]
 8005aba:	464a      	mov	r2, r9
 8005abc:	f7ff ff98 	bl	80059f0 <memcpy>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aca:	81a3      	strh	r3, [r4, #12]
 8005acc:	6126      	str	r6, [r4, #16]
 8005ace:	6165      	str	r5, [r4, #20]
 8005ad0:	444e      	add	r6, r9
 8005ad2:	eba5 0509 	sub.w	r5, r5, r9
 8005ad6:	6026      	str	r6, [r4, #0]
 8005ad8:	60a5      	str	r5, [r4, #8]
 8005ada:	463e      	mov	r6, r7
 8005adc:	42be      	cmp	r6, r7
 8005ade:	d900      	bls.n	8005ae2 <__ssputs_r+0x86>
 8005ae0:	463e      	mov	r6, r7
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	4632      	mov	r2, r6
 8005ae6:	4641      	mov	r1, r8
 8005ae8:	f000 faa8 	bl	800603c <memmove>
 8005aec:	68a3      	ldr	r3, [r4, #8]
 8005aee:	1b9b      	subs	r3, r3, r6
 8005af0:	60a3      	str	r3, [r4, #8]
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	4433      	add	r3, r6
 8005af6:	6023      	str	r3, [r4, #0]
 8005af8:	2000      	movs	r0, #0
 8005afa:	e7db      	b.n	8005ab4 <__ssputs_r+0x58>
 8005afc:	462a      	mov	r2, r5
 8005afe:	f000 fb97 	bl	8006230 <_realloc_r>
 8005b02:	4606      	mov	r6, r0
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d1e1      	bne.n	8005acc <__ssputs_r+0x70>
 8005b08:	6921      	ldr	r1, [r4, #16]
 8005b0a:	4650      	mov	r0, sl
 8005b0c:	f000 fab0 	bl	8006070 <_free_r>
 8005b10:	e7c7      	b.n	8005aa2 <__ssputs_r+0x46>
	...

08005b14 <_svfiprintf_r>:
 8005b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b18:	4698      	mov	r8, r3
 8005b1a:	898b      	ldrh	r3, [r1, #12]
 8005b1c:	061b      	lsls	r3, r3, #24
 8005b1e:	b09d      	sub	sp, #116	; 0x74
 8005b20:	4607      	mov	r7, r0
 8005b22:	460d      	mov	r5, r1
 8005b24:	4614      	mov	r4, r2
 8005b26:	d50e      	bpl.n	8005b46 <_svfiprintf_r+0x32>
 8005b28:	690b      	ldr	r3, [r1, #16]
 8005b2a:	b963      	cbnz	r3, 8005b46 <_svfiprintf_r+0x32>
 8005b2c:	2140      	movs	r1, #64	; 0x40
 8005b2e:	f000 fb0b 	bl	8006148 <_malloc_r>
 8005b32:	6028      	str	r0, [r5, #0]
 8005b34:	6128      	str	r0, [r5, #16]
 8005b36:	b920      	cbnz	r0, 8005b42 <_svfiprintf_r+0x2e>
 8005b38:	230c      	movs	r3, #12
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b40:	e0d1      	b.n	8005ce6 <_svfiprintf_r+0x1d2>
 8005b42:	2340      	movs	r3, #64	; 0x40
 8005b44:	616b      	str	r3, [r5, #20]
 8005b46:	2300      	movs	r3, #0
 8005b48:	9309      	str	r3, [sp, #36]	; 0x24
 8005b4a:	2320      	movs	r3, #32
 8005b4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b54:	2330      	movs	r3, #48	; 0x30
 8005b56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d00 <_svfiprintf_r+0x1ec>
 8005b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b5e:	f04f 0901 	mov.w	r9, #1
 8005b62:	4623      	mov	r3, r4
 8005b64:	469a      	mov	sl, r3
 8005b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b6a:	b10a      	cbz	r2, 8005b70 <_svfiprintf_r+0x5c>
 8005b6c:	2a25      	cmp	r2, #37	; 0x25
 8005b6e:	d1f9      	bne.n	8005b64 <_svfiprintf_r+0x50>
 8005b70:	ebba 0b04 	subs.w	fp, sl, r4
 8005b74:	d00b      	beq.n	8005b8e <_svfiprintf_r+0x7a>
 8005b76:	465b      	mov	r3, fp
 8005b78:	4622      	mov	r2, r4
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f7ff ff6d 	bl	8005a5c <__ssputs_r>
 8005b82:	3001      	adds	r0, #1
 8005b84:	f000 80aa 	beq.w	8005cdc <_svfiprintf_r+0x1c8>
 8005b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b8a:	445a      	add	r2, fp
 8005b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 80a2 	beq.w	8005cdc <_svfiprintf_r+0x1c8>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ba2:	f10a 0a01 	add.w	sl, sl, #1
 8005ba6:	9304      	str	r3, [sp, #16]
 8005ba8:	9307      	str	r3, [sp, #28]
 8005baa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bae:	931a      	str	r3, [sp, #104]	; 0x68
 8005bb0:	4654      	mov	r4, sl
 8005bb2:	2205      	movs	r2, #5
 8005bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb8:	4851      	ldr	r0, [pc, #324]	; (8005d00 <_svfiprintf_r+0x1ec>)
 8005bba:	f7fa fb11 	bl	80001e0 <memchr>
 8005bbe:	9a04      	ldr	r2, [sp, #16]
 8005bc0:	b9d8      	cbnz	r0, 8005bfa <_svfiprintf_r+0xe6>
 8005bc2:	06d0      	lsls	r0, r2, #27
 8005bc4:	bf44      	itt	mi
 8005bc6:	2320      	movmi	r3, #32
 8005bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bcc:	0711      	lsls	r1, r2, #28
 8005bce:	bf44      	itt	mi
 8005bd0:	232b      	movmi	r3, #43	; 0x2b
 8005bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bda:	2b2a      	cmp	r3, #42	; 0x2a
 8005bdc:	d015      	beq.n	8005c0a <_svfiprintf_r+0xf6>
 8005bde:	9a07      	ldr	r2, [sp, #28]
 8005be0:	4654      	mov	r4, sl
 8005be2:	2000      	movs	r0, #0
 8005be4:	f04f 0c0a 	mov.w	ip, #10
 8005be8:	4621      	mov	r1, r4
 8005bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bee:	3b30      	subs	r3, #48	; 0x30
 8005bf0:	2b09      	cmp	r3, #9
 8005bf2:	d94e      	bls.n	8005c92 <_svfiprintf_r+0x17e>
 8005bf4:	b1b0      	cbz	r0, 8005c24 <_svfiprintf_r+0x110>
 8005bf6:	9207      	str	r2, [sp, #28]
 8005bf8:	e014      	b.n	8005c24 <_svfiprintf_r+0x110>
 8005bfa:	eba0 0308 	sub.w	r3, r0, r8
 8005bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8005c02:	4313      	orrs	r3, r2
 8005c04:	9304      	str	r3, [sp, #16]
 8005c06:	46a2      	mov	sl, r4
 8005c08:	e7d2      	b.n	8005bb0 <_svfiprintf_r+0x9c>
 8005c0a:	9b03      	ldr	r3, [sp, #12]
 8005c0c:	1d19      	adds	r1, r3, #4
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	9103      	str	r1, [sp, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	bfbb      	ittet	lt
 8005c16:	425b      	neglt	r3, r3
 8005c18:	f042 0202 	orrlt.w	r2, r2, #2
 8005c1c:	9307      	strge	r3, [sp, #28]
 8005c1e:	9307      	strlt	r3, [sp, #28]
 8005c20:	bfb8      	it	lt
 8005c22:	9204      	strlt	r2, [sp, #16]
 8005c24:	7823      	ldrb	r3, [r4, #0]
 8005c26:	2b2e      	cmp	r3, #46	; 0x2e
 8005c28:	d10c      	bne.n	8005c44 <_svfiprintf_r+0x130>
 8005c2a:	7863      	ldrb	r3, [r4, #1]
 8005c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c2e:	d135      	bne.n	8005c9c <_svfiprintf_r+0x188>
 8005c30:	9b03      	ldr	r3, [sp, #12]
 8005c32:	1d1a      	adds	r2, r3, #4
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	9203      	str	r2, [sp, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bfb8      	it	lt
 8005c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c40:	3402      	adds	r4, #2
 8005c42:	9305      	str	r3, [sp, #20]
 8005c44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d10 <_svfiprintf_r+0x1fc>
 8005c48:	7821      	ldrb	r1, [r4, #0]
 8005c4a:	2203      	movs	r2, #3
 8005c4c:	4650      	mov	r0, sl
 8005c4e:	f7fa fac7 	bl	80001e0 <memchr>
 8005c52:	b140      	cbz	r0, 8005c66 <_svfiprintf_r+0x152>
 8005c54:	2340      	movs	r3, #64	; 0x40
 8005c56:	eba0 000a 	sub.w	r0, r0, sl
 8005c5a:	fa03 f000 	lsl.w	r0, r3, r0
 8005c5e:	9b04      	ldr	r3, [sp, #16]
 8005c60:	4303      	orrs	r3, r0
 8005c62:	3401      	adds	r4, #1
 8005c64:	9304      	str	r3, [sp, #16]
 8005c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c6a:	4826      	ldr	r0, [pc, #152]	; (8005d04 <_svfiprintf_r+0x1f0>)
 8005c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c70:	2206      	movs	r2, #6
 8005c72:	f7fa fab5 	bl	80001e0 <memchr>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d038      	beq.n	8005cec <_svfiprintf_r+0x1d8>
 8005c7a:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <_svfiprintf_r+0x1f4>)
 8005c7c:	bb1b      	cbnz	r3, 8005cc6 <_svfiprintf_r+0x1b2>
 8005c7e:	9b03      	ldr	r3, [sp, #12]
 8005c80:	3307      	adds	r3, #7
 8005c82:	f023 0307 	bic.w	r3, r3, #7
 8005c86:	3308      	adds	r3, #8
 8005c88:	9303      	str	r3, [sp, #12]
 8005c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c8c:	4433      	add	r3, r6
 8005c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c90:	e767      	b.n	8005b62 <_svfiprintf_r+0x4e>
 8005c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c96:	460c      	mov	r4, r1
 8005c98:	2001      	movs	r0, #1
 8005c9a:	e7a5      	b.n	8005be8 <_svfiprintf_r+0xd4>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	3401      	adds	r4, #1
 8005ca0:	9305      	str	r3, [sp, #20]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f04f 0c0a 	mov.w	ip, #10
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cae:	3a30      	subs	r2, #48	; 0x30
 8005cb0:	2a09      	cmp	r2, #9
 8005cb2:	d903      	bls.n	8005cbc <_svfiprintf_r+0x1a8>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0c5      	beq.n	8005c44 <_svfiprintf_r+0x130>
 8005cb8:	9105      	str	r1, [sp, #20]
 8005cba:	e7c3      	b.n	8005c44 <_svfiprintf_r+0x130>
 8005cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e7f0      	b.n	8005ca8 <_svfiprintf_r+0x194>
 8005cc6:	ab03      	add	r3, sp, #12
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	462a      	mov	r2, r5
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <_svfiprintf_r+0x1f8>)
 8005cce:	a904      	add	r1, sp, #16
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	f3af 8000 	nop.w
 8005cd6:	1c42      	adds	r2, r0, #1
 8005cd8:	4606      	mov	r6, r0
 8005cda:	d1d6      	bne.n	8005c8a <_svfiprintf_r+0x176>
 8005cdc:	89ab      	ldrh	r3, [r5, #12]
 8005cde:	065b      	lsls	r3, r3, #25
 8005ce0:	f53f af2c 	bmi.w	8005b3c <_svfiprintf_r+0x28>
 8005ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ce6:	b01d      	add	sp, #116	; 0x74
 8005ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cec:	ab03      	add	r3, sp, #12
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	462a      	mov	r2, r5
 8005cf2:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <_svfiprintf_r+0x1f8>)
 8005cf4:	a904      	add	r1, sp, #16
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	f000 f87a 	bl	8005df0 <_printf_i>
 8005cfc:	e7eb      	b.n	8005cd6 <_svfiprintf_r+0x1c2>
 8005cfe:	bf00      	nop
 8005d00:	08006af8 	.word	0x08006af8
 8005d04:	08006b02 	.word	0x08006b02
 8005d08:	00000000 	.word	0x00000000
 8005d0c:	08005a5d 	.word	0x08005a5d
 8005d10:	08006afe 	.word	0x08006afe

08005d14 <_printf_common>:
 8005d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d18:	4616      	mov	r6, r2
 8005d1a:	4699      	mov	r9, r3
 8005d1c:	688a      	ldr	r2, [r1, #8]
 8005d1e:	690b      	ldr	r3, [r1, #16]
 8005d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d24:	4293      	cmp	r3, r2
 8005d26:	bfb8      	it	lt
 8005d28:	4613      	movlt	r3, r2
 8005d2a:	6033      	str	r3, [r6, #0]
 8005d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d30:	4607      	mov	r7, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	b10a      	cbz	r2, 8005d3a <_printf_common+0x26>
 8005d36:	3301      	adds	r3, #1
 8005d38:	6033      	str	r3, [r6, #0]
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	0699      	lsls	r1, r3, #26
 8005d3e:	bf42      	ittt	mi
 8005d40:	6833      	ldrmi	r3, [r6, #0]
 8005d42:	3302      	addmi	r3, #2
 8005d44:	6033      	strmi	r3, [r6, #0]
 8005d46:	6825      	ldr	r5, [r4, #0]
 8005d48:	f015 0506 	ands.w	r5, r5, #6
 8005d4c:	d106      	bne.n	8005d5c <_printf_common+0x48>
 8005d4e:	f104 0a19 	add.w	sl, r4, #25
 8005d52:	68e3      	ldr	r3, [r4, #12]
 8005d54:	6832      	ldr	r2, [r6, #0]
 8005d56:	1a9b      	subs	r3, r3, r2
 8005d58:	42ab      	cmp	r3, r5
 8005d5a:	dc26      	bgt.n	8005daa <_printf_common+0x96>
 8005d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d60:	1e13      	subs	r3, r2, #0
 8005d62:	6822      	ldr	r2, [r4, #0]
 8005d64:	bf18      	it	ne
 8005d66:	2301      	movne	r3, #1
 8005d68:	0692      	lsls	r2, r2, #26
 8005d6a:	d42b      	bmi.n	8005dc4 <_printf_common+0xb0>
 8005d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d70:	4649      	mov	r1, r9
 8005d72:	4638      	mov	r0, r7
 8005d74:	47c0      	blx	r8
 8005d76:	3001      	adds	r0, #1
 8005d78:	d01e      	beq.n	8005db8 <_printf_common+0xa4>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	68e5      	ldr	r5, [r4, #12]
 8005d7e:	6832      	ldr	r2, [r6, #0]
 8005d80:	f003 0306 	and.w	r3, r3, #6
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	bf08      	it	eq
 8005d88:	1aad      	subeq	r5, r5, r2
 8005d8a:	68a3      	ldr	r3, [r4, #8]
 8005d8c:	6922      	ldr	r2, [r4, #16]
 8005d8e:	bf0c      	ite	eq
 8005d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d94:	2500      	movne	r5, #0
 8005d96:	4293      	cmp	r3, r2
 8005d98:	bfc4      	itt	gt
 8005d9a:	1a9b      	subgt	r3, r3, r2
 8005d9c:	18ed      	addgt	r5, r5, r3
 8005d9e:	2600      	movs	r6, #0
 8005da0:	341a      	adds	r4, #26
 8005da2:	42b5      	cmp	r5, r6
 8005da4:	d11a      	bne.n	8005ddc <_printf_common+0xc8>
 8005da6:	2000      	movs	r0, #0
 8005da8:	e008      	b.n	8005dbc <_printf_common+0xa8>
 8005daa:	2301      	movs	r3, #1
 8005dac:	4652      	mov	r2, sl
 8005dae:	4649      	mov	r1, r9
 8005db0:	4638      	mov	r0, r7
 8005db2:	47c0      	blx	r8
 8005db4:	3001      	adds	r0, #1
 8005db6:	d103      	bne.n	8005dc0 <_printf_common+0xac>
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc0:	3501      	adds	r5, #1
 8005dc2:	e7c6      	b.n	8005d52 <_printf_common+0x3e>
 8005dc4:	18e1      	adds	r1, r4, r3
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	2030      	movs	r0, #48	; 0x30
 8005dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dce:	4422      	add	r2, r4
 8005dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dd8:	3302      	adds	r3, #2
 8005dda:	e7c7      	b.n	8005d6c <_printf_common+0x58>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	4622      	mov	r2, r4
 8005de0:	4649      	mov	r1, r9
 8005de2:	4638      	mov	r0, r7
 8005de4:	47c0      	blx	r8
 8005de6:	3001      	adds	r0, #1
 8005de8:	d0e6      	beq.n	8005db8 <_printf_common+0xa4>
 8005dea:	3601      	adds	r6, #1
 8005dec:	e7d9      	b.n	8005da2 <_printf_common+0x8e>
	...

08005df0 <_printf_i>:
 8005df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df4:	7e0f      	ldrb	r7, [r1, #24]
 8005df6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005df8:	2f78      	cmp	r7, #120	; 0x78
 8005dfa:	4691      	mov	r9, r2
 8005dfc:	4680      	mov	r8, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	469a      	mov	sl, r3
 8005e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e06:	d807      	bhi.n	8005e18 <_printf_i+0x28>
 8005e08:	2f62      	cmp	r7, #98	; 0x62
 8005e0a:	d80a      	bhi.n	8005e22 <_printf_i+0x32>
 8005e0c:	2f00      	cmp	r7, #0
 8005e0e:	f000 80d8 	beq.w	8005fc2 <_printf_i+0x1d2>
 8005e12:	2f58      	cmp	r7, #88	; 0x58
 8005e14:	f000 80a3 	beq.w	8005f5e <_printf_i+0x16e>
 8005e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e20:	e03a      	b.n	8005e98 <_printf_i+0xa8>
 8005e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e26:	2b15      	cmp	r3, #21
 8005e28:	d8f6      	bhi.n	8005e18 <_printf_i+0x28>
 8005e2a:	a101      	add	r1, pc, #4	; (adr r1, 8005e30 <_printf_i+0x40>)
 8005e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e30:	08005e89 	.word	0x08005e89
 8005e34:	08005e9d 	.word	0x08005e9d
 8005e38:	08005e19 	.word	0x08005e19
 8005e3c:	08005e19 	.word	0x08005e19
 8005e40:	08005e19 	.word	0x08005e19
 8005e44:	08005e19 	.word	0x08005e19
 8005e48:	08005e9d 	.word	0x08005e9d
 8005e4c:	08005e19 	.word	0x08005e19
 8005e50:	08005e19 	.word	0x08005e19
 8005e54:	08005e19 	.word	0x08005e19
 8005e58:	08005e19 	.word	0x08005e19
 8005e5c:	08005fa9 	.word	0x08005fa9
 8005e60:	08005ecd 	.word	0x08005ecd
 8005e64:	08005f8b 	.word	0x08005f8b
 8005e68:	08005e19 	.word	0x08005e19
 8005e6c:	08005e19 	.word	0x08005e19
 8005e70:	08005fcb 	.word	0x08005fcb
 8005e74:	08005e19 	.word	0x08005e19
 8005e78:	08005ecd 	.word	0x08005ecd
 8005e7c:	08005e19 	.word	0x08005e19
 8005e80:	08005e19 	.word	0x08005e19
 8005e84:	08005f93 	.word	0x08005f93
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	1d1a      	adds	r2, r3, #4
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	602a      	str	r2, [r5, #0]
 8005e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e0a3      	b.n	8005fe4 <_printf_i+0x1f4>
 8005e9c:	6820      	ldr	r0, [r4, #0]
 8005e9e:	6829      	ldr	r1, [r5, #0]
 8005ea0:	0606      	lsls	r6, r0, #24
 8005ea2:	f101 0304 	add.w	r3, r1, #4
 8005ea6:	d50a      	bpl.n	8005ebe <_printf_i+0xce>
 8005ea8:	680e      	ldr	r6, [r1, #0]
 8005eaa:	602b      	str	r3, [r5, #0]
 8005eac:	2e00      	cmp	r6, #0
 8005eae:	da03      	bge.n	8005eb8 <_printf_i+0xc8>
 8005eb0:	232d      	movs	r3, #45	; 0x2d
 8005eb2:	4276      	negs	r6, r6
 8005eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb8:	485e      	ldr	r0, [pc, #376]	; (8006034 <_printf_i+0x244>)
 8005eba:	230a      	movs	r3, #10
 8005ebc:	e019      	b.n	8005ef2 <_printf_i+0x102>
 8005ebe:	680e      	ldr	r6, [r1, #0]
 8005ec0:	602b      	str	r3, [r5, #0]
 8005ec2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ec6:	bf18      	it	ne
 8005ec8:	b236      	sxthne	r6, r6
 8005eca:	e7ef      	b.n	8005eac <_printf_i+0xbc>
 8005ecc:	682b      	ldr	r3, [r5, #0]
 8005ece:	6820      	ldr	r0, [r4, #0]
 8005ed0:	1d19      	adds	r1, r3, #4
 8005ed2:	6029      	str	r1, [r5, #0]
 8005ed4:	0601      	lsls	r1, r0, #24
 8005ed6:	d501      	bpl.n	8005edc <_printf_i+0xec>
 8005ed8:	681e      	ldr	r6, [r3, #0]
 8005eda:	e002      	b.n	8005ee2 <_printf_i+0xf2>
 8005edc:	0646      	lsls	r6, r0, #25
 8005ede:	d5fb      	bpl.n	8005ed8 <_printf_i+0xe8>
 8005ee0:	881e      	ldrh	r6, [r3, #0]
 8005ee2:	4854      	ldr	r0, [pc, #336]	; (8006034 <_printf_i+0x244>)
 8005ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ee6:	bf0c      	ite	eq
 8005ee8:	2308      	moveq	r3, #8
 8005eea:	230a      	movne	r3, #10
 8005eec:	2100      	movs	r1, #0
 8005eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ef2:	6865      	ldr	r5, [r4, #4]
 8005ef4:	60a5      	str	r5, [r4, #8]
 8005ef6:	2d00      	cmp	r5, #0
 8005ef8:	bfa2      	ittt	ge
 8005efa:	6821      	ldrge	r1, [r4, #0]
 8005efc:	f021 0104 	bicge.w	r1, r1, #4
 8005f00:	6021      	strge	r1, [r4, #0]
 8005f02:	b90e      	cbnz	r6, 8005f08 <_printf_i+0x118>
 8005f04:	2d00      	cmp	r5, #0
 8005f06:	d04d      	beq.n	8005fa4 <_printf_i+0x1b4>
 8005f08:	4615      	mov	r5, r2
 8005f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f0e:	fb03 6711 	mls	r7, r3, r1, r6
 8005f12:	5dc7      	ldrb	r7, [r0, r7]
 8005f14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f18:	4637      	mov	r7, r6
 8005f1a:	42bb      	cmp	r3, r7
 8005f1c:	460e      	mov	r6, r1
 8005f1e:	d9f4      	bls.n	8005f0a <_printf_i+0x11a>
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d10b      	bne.n	8005f3c <_printf_i+0x14c>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	07de      	lsls	r6, r3, #31
 8005f28:	d508      	bpl.n	8005f3c <_printf_i+0x14c>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	6861      	ldr	r1, [r4, #4]
 8005f2e:	4299      	cmp	r1, r3
 8005f30:	bfde      	ittt	le
 8005f32:	2330      	movle	r3, #48	; 0x30
 8005f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f3c:	1b52      	subs	r2, r2, r5
 8005f3e:	6122      	str	r2, [r4, #16]
 8005f40:	f8cd a000 	str.w	sl, [sp]
 8005f44:	464b      	mov	r3, r9
 8005f46:	aa03      	add	r2, sp, #12
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	f7ff fee2 	bl	8005d14 <_printf_common>
 8005f50:	3001      	adds	r0, #1
 8005f52:	d14c      	bne.n	8005fee <_printf_i+0x1fe>
 8005f54:	f04f 30ff 	mov.w	r0, #4294967295
 8005f58:	b004      	add	sp, #16
 8005f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5e:	4835      	ldr	r0, [pc, #212]	; (8006034 <_printf_i+0x244>)
 8005f60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f64:	6829      	ldr	r1, [r5, #0]
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f6c:	6029      	str	r1, [r5, #0]
 8005f6e:	061d      	lsls	r5, r3, #24
 8005f70:	d514      	bpl.n	8005f9c <_printf_i+0x1ac>
 8005f72:	07df      	lsls	r7, r3, #31
 8005f74:	bf44      	itt	mi
 8005f76:	f043 0320 	orrmi.w	r3, r3, #32
 8005f7a:	6023      	strmi	r3, [r4, #0]
 8005f7c:	b91e      	cbnz	r6, 8005f86 <_printf_i+0x196>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	f023 0320 	bic.w	r3, r3, #32
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	2310      	movs	r3, #16
 8005f88:	e7b0      	b.n	8005eec <_printf_i+0xfc>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	f043 0320 	orr.w	r3, r3, #32
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	2378      	movs	r3, #120	; 0x78
 8005f94:	4828      	ldr	r0, [pc, #160]	; (8006038 <_printf_i+0x248>)
 8005f96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f9a:	e7e3      	b.n	8005f64 <_printf_i+0x174>
 8005f9c:	0659      	lsls	r1, r3, #25
 8005f9e:	bf48      	it	mi
 8005fa0:	b2b6      	uxthmi	r6, r6
 8005fa2:	e7e6      	b.n	8005f72 <_printf_i+0x182>
 8005fa4:	4615      	mov	r5, r2
 8005fa6:	e7bb      	b.n	8005f20 <_printf_i+0x130>
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	6826      	ldr	r6, [r4, #0]
 8005fac:	6961      	ldr	r1, [r4, #20]
 8005fae:	1d18      	adds	r0, r3, #4
 8005fb0:	6028      	str	r0, [r5, #0]
 8005fb2:	0635      	lsls	r5, r6, #24
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	d501      	bpl.n	8005fbc <_printf_i+0x1cc>
 8005fb8:	6019      	str	r1, [r3, #0]
 8005fba:	e002      	b.n	8005fc2 <_printf_i+0x1d2>
 8005fbc:	0670      	lsls	r0, r6, #25
 8005fbe:	d5fb      	bpl.n	8005fb8 <_printf_i+0x1c8>
 8005fc0:	8019      	strh	r1, [r3, #0]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6123      	str	r3, [r4, #16]
 8005fc6:	4615      	mov	r5, r2
 8005fc8:	e7ba      	b.n	8005f40 <_printf_i+0x150>
 8005fca:	682b      	ldr	r3, [r5, #0]
 8005fcc:	1d1a      	adds	r2, r3, #4
 8005fce:	602a      	str	r2, [r5, #0]
 8005fd0:	681d      	ldr	r5, [r3, #0]
 8005fd2:	6862      	ldr	r2, [r4, #4]
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f7fa f902 	bl	80001e0 <memchr>
 8005fdc:	b108      	cbz	r0, 8005fe2 <_printf_i+0x1f2>
 8005fde:	1b40      	subs	r0, r0, r5
 8005fe0:	6060      	str	r0, [r4, #4]
 8005fe2:	6863      	ldr	r3, [r4, #4]
 8005fe4:	6123      	str	r3, [r4, #16]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fec:	e7a8      	b.n	8005f40 <_printf_i+0x150>
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	462a      	mov	r2, r5
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	47d0      	blx	sl
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d0ab      	beq.n	8005f54 <_printf_i+0x164>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	079b      	lsls	r3, r3, #30
 8006000:	d413      	bmi.n	800602a <_printf_i+0x23a>
 8006002:	68e0      	ldr	r0, [r4, #12]
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	4298      	cmp	r0, r3
 8006008:	bfb8      	it	lt
 800600a:	4618      	movlt	r0, r3
 800600c:	e7a4      	b.n	8005f58 <_printf_i+0x168>
 800600e:	2301      	movs	r3, #1
 8006010:	4632      	mov	r2, r6
 8006012:	4649      	mov	r1, r9
 8006014:	4640      	mov	r0, r8
 8006016:	47d0      	blx	sl
 8006018:	3001      	adds	r0, #1
 800601a:	d09b      	beq.n	8005f54 <_printf_i+0x164>
 800601c:	3501      	adds	r5, #1
 800601e:	68e3      	ldr	r3, [r4, #12]
 8006020:	9903      	ldr	r1, [sp, #12]
 8006022:	1a5b      	subs	r3, r3, r1
 8006024:	42ab      	cmp	r3, r5
 8006026:	dcf2      	bgt.n	800600e <_printf_i+0x21e>
 8006028:	e7eb      	b.n	8006002 <_printf_i+0x212>
 800602a:	2500      	movs	r5, #0
 800602c:	f104 0619 	add.w	r6, r4, #25
 8006030:	e7f5      	b.n	800601e <_printf_i+0x22e>
 8006032:	bf00      	nop
 8006034:	08006b09 	.word	0x08006b09
 8006038:	08006b1a 	.word	0x08006b1a

0800603c <memmove>:
 800603c:	4288      	cmp	r0, r1
 800603e:	b510      	push	{r4, lr}
 8006040:	eb01 0402 	add.w	r4, r1, r2
 8006044:	d902      	bls.n	800604c <memmove+0x10>
 8006046:	4284      	cmp	r4, r0
 8006048:	4623      	mov	r3, r4
 800604a:	d807      	bhi.n	800605c <memmove+0x20>
 800604c:	1e43      	subs	r3, r0, #1
 800604e:	42a1      	cmp	r1, r4
 8006050:	d008      	beq.n	8006064 <memmove+0x28>
 8006052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800605a:	e7f8      	b.n	800604e <memmove+0x12>
 800605c:	4402      	add	r2, r0
 800605e:	4601      	mov	r1, r0
 8006060:	428a      	cmp	r2, r1
 8006062:	d100      	bne.n	8006066 <memmove+0x2a>
 8006064:	bd10      	pop	{r4, pc}
 8006066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800606a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800606e:	e7f7      	b.n	8006060 <memmove+0x24>

08006070 <_free_r>:
 8006070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006072:	2900      	cmp	r1, #0
 8006074:	d044      	beq.n	8006100 <_free_r+0x90>
 8006076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800607a:	9001      	str	r0, [sp, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f1a1 0404 	sub.w	r4, r1, #4
 8006082:	bfb8      	it	lt
 8006084:	18e4      	addlt	r4, r4, r3
 8006086:	f000 f913 	bl	80062b0 <__malloc_lock>
 800608a:	4a1e      	ldr	r2, [pc, #120]	; (8006104 <_free_r+0x94>)
 800608c:	9801      	ldr	r0, [sp, #4]
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	b933      	cbnz	r3, 80060a0 <_free_r+0x30>
 8006092:	6063      	str	r3, [r4, #4]
 8006094:	6014      	str	r4, [r2, #0]
 8006096:	b003      	add	sp, #12
 8006098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800609c:	f000 b90e 	b.w	80062bc <__malloc_unlock>
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d908      	bls.n	80060b6 <_free_r+0x46>
 80060a4:	6825      	ldr	r5, [r4, #0]
 80060a6:	1961      	adds	r1, r4, r5
 80060a8:	428b      	cmp	r3, r1
 80060aa:	bf01      	itttt	eq
 80060ac:	6819      	ldreq	r1, [r3, #0]
 80060ae:	685b      	ldreq	r3, [r3, #4]
 80060b0:	1949      	addeq	r1, r1, r5
 80060b2:	6021      	streq	r1, [r4, #0]
 80060b4:	e7ed      	b.n	8006092 <_free_r+0x22>
 80060b6:	461a      	mov	r2, r3
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	b10b      	cbz	r3, 80060c0 <_free_r+0x50>
 80060bc:	42a3      	cmp	r3, r4
 80060be:	d9fa      	bls.n	80060b6 <_free_r+0x46>
 80060c0:	6811      	ldr	r1, [r2, #0]
 80060c2:	1855      	adds	r5, r2, r1
 80060c4:	42a5      	cmp	r5, r4
 80060c6:	d10b      	bne.n	80060e0 <_free_r+0x70>
 80060c8:	6824      	ldr	r4, [r4, #0]
 80060ca:	4421      	add	r1, r4
 80060cc:	1854      	adds	r4, r2, r1
 80060ce:	42a3      	cmp	r3, r4
 80060d0:	6011      	str	r1, [r2, #0]
 80060d2:	d1e0      	bne.n	8006096 <_free_r+0x26>
 80060d4:	681c      	ldr	r4, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	6053      	str	r3, [r2, #4]
 80060da:	4421      	add	r1, r4
 80060dc:	6011      	str	r1, [r2, #0]
 80060de:	e7da      	b.n	8006096 <_free_r+0x26>
 80060e0:	d902      	bls.n	80060e8 <_free_r+0x78>
 80060e2:	230c      	movs	r3, #12
 80060e4:	6003      	str	r3, [r0, #0]
 80060e6:	e7d6      	b.n	8006096 <_free_r+0x26>
 80060e8:	6825      	ldr	r5, [r4, #0]
 80060ea:	1961      	adds	r1, r4, r5
 80060ec:	428b      	cmp	r3, r1
 80060ee:	bf04      	itt	eq
 80060f0:	6819      	ldreq	r1, [r3, #0]
 80060f2:	685b      	ldreq	r3, [r3, #4]
 80060f4:	6063      	str	r3, [r4, #4]
 80060f6:	bf04      	itt	eq
 80060f8:	1949      	addeq	r1, r1, r5
 80060fa:	6021      	streq	r1, [r4, #0]
 80060fc:	6054      	str	r4, [r2, #4]
 80060fe:	e7ca      	b.n	8006096 <_free_r+0x26>
 8006100:	b003      	add	sp, #12
 8006102:	bd30      	pop	{r4, r5, pc}
 8006104:	200003e8 	.word	0x200003e8

08006108 <sbrk_aligned>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	4e0e      	ldr	r6, [pc, #56]	; (8006144 <sbrk_aligned+0x3c>)
 800610c:	460c      	mov	r4, r1
 800610e:	6831      	ldr	r1, [r6, #0]
 8006110:	4605      	mov	r5, r0
 8006112:	b911      	cbnz	r1, 800611a <sbrk_aligned+0x12>
 8006114:	f000 f8bc 	bl	8006290 <_sbrk_r>
 8006118:	6030      	str	r0, [r6, #0]
 800611a:	4621      	mov	r1, r4
 800611c:	4628      	mov	r0, r5
 800611e:	f000 f8b7 	bl	8006290 <_sbrk_r>
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	d00a      	beq.n	800613c <sbrk_aligned+0x34>
 8006126:	1cc4      	adds	r4, r0, #3
 8006128:	f024 0403 	bic.w	r4, r4, #3
 800612c:	42a0      	cmp	r0, r4
 800612e:	d007      	beq.n	8006140 <sbrk_aligned+0x38>
 8006130:	1a21      	subs	r1, r4, r0
 8006132:	4628      	mov	r0, r5
 8006134:	f000 f8ac 	bl	8006290 <_sbrk_r>
 8006138:	3001      	adds	r0, #1
 800613a:	d101      	bne.n	8006140 <sbrk_aligned+0x38>
 800613c:	f04f 34ff 	mov.w	r4, #4294967295
 8006140:	4620      	mov	r0, r4
 8006142:	bd70      	pop	{r4, r5, r6, pc}
 8006144:	200003ec 	.word	0x200003ec

08006148 <_malloc_r>:
 8006148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614c:	1ccd      	adds	r5, r1, #3
 800614e:	f025 0503 	bic.w	r5, r5, #3
 8006152:	3508      	adds	r5, #8
 8006154:	2d0c      	cmp	r5, #12
 8006156:	bf38      	it	cc
 8006158:	250c      	movcc	r5, #12
 800615a:	2d00      	cmp	r5, #0
 800615c:	4607      	mov	r7, r0
 800615e:	db01      	blt.n	8006164 <_malloc_r+0x1c>
 8006160:	42a9      	cmp	r1, r5
 8006162:	d905      	bls.n	8006170 <_malloc_r+0x28>
 8006164:	230c      	movs	r3, #12
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	2600      	movs	r6, #0
 800616a:	4630      	mov	r0, r6
 800616c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006170:	4e2e      	ldr	r6, [pc, #184]	; (800622c <_malloc_r+0xe4>)
 8006172:	f000 f89d 	bl	80062b0 <__malloc_lock>
 8006176:	6833      	ldr	r3, [r6, #0]
 8006178:	461c      	mov	r4, r3
 800617a:	bb34      	cbnz	r4, 80061ca <_malloc_r+0x82>
 800617c:	4629      	mov	r1, r5
 800617e:	4638      	mov	r0, r7
 8006180:	f7ff ffc2 	bl	8006108 <sbrk_aligned>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	4604      	mov	r4, r0
 8006188:	d14d      	bne.n	8006226 <_malloc_r+0xde>
 800618a:	6834      	ldr	r4, [r6, #0]
 800618c:	4626      	mov	r6, r4
 800618e:	2e00      	cmp	r6, #0
 8006190:	d140      	bne.n	8006214 <_malloc_r+0xcc>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	4631      	mov	r1, r6
 8006196:	4638      	mov	r0, r7
 8006198:	eb04 0803 	add.w	r8, r4, r3
 800619c:	f000 f878 	bl	8006290 <_sbrk_r>
 80061a0:	4580      	cmp	r8, r0
 80061a2:	d13a      	bne.n	800621a <_malloc_r+0xd2>
 80061a4:	6821      	ldr	r1, [r4, #0]
 80061a6:	3503      	adds	r5, #3
 80061a8:	1a6d      	subs	r5, r5, r1
 80061aa:	f025 0503 	bic.w	r5, r5, #3
 80061ae:	3508      	adds	r5, #8
 80061b0:	2d0c      	cmp	r5, #12
 80061b2:	bf38      	it	cc
 80061b4:	250c      	movcc	r5, #12
 80061b6:	4629      	mov	r1, r5
 80061b8:	4638      	mov	r0, r7
 80061ba:	f7ff ffa5 	bl	8006108 <sbrk_aligned>
 80061be:	3001      	adds	r0, #1
 80061c0:	d02b      	beq.n	800621a <_malloc_r+0xd2>
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	442b      	add	r3, r5
 80061c6:	6023      	str	r3, [r4, #0]
 80061c8:	e00e      	b.n	80061e8 <_malloc_r+0xa0>
 80061ca:	6822      	ldr	r2, [r4, #0]
 80061cc:	1b52      	subs	r2, r2, r5
 80061ce:	d41e      	bmi.n	800620e <_malloc_r+0xc6>
 80061d0:	2a0b      	cmp	r2, #11
 80061d2:	d916      	bls.n	8006202 <_malloc_r+0xba>
 80061d4:	1961      	adds	r1, r4, r5
 80061d6:	42a3      	cmp	r3, r4
 80061d8:	6025      	str	r5, [r4, #0]
 80061da:	bf18      	it	ne
 80061dc:	6059      	strne	r1, [r3, #4]
 80061de:	6863      	ldr	r3, [r4, #4]
 80061e0:	bf08      	it	eq
 80061e2:	6031      	streq	r1, [r6, #0]
 80061e4:	5162      	str	r2, [r4, r5]
 80061e6:	604b      	str	r3, [r1, #4]
 80061e8:	4638      	mov	r0, r7
 80061ea:	f104 060b 	add.w	r6, r4, #11
 80061ee:	f000 f865 	bl	80062bc <__malloc_unlock>
 80061f2:	f026 0607 	bic.w	r6, r6, #7
 80061f6:	1d23      	adds	r3, r4, #4
 80061f8:	1af2      	subs	r2, r6, r3
 80061fa:	d0b6      	beq.n	800616a <_malloc_r+0x22>
 80061fc:	1b9b      	subs	r3, r3, r6
 80061fe:	50a3      	str	r3, [r4, r2]
 8006200:	e7b3      	b.n	800616a <_malloc_r+0x22>
 8006202:	6862      	ldr	r2, [r4, #4]
 8006204:	42a3      	cmp	r3, r4
 8006206:	bf0c      	ite	eq
 8006208:	6032      	streq	r2, [r6, #0]
 800620a:	605a      	strne	r2, [r3, #4]
 800620c:	e7ec      	b.n	80061e8 <_malloc_r+0xa0>
 800620e:	4623      	mov	r3, r4
 8006210:	6864      	ldr	r4, [r4, #4]
 8006212:	e7b2      	b.n	800617a <_malloc_r+0x32>
 8006214:	4634      	mov	r4, r6
 8006216:	6876      	ldr	r6, [r6, #4]
 8006218:	e7b9      	b.n	800618e <_malloc_r+0x46>
 800621a:	230c      	movs	r3, #12
 800621c:	603b      	str	r3, [r7, #0]
 800621e:	4638      	mov	r0, r7
 8006220:	f000 f84c 	bl	80062bc <__malloc_unlock>
 8006224:	e7a1      	b.n	800616a <_malloc_r+0x22>
 8006226:	6025      	str	r5, [r4, #0]
 8006228:	e7de      	b.n	80061e8 <_malloc_r+0xa0>
 800622a:	bf00      	nop
 800622c:	200003e8 	.word	0x200003e8

08006230 <_realloc_r>:
 8006230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006234:	4680      	mov	r8, r0
 8006236:	4614      	mov	r4, r2
 8006238:	460e      	mov	r6, r1
 800623a:	b921      	cbnz	r1, 8006246 <_realloc_r+0x16>
 800623c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006240:	4611      	mov	r1, r2
 8006242:	f7ff bf81 	b.w	8006148 <_malloc_r>
 8006246:	b92a      	cbnz	r2, 8006254 <_realloc_r+0x24>
 8006248:	f7ff ff12 	bl	8006070 <_free_r>
 800624c:	4625      	mov	r5, r4
 800624e:	4628      	mov	r0, r5
 8006250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006254:	f000 f838 	bl	80062c8 <_malloc_usable_size_r>
 8006258:	4284      	cmp	r4, r0
 800625a:	4607      	mov	r7, r0
 800625c:	d802      	bhi.n	8006264 <_realloc_r+0x34>
 800625e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006262:	d812      	bhi.n	800628a <_realloc_r+0x5a>
 8006264:	4621      	mov	r1, r4
 8006266:	4640      	mov	r0, r8
 8006268:	f7ff ff6e 	bl	8006148 <_malloc_r>
 800626c:	4605      	mov	r5, r0
 800626e:	2800      	cmp	r0, #0
 8006270:	d0ed      	beq.n	800624e <_realloc_r+0x1e>
 8006272:	42bc      	cmp	r4, r7
 8006274:	4622      	mov	r2, r4
 8006276:	4631      	mov	r1, r6
 8006278:	bf28      	it	cs
 800627a:	463a      	movcs	r2, r7
 800627c:	f7ff fbb8 	bl	80059f0 <memcpy>
 8006280:	4631      	mov	r1, r6
 8006282:	4640      	mov	r0, r8
 8006284:	f7ff fef4 	bl	8006070 <_free_r>
 8006288:	e7e1      	b.n	800624e <_realloc_r+0x1e>
 800628a:	4635      	mov	r5, r6
 800628c:	e7df      	b.n	800624e <_realloc_r+0x1e>
	...

08006290 <_sbrk_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4d06      	ldr	r5, [pc, #24]	; (80062ac <_sbrk_r+0x1c>)
 8006294:	2300      	movs	r3, #0
 8006296:	4604      	mov	r4, r0
 8006298:	4608      	mov	r0, r1
 800629a:	602b      	str	r3, [r5, #0]
 800629c:	f7fb f962 	bl	8001564 <_sbrk>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d102      	bne.n	80062aa <_sbrk_r+0x1a>
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	b103      	cbz	r3, 80062aa <_sbrk_r+0x1a>
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
 80062ac:	200003f0 	.word	0x200003f0

080062b0 <__malloc_lock>:
 80062b0:	4801      	ldr	r0, [pc, #4]	; (80062b8 <__malloc_lock+0x8>)
 80062b2:	f000 b811 	b.w	80062d8 <__retarget_lock_acquire_recursive>
 80062b6:	bf00      	nop
 80062b8:	200003f4 	.word	0x200003f4

080062bc <__malloc_unlock>:
 80062bc:	4801      	ldr	r0, [pc, #4]	; (80062c4 <__malloc_unlock+0x8>)
 80062be:	f000 b80c 	b.w	80062da <__retarget_lock_release_recursive>
 80062c2:	bf00      	nop
 80062c4:	200003f4 	.word	0x200003f4

080062c8 <_malloc_usable_size_r>:
 80062c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062cc:	1f18      	subs	r0, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	bfbc      	itt	lt
 80062d2:	580b      	ldrlt	r3, [r1, r0]
 80062d4:	18c0      	addlt	r0, r0, r3
 80062d6:	4770      	bx	lr

080062d8 <__retarget_lock_acquire_recursive>:
 80062d8:	4770      	bx	lr

080062da <__retarget_lock_release_recursive>:
 80062da:	4770      	bx	lr

080062dc <_init>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	bf00      	nop
 80062e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e2:	bc08      	pop	{r3}
 80062e4:	469e      	mov	lr, r3
 80062e6:	4770      	bx	lr

080062e8 <_fini>:
 80062e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ea:	bf00      	nop
 80062ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ee:	bc08      	pop	{r3}
 80062f0:	469e      	mov	lr, r3
 80062f2:	4770      	bx	lr
