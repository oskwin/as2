
nucleoL476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  08003e80  08003e80  00013e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004648  08004648  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004650  08004650  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004650  08004650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000014  0800466c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  0800466c  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed29  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f41  00000000  00000000  0002ed6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00030cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00031928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025ba7  00000000  00000000  000324d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f57f  00000000  00000000  00058077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea55a  00000000  00000000  000675f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00151b50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000332c  00000000  00000000  00151ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e68 	.word	0x08003e68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003e68 	.word	0x08003e68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b5b0      	push	{r4, r5, r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
char myText[] = "Automotive System 2";
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <main+0x4c>)
 80004d4:	463c      	mov	r4, r7
 80004d6:	461d      	mov	r5, r3
 80004d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004dc:	682b      	ldr	r3, [r5, #0]
 80004de:	6023      	str	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fab0 	bl	8000a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f81c 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8dc 	bl	80006a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f8aa 	bl	8000644 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004f0:	f000 f868 	bl	80005c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80004f4:	f003 fa8a 	bl	8003a0c <ssd1306_Init>
  ssd1306_SetCursor(5, 5);
 80004f8:	2105      	movs	r1, #5
 80004fa:	2005      	movs	r0, #5
 80004fc:	f003 fc3e 	bl	8003d7c <ssd1306_SetCursor>
  retVal = ssd1306_WriteString(myText, Font_7x10, White);
 8000500:	4a06      	ldr	r2, [pc, #24]	; (800051c <main+0x50>)
 8000502:	4638      	mov	r0, r7
 8000504:	2301      	movs	r3, #1
 8000506:	ca06      	ldmia	r2, {r1, r2}
 8000508:	f003 fc12 	bl	8003d30 <ssd1306_WriteString>
 800050c:	4603      	mov	r3, r0
 800050e:	75fb      	strb	r3, [r7, #23]
  ssd1306_UpdateScreen();
 8000510:	f003 fb0a 	bl	8003b28 <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x48>
 8000516:	bf00      	nop
 8000518:	08003e80 	.word	0x08003e80
 800051c:	2000000c 	.word	0x2000000c

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b096      	sub	sp, #88	; 0x58
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	2244      	movs	r2, #68	; 0x44
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 fc92 	bl	8003e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	463b      	mov	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000542:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000546:	f001 fa61 	bl	8001a0c <HAL_PWREx_ControlVoltageScaling>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000550:	f000 f90e 	bl	8000770 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800055c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055e:	2310      	movs	r3, #16
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000566:	2302      	movs	r3, #2
 8000568:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800056a:	2301      	movs	r3, #1
 800056c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800056e:	230a      	movs	r3, #10
 8000570:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000572:	2307      	movs	r3, #7
 8000574:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fa98 	bl	8001ab8 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800058e:	f000 f8ef 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2303      	movs	r3, #3
 8000598:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	2104      	movs	r1, #4
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fe60 	bl	8002270 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b6:	f000 f8db 	bl	8000770 <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3758      	adds	r7, #88	; 0x58
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <MX_I2C1_Init+0x74>)
 80005ca:	4a1c      	ldr	r2, [pc, #112]	; (800063c <MX_I2C1_Init+0x78>)
 80005cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <MX_I2C1_Init+0x74>)
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <MX_I2C1_Init+0x7c>)
 80005d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_I2C1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <MX_I2C1_Init+0x74>)
 80005dc:	2201      	movs	r2, #1
 80005de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_I2C1_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_I2C1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_I2C1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_I2C1_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_I2C1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fe:	480e      	ldr	r0, [pc, #56]	; (8000638 <MX_I2C1_Init+0x74>)
 8000600:	f000 fd68 	bl	80010d4 <HAL_I2C_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800060a:	f000 f8b1 	bl	8000770 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800060e:	2100      	movs	r1, #0
 8000610:	4809      	ldr	r0, [pc, #36]	; (8000638 <MX_I2C1_Init+0x74>)
 8000612:	f001 f955 	bl	80018c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800061c:	f000 f8a8 	bl	8000770 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000620:	2100      	movs	r1, #0
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_I2C1_Init+0x74>)
 8000624:	f001 f997 	bl	8001956 <HAL_I2CEx_ConfigDigitalFilter>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800062e:	f000 f89f 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000030 	.word	0x20000030
 800063c:	40005400 	.word	0x40005400
 8000640:	00702991 	.word	0x00702991

08000644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_USART2_UART_Init+0x58>)
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <MX_USART2_UART_Init+0x5c>)
 800064c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_USART2_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART2_UART_Init+0x58>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART2_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000688:	f002 fcd2 	bl	8003030 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000692:	f000 f86d 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000084 	.word	0x20000084
 80006a0:	40004400 	.word	0x40004400

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <MX_GPIO_Init+0xc4>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a24      	ldr	r2, [pc, #144]	; (8000768 <MX_GPIO_Init+0xc4>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <MX_GPIO_Init+0xc4>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <MX_GPIO_Init+0xc4>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2120      	movs	r1, #32
 800071e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000722:	f000 fcbf 	bl	80010a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800072c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <MX_GPIO_Init+0xc8>)
 800073e:	f000 fb07 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000742:	2320      	movs	r3, #32
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f000 faf8 	bl	8000d50 <HAL_GPIO_Init>

}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	48000800 	.word	0x48000800

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x44>)
 8000784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x44>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6613      	str	r3, [r2, #96]	; 0x60
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x44>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x44>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_MspInit+0x44>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	6593      	str	r3, [r2, #88]	; 0x58
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x44>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b0ac      	sub	sp, #176	; 0xb0
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2288      	movs	r2, #136	; 0x88
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 fb37 	bl	8003e58 <memset>
  if(hi2c->Instance==I2C1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a21      	ldr	r2, [pc, #132]	; (8000874 <HAL_I2C_MspInit+0xb0>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d13b      	bne.n	800086c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007f4:	2340      	movs	r3, #64	; 0x40
 80007f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4618      	mov	r0, r3
 8000802:	f001 ff59 	bl	80026b8 <HAL_RCCEx_PeriphCLKConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800080c:	f7ff ffb0 	bl	8000770 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <HAL_I2C_MspInit+0xb4>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	4a18      	ldr	r2, [pc, #96]	; (8000878 <HAL_I2C_MspInit+0xb4>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <HAL_I2C_MspInit+0xb4>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	f003 0302 	and.w	r3, r3, #2
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000828:	f44f 7340 	mov.w	r3, #768	; 0x300
 800082c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000830:	2312      	movs	r3, #18
 8000832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000842:	2304      	movs	r3, #4
 8000844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800084c:	4619      	mov	r1, r3
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <HAL_I2C_MspInit+0xb8>)
 8000850:	f000 fa7e 	bl	8000d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_I2C_MspInit+0xb4>)
 8000856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_I2C_MspInit+0xb4>)
 800085a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800085e:	6593      	str	r3, [r2, #88]	; 0x58
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_I2C_MspInit+0xb4>)
 8000862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800086c:	bf00      	nop
 800086e:	37b0      	adds	r7, #176	; 0xb0
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40005400 	.word	0x40005400
 8000878:	40021000 	.word	0x40021000
 800087c:	48000400 	.word	0x48000400

08000880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0ac      	sub	sp, #176	; 0xb0
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2288      	movs	r2, #136	; 0x88
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f003 fad9 	bl	8003e58 <memset>
  if(huart->Instance==USART2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a21      	ldr	r2, [pc, #132]	; (8000930 <HAL_UART_MspInit+0xb0>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d13b      	bne.n	8000928 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fefb 	bl	80026b8 <HAL_RCCEx_PeriphCLKConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008c8:	f7ff ff52 	bl	8000770 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_UART_MspInit+0xb4>)
 80008ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d0:	4a18      	ldr	r2, [pc, #96]	; (8000934 <HAL_UART_MspInit+0xb4>)
 80008d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d6:	6593      	str	r3, [r2, #88]	; 0x58
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <HAL_UART_MspInit+0xb4>)
 80008da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <HAL_UART_MspInit+0xb4>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e8:	4a12      	ldr	r2, [pc, #72]	; (8000934 <HAL_UART_MspInit+0xb4>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <HAL_UART_MspInit+0xb4>)
 80008f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008fc:	230c      	movs	r3, #12
 80008fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000914:	2307      	movs	r3, #7
 8000916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f000 fa14 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000928:	bf00      	nop
 800092a:	37b0      	adds	r7, #176	; 0xb0
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40004400 	.word	0x40004400
 8000934:	40021000 	.word	0x40021000

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f8ba 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <SystemInit+0x5c>)
 8000992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000996:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <SystemInit+0x5c>)
 8000998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800099c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <SystemInit+0x60>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a11      	ldr	r2, [pc, #68]	; (80009ec <SystemInit+0x60>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <SystemInit+0x60>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <SystemInit+0x60>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <SystemInit+0x60>)
 80009b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <SystemInit+0x60>)
 80009c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <SystemInit+0x60>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a07      	ldr	r2, [pc, #28]	; (80009ec <SystemInit+0x60>)
 80009d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <SystemInit+0x60>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00
 80009ec:	40021000 	.word	0x40021000

080009f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f4:	f7ff ffca 	bl	800098c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009fa:	e003      	b.n	8000a04 <LoopCopyDataInit>

080009fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a02:	3104      	adds	r1, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a04:	480a      	ldr	r0, [pc, #40]	; (8000a30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a0c:	d3f6      	bcc.n	80009fc <CopyDataInit>
	ldr	r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a10:	e002      	b.n	8000a18 <LoopFillZerobss>

08000a12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a14:	f842 3b04 	str.w	r3, [r2], #4

08000a18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <LoopForever+0x16>)
	cmp	r2, r3
 8000a1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a1c:	d3f9      	bcc.n	8000a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f003 f9f7 	bl	8003e10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a22:	f7ff fd53 	bl	80004cc <main>

08000a26 <LoopForever>:

LoopForever:
    b LoopForever
 8000a26:	e7fe      	b.n	8000a26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a28:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a2c:	08004658 	.word	0x08004658
	ldr	r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a34:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000a38:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000a3c:	20000314 	.word	0x20000314

08000a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC1_2_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <HAL_Init+0x3c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <HAL_Init+0x3c>)
 8000a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5a:	2003      	movs	r0, #3
 8000a5c:	f000 f944 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 f80f 	bl	8000a84 <HAL_InitTick>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	e001      	b.n	8000a76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a72:	f7ff fe83 	bl	800077c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a76:	79fb      	ldrb	r3, [r7, #7]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40022000 	.word	0x40022000

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_InitTick+0x6c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d023      	beq.n	8000ae0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_InitTick+0x70>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_InitTick+0x6c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f941 	bl	8000d36 <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10f      	bne.n	8000ada <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d809      	bhi.n	8000ad4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f000 f919 	bl	8000cfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000acc:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_InitTick+0x74>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	e007      	b.n	8000ae4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	e004      	b.n	8000ae4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e001      	b.n	8000ae4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x20>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_IncTick+0x24>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000108 	.word	0x20000108

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000108 	.word	0x20000108

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff ffee 	bl	8000b24 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_Delay+0x44>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffde 	bl	8000b24 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff8e 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff47 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff5c 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff8e 	bl	8000c3c <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffb0 	bl	8000ca4 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b087      	sub	sp, #28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5e:	e17f      	b.n	8001060 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 8171 	beq.w	800105a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d005      	beq.n	8000d90 <HAL_GPIO_Init+0x40>
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d130      	bne.n	8000df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	f003 0201 	and.w	r2, r3, #1
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d118      	bne.n	8000e30 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e04:	2201      	movs	r2, #1
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	08db      	lsrs	r3, r3, #3
 8000e1a:	f003 0201 	and.w	r2, r3, #1
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d017      	beq.n	8000e6c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d123      	bne.n	8000ec0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	6939      	ldr	r1, [r7, #16]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0203 	and.w	r2, r3, #3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80ac 	beq.w	800105a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b5f      	ldr	r3, [pc, #380]	; (8001080 <HAL_GPIO_Init+0x330>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f06:	4a5e      	ldr	r2, [pc, #376]	; (8001080 <HAL_GPIO_Init+0x330>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f0e:	4b5c      	ldr	r3, [pc, #368]	; (8001080 <HAL_GPIO_Init+0x330>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f1a:	4a5a      	ldr	r2, [pc, #360]	; (8001084 <HAL_GPIO_Init+0x334>)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f44:	d025      	beq.n	8000f92 <HAL_GPIO_Init+0x242>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4f      	ldr	r2, [pc, #316]	; (8001088 <HAL_GPIO_Init+0x338>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d01f      	beq.n	8000f8e <HAL_GPIO_Init+0x23e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4e      	ldr	r2, [pc, #312]	; (800108c <HAL_GPIO_Init+0x33c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x23a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4d      	ldr	r2, [pc, #308]	; (8001090 <HAL_GPIO_Init+0x340>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x236>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4c      	ldr	r2, [pc, #304]	; (8001094 <HAL_GPIO_Init+0x344>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x232>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4b      	ldr	r2, [pc, #300]	; (8001098 <HAL_GPIO_Init+0x348>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x22e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4a      	ldr	r2, [pc, #296]	; (800109c <HAL_GPIO_Init+0x34c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x22a>
 8000f76:	2306      	movs	r3, #6
 8000f78:	e00c      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	e00a      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f7e:	2305      	movs	r3, #5
 8000f80:	e008      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f82:	2304      	movs	r3, #4
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f86:	2303      	movs	r3, #3
 8000f88:	e004      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_GPIO_Init+0x244>
 8000f92:	2300      	movs	r3, #0
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	f002 0203 	and.w	r2, r2, #3
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	4093      	lsls	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa4:	4937      	ldr	r1, [pc, #220]	; (8001084 <HAL_GPIO_Init+0x334>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb2:	4b3b      	ldr	r3, [pc, #236]	; (80010a0 <HAL_GPIO_Init+0x350>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd6:	4a32      	ldr	r2, [pc, #200]	; (80010a0 <HAL_GPIO_Init+0x350>)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fdc:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <HAL_GPIO_Init+0x350>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001000:	4a27      	ldr	r2, [pc, #156]	; (80010a0 <HAL_GPIO_Init+0x350>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <HAL_GPIO_Init+0x350>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800102a:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <HAL_GPIO_Init+0x350>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_GPIO_Init+0x350>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <HAL_GPIO_Init+0x350>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa22 f303 	lsr.w	r3, r2, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	f47f ae78 	bne.w	8000d60 <HAL_GPIO_Init+0x10>
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000
 8001088:	48000400 	.word	0x48000400
 800108c:	48000800 	.word	0x48000800
 8001090:	48000c00 	.word	0x48000c00
 8001094:	48001000 	.word	0x48001000
 8001098:	48001400 	.word	0x48001400
 800109c:	48001800 	.word	0x48001800
 80010a0:	40010400 	.word	0x40010400

080010a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
 80010b0:	4613      	mov	r3, r2
 80010b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e081      	b.n	80011ea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d106      	bne.n	8001100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fb62 	bl	80007c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2224      	movs	r2, #36	; 0x24
 8001104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0201 	bic.w	r2, r2, #1
 8001116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001124:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001134:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d107      	bne.n	800114e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	e006      	b.n	800115c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800115a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d104      	bne.n	800116e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800116c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800117c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001180:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001190:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69d9      	ldr	r1, [r3, #28]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1a      	ldr	r2, [r3, #32]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2220      	movs	r2, #32
 80011d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	4608      	mov	r0, r1
 80011fe:	4611      	mov	r1, r2
 8001200:	461a      	mov	r2, r3
 8001202:	4603      	mov	r3, r0
 8001204:	817b      	strh	r3, [r7, #10]
 8001206:	460b      	mov	r3, r1
 8001208:	813b      	strh	r3, [r7, #8]
 800120a:	4613      	mov	r3, r2
 800120c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b20      	cmp	r3, #32
 8001218:	f040 80f9 	bne.w	800140e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <HAL_I2C_Mem_Write+0x34>
 8001222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001224:	2b00      	cmp	r3, #0
 8001226:	d105      	bne.n	8001234 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e0ed      	b.n	8001410 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_I2C_Mem_Write+0x4e>
 800123e:	2302      	movs	r3, #2
 8001240:	e0e6      	b.n	8001410 <HAL_I2C_Mem_Write+0x21c>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800124a:	f7ff fc6b 	bl	8000b24 <HAL_GetTick>
 800124e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2319      	movs	r3, #25
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f000 f955 	bl	800150c <I2C_WaitOnFlagUntilTimeout>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0d1      	b.n	8001410 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2221      	movs	r2, #33	; 0x21
 8001270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2240      	movs	r2, #64	; 0x40
 8001278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6a3a      	ldr	r2, [r7, #32]
 8001286:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800128c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001294:	88f8      	ldrh	r0, [r7, #6]
 8001296:	893a      	ldrh	r2, [r7, #8]
 8001298:	8979      	ldrh	r1, [r7, #10]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	4603      	mov	r3, r0
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f000 f8b9 	bl	800141c <I2C_RequestMemoryWrite>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e0a9      	b.n	8001410 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d90e      	bls.n	80012e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	22ff      	movs	r2, #255	; 0xff
 80012ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	8979      	ldrh	r1, [r7, #10]
 80012d4:	2300      	movs	r3, #0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 fabd 	bl	800185c <I2C_TransferConfig>
 80012e2:	e00f      	b.n	8001304 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	8979      	ldrh	r1, [r7, #10]
 80012f6:	2300      	movs	r3, #0
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 faac 	bl	800185c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f000 f93f 	bl	800158c <I2C_WaitOnTXISFlagUntilTimeout>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e07b      	b.n	8001410 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	781a      	ldrb	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001332:	b29b      	uxth	r3, r3
 8001334:	3b01      	subs	r3, #1
 8001336:	b29a      	uxth	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001340:	3b01      	subs	r3, #1
 8001342:	b29a      	uxth	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134c:	b29b      	uxth	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d034      	beq.n	80013bc <HAL_I2C_Mem_Write+0x1c8>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001356:	2b00      	cmp	r3, #0
 8001358:	d130      	bne.n	80013bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001360:	2200      	movs	r2, #0
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 f8d1 	bl	800150c <I2C_WaitOnFlagUntilTimeout>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e04d      	b.n	8001410 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001378:	b29b      	uxth	r3, r3
 800137a:	2bff      	cmp	r3, #255	; 0xff
 800137c:	d90e      	bls.n	800139c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	22ff      	movs	r2, #255	; 0xff
 8001382:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001388:	b2da      	uxtb	r2, r3
 800138a:	8979      	ldrh	r1, [r7, #10]
 800138c:	2300      	movs	r3, #0
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f000 fa61 	bl	800185c <I2C_TransferConfig>
 800139a:	e00f      	b.n	80013bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	8979      	ldrh	r1, [r7, #10]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 fa50 	bl	800185c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d19e      	bne.n	8001304 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f000 f91e 	bl	800160c <I2C_WaitOnSTOPFlagUntilTimeout>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e01a      	b.n	8001410 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2220      	movs	r2, #32
 80013e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6859      	ldr	r1, [r3, #4]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_I2C_Mem_Write+0x224>)
 80013ee:	400b      	ands	r3, r1
 80013f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2220      	movs	r2, #32
 80013f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800140e:	2302      	movs	r3, #2
  }
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	fe00e800 	.word	0xfe00e800

0800141c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af02      	add	r7, sp, #8
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4603      	mov	r3, r0
 800142c:	817b      	strh	r3, [r7, #10]
 800142e:	460b      	mov	r3, r1
 8001430:	813b      	strh	r3, [r7, #8]
 8001432:	4613      	mov	r3, r2
 8001434:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	8979      	ldrh	r1, [r7, #10]
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <I2C_RequestMemoryWrite+0xa4>)
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 fa09 	bl	800185c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	69b9      	ldr	r1, [r7, #24]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 f89c 	bl	800158c <I2C_WaitOnTXISFlagUntilTimeout>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e02c      	b.n	80014b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d105      	bne.n	8001470 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001464:	893b      	ldrh	r3, [r7, #8]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
 800146e:	e015      	b.n	800149c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001470:	893b      	ldrh	r3, [r7, #8]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b29b      	uxth	r3, r3
 8001476:	b2da      	uxtb	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	69b9      	ldr	r1, [r7, #24]
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f882 	bl	800158c <I2C_WaitOnTXISFlagUntilTimeout>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e012      	b.n	80014b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001492:	893b      	ldrh	r3, [r7, #8]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2200      	movs	r2, #0
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f830 	bl	800150c <I2C_WaitOnFlagUntilTimeout>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	80002000 	.word	0x80002000

080014c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d103      	bne.n	80014e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d007      	beq.n	8001500 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699a      	ldr	r2, [r3, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	619a      	str	r2, [r3, #24]
  }
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	4613      	mov	r3, r2
 800151a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800151c:	e022      	b.n	8001564 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d01e      	beq.n	8001564 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001526:	f7ff fafd 	bl	8000b24 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d302      	bcc.n	800153c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d113      	bne.n	8001564 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	f043 0220 	orr.w	r2, r3, #32
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2220      	movs	r2, #32
 800154c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e00f      	b.n	8001584 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699a      	ldr	r2, [r3, #24]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	4013      	ands	r3, r2
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	429a      	cmp	r2, r3
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	429a      	cmp	r2, r3
 8001580:	d0cd      	beq.n	800151e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001598:	e02c      	b.n	80015f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 f870 	bl	8001684 <I2C_IsErrorOccurred>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e02a      	b.n	8001604 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d01e      	beq.n	80015f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015b6:	f7ff fab5 	bl	8000b24 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d302      	bcc.n	80015cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d113      	bne.n	80015f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	f043 0220 	orr.w	r2, r3, #32
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2220      	movs	r2, #32
 80015dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e007      	b.n	8001604 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d1cb      	bne.n	800159a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001618:	e028      	b.n	800166c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 f830 	bl	8001684 <I2C_IsErrorOccurred>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e026      	b.n	800167c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800162e:	f7ff fa79 	bl	8000b24 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	429a      	cmp	r2, r3
 800163c:	d302      	bcc.n	8001644 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d113      	bne.n	800166c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001648:	f043 0220 	orr.w	r2, r3, #32
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2220      	movs	r2, #32
 8001654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e007      	b.n	800167c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	2b20      	cmp	r3, #32
 8001678:	d1cf      	bne.n	800161a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d075      	beq.n	800179c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2210      	movs	r2, #16
 80016b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016b8:	e056      	b.n	8001768 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d052      	beq.n	8001768 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016c2:	f7ff fa2f 	bl	8000b24 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d302      	bcc.n	80016d8 <I2C_IsErrorOccurred+0x54>
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d147      	bne.n	8001768 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80016ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016fa:	d12e      	bne.n	800175a <I2C_IsErrorOccurred+0xd6>
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001702:	d02a      	beq.n	800175a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001704:	7cfb      	ldrb	r3, [r7, #19]
 8001706:	2b20      	cmp	r3, #32
 8001708:	d027      	beq.n	800175a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001718:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800171a:	f7ff fa03 	bl	8000b24 <HAL_GetTick>
 800171e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001720:	e01b      	b.n	800175a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001722:	f7ff f9ff 	bl	8000b24 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b19      	cmp	r3, #25
 800172e:	d914      	bls.n	800175a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	f043 0220 	orr.w	r2, r3, #32
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b20      	cmp	r3, #32
 8001766:	d1dc      	bne.n	8001722 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b20      	cmp	r3, #32
 8001774:	d003      	beq.n	800177e <I2C_IsErrorOccurred+0xfa>
 8001776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800177a:	2b00      	cmp	r3, #0
 800177c:	d09d      	beq.n	80016ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800177e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2220      	movs	r2, #32
 800178c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00b      	beq.n	80017c6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00b      	beq.n	80017e8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00b      	beq.n	800180a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001802:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800180a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800180e:	2b00      	cmp	r3, #0
 8001810:	d01c      	beq.n	800184c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f7ff fe56 	bl	80014c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6859      	ldr	r1, [r3, #4]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <I2C_IsErrorOccurred+0x1d4>)
 8001824:	400b      	ands	r3, r1
 8001826:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	431a      	orrs	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2220      	movs	r2, #32
 8001838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800184c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001850:	4618      	mov	r0, r3
 8001852:	3728      	adds	r7, #40	; 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	fe00e800 	.word	0xfe00e800

0800185c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	817b      	strh	r3, [r7, #10]
 800186a:	4613      	mov	r3, r2
 800186c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800186e:	897b      	ldrh	r3, [r7, #10]
 8001870:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001874:	7a7b      	ldrb	r3, [r7, #9]
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800187c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	4313      	orrs	r3, r2
 8001886:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800188a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	0d5b      	lsrs	r3, r3, #21
 8001896:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <I2C_TransferConfig+0x60>)
 800189c:	430b      	orrs	r3, r1
 800189e:	43db      	mvns	r3, r3
 80018a0:	ea02 0103 	and.w	r1, r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80018ae:	bf00      	nop
 80018b0:	371c      	adds	r7, #28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	03ff63ff 	.word	0x03ff63ff

080018c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	d138      	bne.n	8001948 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e032      	b.n	800194a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2224      	movs	r2, #36	; 0x24
 80018f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001912:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2220      	movs	r2, #32
 8001938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	e000      	b.n	800194a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001948:	2302      	movs	r3, #2
  }
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001956:	b480      	push	{r7}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b20      	cmp	r3, #32
 800196a:	d139      	bne.n	80019e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001976:	2302      	movs	r3, #2
 8001978:	e033      	b.n	80019e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2224      	movs	r2, #36	; 0x24
 8001986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e000      	b.n	80019e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019e0:	2302      	movs	r3, #2
  }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_PWREx_GetVoltageRange+0x18>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40007000 	.word	0x40007000

08001a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1a:	d130      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a28:	d038      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2232      	movs	r2, #50	; 0x32
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9b      	lsrs	r3, r3, #18
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a50:	e002      	b.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a64:	d102      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f2      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a78:	d110      	bne.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e00f      	b.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8a:	d007      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e3ca      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aca:	4b97      	ldr	r3, [pc, #604]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad4:	4b94      	ldr	r3, [pc, #592]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 80e4 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_RCC_OscConfig+0x4a>
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	f040 808b 	bne.w	8001c10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	f040 8087 	bne.w	8001c10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b02:	4b89      	ldr	r3, [pc, #548]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x62>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e3a2      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1a      	ldr	r2, [r3, #32]
 8001b1e:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_RCC_OscConfig+0x7c>
 8001b2a:	4b7f      	ldr	r3, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b32:	e005      	b.n	8001b40 <HAL_RCC_OscConfig+0x88>
 8001b34:	4b7c      	ldr	r3, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d223      	bcs.n	8001b8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fd55 	bl	80025f8 <RCC_SetFlashLatencyFromMSIRange>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e383      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b58:	4b73      	ldr	r3, [pc, #460]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a72      	ldr	r2, [pc, #456]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	496d      	ldr	r1, [pc, #436]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b76:	4b6c      	ldr	r3, [pc, #432]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	4968      	ldr	r1, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
 8001b8a:	e025      	b.n	8001bd8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8c:	4b66      	ldr	r3, [pc, #408]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a65      	ldr	r2, [pc, #404]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4960      	ldr	r1, [pc, #384]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001baa:	4b5f      	ldr	r3, [pc, #380]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	495b      	ldr	r1, [pc, #364]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d109      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 fd15 	bl	80025f8 <RCC_SetFlashLatencyFromMSIRange>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e343      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd8:	f000 fc4a 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b52      	ldr	r3, [pc, #328]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	4950      	ldr	r1, [pc, #320]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf4:	4a4e      	ldr	r2, [pc, #312]	; (8001d30 <HAL_RCC_OscConfig+0x278>)
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	; (8001d34 <HAL_RCC_OscConfig+0x27c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe ff41 	bl	8000a84 <HAL_InitTick>
 8001c02:	4603      	mov	r3, r0
 8001c04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d052      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	e327      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d032      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c18:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a42      	ldr	r2, [pc, #264]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c24:	f7fe ff7e 	bl	8000b24 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c2c:	f7fe ff7a 	bl	8000b24 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e310      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3e:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c4a:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a36      	ldr	r2, [pc, #216]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4931      	ldr	r1, [pc, #196]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c68:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	492c      	ldr	r1, [pc, #176]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
 8001c7c:	e01a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a29      	ldr	r2, [pc, #164]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c8a:	f7fe ff4b 	bl	8000b24 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c92:	f7fe ff47 	bl	8000b24 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e2dd      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca4:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x1da>
 8001cb0:	e000      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d074      	beq.n	8001daa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x21a>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	d10e      	bne.n	8001cea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d10b      	bne.n	8001cea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d064      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d160      	bne.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e2ba      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x24a>
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e026      	b.n	8001d50 <HAL_RCC_OscConfig+0x298>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d0a:	d115      	bne.n	8001d38 <HAL_RCC_OscConfig+0x280>
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a02      	ldr	r2, [pc, #8]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x298>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08003e94 	.word	0x08003e94
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000004 	.word	0x20000004
 8001d38:	4ba0      	ldr	r3, [pc, #640]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a9f      	ldr	r2, [pc, #636]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b9d      	ldr	r3, [pc, #628]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a9c      	ldr	r2, [pc, #624]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7fe fee4 	bl	8000b24 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7fe fee0 	bl	8000b24 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e276      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d72:	4b92      	ldr	r3, [pc, #584]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x2a8>
 8001d7e:	e014      	b.n	8001daa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7fe fed0 	bl	8000b24 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7fe fecc 	bl	8000b24 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e262      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9a:	4b88      	ldr	r3, [pc, #544]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x2d0>
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d060      	beq.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x310>
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d119      	bne.n	8001df6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d116      	bne.n	8001df6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc8:	4b7c      	ldr	r3, [pc, #496]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_OscConfig+0x328>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e23f      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	4973      	ldr	r1, [pc, #460]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	e040      	b.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d023      	beq.n	8001e46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfe:	4b6f      	ldr	r3, [pc, #444]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6e      	ldr	r2, [pc, #440]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7fe fe8b 	bl	8000b24 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e12:	f7fe fe87 	bl	8000b24 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e21d      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e24:	4b65      	ldr	r3, [pc, #404]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	495f      	ldr	r1, [pc, #380]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
 8001e44:	e018      	b.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a5c      	ldr	r2, [pc, #368]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7fe fe67 	bl	8000b24 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7fe fe63 	bl	8000b24 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e1f9      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f0      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d03c      	beq.n	8001efe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01c      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8c:	4b4b      	ldr	r3, [pc, #300]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e92:	4a4a      	ldr	r2, [pc, #296]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fe42 	bl	8000b24 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7fe fe3e 	bl	8000b24 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e1d4      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ef      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x3ec>
 8001ec4:	e01b      	b.n	8001efe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ecc:	4a3b      	ldr	r2, [pc, #236]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001ece:	f023 0301 	bic.w	r3, r3, #1
 8001ed2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7fe fe25 	bl	8000b24 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ede:	f7fe fe21 	bl	8000b24 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e1b7      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef0:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ef      	bne.n	8001ede <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80a6 	beq.w	8002058 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10d      	bne.n	8001f38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f26:	6593      	str	r3, [r2, #88]	; 0x58
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f34:	2301      	movs	r3, #1
 8001f36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f38:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <HAL_RCC_OscConfig+0x508>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d118      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_OscConfig+0x508>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <HAL_RCC_OscConfig+0x508>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f50:	f7fe fde8 	bl	8000b24 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f58:	f7fe fde4 	bl	8000b24 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e17a      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_RCC_OscConfig+0x508>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d108      	bne.n	8001f90 <HAL_RCC_OscConfig+0x4d8>
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f84:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8e:	e029      	b.n	8001fe4 <HAL_RCC_OscConfig+0x52c>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d115      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x50c>
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9e:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	4a03      	ldr	r2, [pc, #12]	; (8001fbc <HAL_RCC_OscConfig+0x504>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb8:	e014      	b.n	8001fe4 <HAL_RCC_OscConfig+0x52c>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	4b9c      	ldr	r3, [pc, #624]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fca:	4a9b      	ldr	r2, [pc, #620]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd4:	4b98      	ldr	r3, [pc, #608]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	4a97      	ldr	r2, [pc, #604]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d016      	beq.n	800201a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f7fe fd9a 	bl	8000b24 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f7fe fd96 	bl	8000b24 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e12a      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200a:	4b8b      	ldr	r3, [pc, #556]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0ed      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x53c>
 8002018:	e015      	b.n	8002046 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201a:	f7fe fd83 	bl	8000b24 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002020:	e00a      	b.n	8002038 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7fe fd7f 	bl	8000b24 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e113      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002038:	4b7f      	ldr	r3, [pc, #508]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1ed      	bne.n	8002022 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002046:	7ffb      	ldrb	r3, [r7, #31]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d105      	bne.n	8002058 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204c:	4b7a      	ldr	r3, [pc, #488]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	4a79      	ldr	r2, [pc, #484]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002056:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80fe 	beq.w	800225e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	2b02      	cmp	r3, #2
 8002068:	f040 80d0 	bne.w	800220c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800206c:	4b72      	ldr	r3, [pc, #456]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	429a      	cmp	r2, r3
 800207e:	d130      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	3b01      	subs	r3, #1
 800208c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d127      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d11f      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020ac:	2a07      	cmp	r2, #7
 80020ae:	bf14      	ite	ne
 80020b0:	2201      	movne	r2, #1
 80020b2:	2200      	moveq	r2, #0
 80020b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d113      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	3b01      	subs	r3, #1
 80020c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	3b01      	subs	r3, #1
 80020dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d06e      	beq.n	80021c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	d069      	beq.n	80021bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0ad      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002104:	4b4c      	ldr	r3, [pc, #304]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a4b      	ldr	r2, [pc, #300]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800210a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800210e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002110:	f7fe fd08 	bl	8000b24 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fd04 	bl	8000b24 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e09a      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212a:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002136:	4b40      	ldr	r3, [pc, #256]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	4b40      	ldr	r3, [pc, #256]	; (800223c <HAL_RCC_OscConfig+0x784>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002146:	3a01      	subs	r2, #1
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002150:	0212      	lsls	r2, r2, #8
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002158:	0852      	lsrs	r2, r2, #1
 800215a:	3a01      	subs	r2, #1
 800215c:	0552      	lsls	r2, r2, #21
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002164:	0852      	lsrs	r2, r2, #1
 8002166:	3a01      	subs	r2, #1
 8002168:	0652      	lsls	r2, r2, #25
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002170:	0912      	lsrs	r2, r2, #4
 8002172:	0452      	lsls	r2, r2, #17
 8002174:	430a      	orrs	r2, r1
 8002176:	4930      	ldr	r1, [pc, #192]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002178:	4313      	orrs	r3, r2
 800217a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800217c:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2d      	ldr	r2, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002186:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002188:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a2a      	ldr	r2, [pc, #168]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002192:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002194:	f7fe fcc6 	bl	8000b24 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7fe fcc2 	bl	8000b24 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e058      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ba:	e050      	b.n	800225e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e04f      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d148      	bne.n	800225e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a19      	ldr	r2, [pc, #100]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 80021de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021e4:	f7fe fc9e 	bl	8000b24 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe fc9a 	bl	8000b24 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e030      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x734>
 800220a:	e028      	b.n	800225e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d023      	beq.n	800225a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a08      	ldr	r2, [pc, #32]	; (8002238 <HAL_RCC_OscConfig+0x780>)
 8002218:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800221c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221e:	f7fe fc81 	bl	8000b24 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002224:	e00c      	b.n	8002240 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7fe fc7d 	bl	8000b24 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d905      	bls.n	8002240 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e013      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
 8002238:	40021000 	.word	0x40021000
 800223c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_OscConfig+0x7b0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ec      	bne.n	8002226 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_OscConfig+0x7b0>)
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	4905      	ldr	r1, [pc, #20]	; (8002268 <HAL_RCC_OscConfig+0x7b0>)
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_RCC_OscConfig+0x7b4>)
 8002254:	4013      	ands	r3, r2
 8002256:	60cb      	str	r3, [r1, #12]
 8002258:	e001      	b.n	800225e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	feeefffc 	.word	0xfeeefffc

08002270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0e7      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002284:	4b75      	ldr	r3, [pc, #468]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d910      	bls.n	80022b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b72      	ldr	r3, [pc, #456]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 0207 	bic.w	r2, r3, #7
 800229a:	4970      	ldr	r1, [pc, #448]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a2:	4b6e      	ldr	r3, [pc, #440]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0cf      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d010      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	4b66      	ldr	r3, [pc, #408]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d908      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b63      	ldr	r3, [pc, #396]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4960      	ldr	r1, [pc, #384]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d04c      	beq.n	8002388 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f6:	4b5a      	ldr	r3, [pc, #360]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d121      	bne.n	8002346 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0a6      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230e:	4b54      	ldr	r3, [pc, #336]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d115      	bne.n	8002346 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e09a      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d107      	bne.n	8002336 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002326:	4b4e      	ldr	r3, [pc, #312]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e08e      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002336:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e086      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002346:	4b46      	ldr	r3, [pc, #280]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f023 0203 	bic.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4943      	ldr	r1, [pc, #268]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002354:	4313      	orrs	r3, r2
 8002356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002358:	f7fe fbe4 	bl	8000b24 <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	e00a      	b.n	8002376 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002360:	f7fe fbe0 	bl	8000b24 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e06e      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 020c 	and.w	r2, r3, #12
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	429a      	cmp	r2, r3
 8002386:	d1eb      	bne.n	8002360 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d010      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	4b31      	ldr	r3, [pc, #196]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d208      	bcs.n	80023b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	492b      	ldr	r1, [pc, #172]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b6:	4b29      	ldr	r3, [pc, #164]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d210      	bcs.n	80023e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c4:	4b25      	ldr	r3, [pc, #148]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 0207 	bic.w	r2, r3, #7
 80023cc:	4923      	ldr	r1, [pc, #140]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <HAL_RCC_ClockConfig+0x1ec>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e036      	b.n	8002454 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4918      	ldr	r1, [pc, #96]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d009      	beq.n	8002424 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4910      	ldr	r1, [pc, #64]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002424:	f000 f824 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <HAL_RCC_ClockConfig+0x1f0>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	490b      	ldr	r1, [pc, #44]	; (8002464 <HAL_RCC_ClockConfig+0x1f4>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
 8002440:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_RCC_ClockConfig+0x1f8>)
 8002442:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1fc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fb1b 	bl	8000a84 <HAL_InitTick>
 800244e:	4603      	mov	r3, r0
 8002450:	72fb      	strb	r3, [r7, #11]

  return status;
 8002452:	7afb      	ldrb	r3, [r7, #11]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40022000 	.word	0x40022000
 8002460:	40021000 	.word	0x40021000
 8002464:	08003e94 	.word	0x08003e94
 8002468:	20000000 	.word	0x20000000
 800246c:	20000004 	.word	0x20000004

08002470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247e:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002488:	4b3b      	ldr	r3, [pc, #236]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d121      	bne.n	80024e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d11e      	bne.n	80024e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024a4:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024b0:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	e005      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024c0:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024cc:	4a2b      	ldr	r2, [pc, #172]	; (800257c <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10d      	bne.n	80024f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d102      	bne.n	80024ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	e004      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024f4:	4b23      	ldr	r3, [pc, #140]	; (8002584 <HAL_RCC_GetSysClockFreq+0x114>)
 80024f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d134      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024fe:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d003      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0xa6>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d003      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0xac>
 8002514:	e005      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_RCC_GetSysClockFreq+0x110>)
 8002518:	617b      	str	r3, [r7, #20]
      break;
 800251a:	e005      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_RCC_GetSysClockFreq+0x114>)
 800251e:	617b      	str	r3, [r7, #20]
      break;
 8002520:	e002      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	617b      	str	r3, [r7, #20]
      break;
 8002526:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	3301      	adds	r3, #1
 8002534:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	fb03 f202 	mul.w	r2, r3, r2
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_GetSysClockFreq+0x108>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	0e5b      	lsrs	r3, r3, #25
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	3301      	adds	r3, #1
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002568:	69bb      	ldr	r3, [r7, #24]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3724      	adds	r7, #36	; 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	08003eac 	.word	0x08003eac
 8002580:	00f42400 	.word	0x00f42400
 8002584:	007a1200 	.word	0x007a1200

08002588 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <HAL_RCC_GetHCLKFreq+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000000 	.word	0x20000000

080025a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025a4:	f7ff fff0 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4904      	ldr	r1, [pc, #16]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08003ea4 	.word	0x08003ea4

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025d0:	f7ff ffda 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0adb      	lsrs	r3, r3, #11
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4904      	ldr	r1, [pc, #16]	; (80025f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08003ea4 	.word	0x08003ea4

080025f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002610:	f7ff f9ee 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 8002614:	6178      	str	r0, [r7, #20]
 8002616:	e014      	b.n	8002642 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	4a24      	ldr	r2, [pc, #144]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002622:	6593      	str	r3, [r2, #88]	; 0x58
 8002624:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002630:	f7ff f9de 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 8002634:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002640:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002648:	d10b      	bne.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b80      	cmp	r3, #128	; 0x80
 800264e:	d919      	bls.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2ba0      	cmp	r3, #160	; 0xa0
 8002654:	d902      	bls.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002656:	2302      	movs	r3, #2
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	e013      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800265c:	2301      	movs	r3, #1
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e010      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b80      	cmp	r3, #128	; 0x80
 8002666:	d902      	bls.n	800266e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002668:	2303      	movs	r3, #3
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	e00a      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b80      	cmp	r3, #128	; 0x80
 8002672:	d102      	bne.n	800267a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002674:	2302      	movs	r3, #2
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	e004      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b70      	cmp	r3, #112	; 0x70
 800267e:	d101      	bne.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002680:	2301      	movs	r3, #1
 8002682:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 0207 	bic.w	r2, r3, #7
 800268c:	4909      	ldr	r1, [pc, #36]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40022000 	.word	0x40022000

080026b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026c0:	2300      	movs	r3, #0
 80026c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026c4:	2300      	movs	r3, #0
 80026c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d041      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026dc:	d02a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026e2:	d824      	bhi.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026e8:	d008      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026ee:	d81e      	bhi.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f8:	d010      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026fa:	e018      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026fc:	4b86      	ldr	r3, [pc, #536]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a85      	ldr	r2, [pc, #532]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002706:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002708:	e015      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3304      	adds	r3, #4
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fabb 	bl	8002c8c <RCCEx_PLLSAI1_Config>
 8002716:	4603      	mov	r3, r0
 8002718:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800271a:	e00c      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3320      	adds	r3, #32
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fba6 	bl	8002e74 <RCCEx_PLLSAI2_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800272c:	e003      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	74fb      	strb	r3, [r7, #19]
      break;
 8002732:	e000      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10b      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800273c:	4b76      	ldr	r3, [pc, #472]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800274a:	4973      	ldr	r1, [pc, #460]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002752:	e001      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d041      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002768:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800276c:	d02a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800276e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002772:	d824      	bhi.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002778:	d008      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800277a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800277e:	d81e      	bhi.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002788:	d010      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800278a:	e018      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800278c:	4b62      	ldr	r3, [pc, #392]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a61      	ldr	r2, [pc, #388]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002796:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002798:	e015      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fa73 	bl	8002c8c <RCCEx_PLLSAI1_Config>
 80027a6:	4603      	mov	r3, r0
 80027a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027aa:	e00c      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3320      	adds	r3, #32
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fb5e 	bl	8002e74 <RCCEx_PLLSAI2_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027bc:	e003      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	74fb      	strb	r3, [r7, #19]
      break;
 80027c2:	e000      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10b      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027cc:	4b52      	ldr	r3, [pc, #328]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027da:	494f      	ldr	r1, [pc, #316]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027e2:	e001      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80a0 	beq.w	8002936 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027fa:	4b47      	ldr	r3, [pc, #284]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800280a:	2300      	movs	r3, #0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00d      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002810:	4b41      	ldr	r3, [pc, #260]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	4a40      	ldr	r2, [pc, #256]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281a:	6593      	str	r3, [r2, #88]	; 0x58
 800281c:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002828:	2301      	movs	r3, #1
 800282a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800282c:	4b3b      	ldr	r3, [pc, #236]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a3a      	ldr	r2, [pc, #232]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002836:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002838:	f7fe f974 	bl	8000b24 <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800283e:	e009      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002840:	f7fe f970 	bl	8000b24 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d902      	bls.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	74fb      	strb	r3, [r7, #19]
        break;
 8002852:	e005      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002854:	4b31      	ldr	r3, [pc, #196]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ef      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d15c      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002866:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002870:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01f      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	429a      	cmp	r2, r3
 8002882:	d019      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002884:	4b24      	ldr	r3, [pc, #144]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002890:	4b21      	ldr	r3, [pc, #132]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	4a20      	ldr	r2, [pc, #128]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d016      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7fe f92f 	bl	8000b24 <HAL_GetTick>
 80028c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c8:	e00b      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ca:	f7fe f92b 	bl	8000b24 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d8:	4293      	cmp	r3, r2
 80028da:	d902      	bls.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	74fb      	strb	r3, [r7, #19]
            break;
 80028e0:	e006      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ec      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10c      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002906:	4904      	ldr	r1, [pc, #16]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800290e:	e009      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	74bb      	strb	r3, [r7, #18]
 8002914:	e006      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002920:	7cfb      	ldrb	r3, [r7, #19]
 8002922:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002924:	7c7b      	ldrb	r3, [r7, #17]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d105      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292a:	4b9e      	ldr	r3, [pc, #632]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	4a9d      	ldr	r2, [pc, #628]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002934:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002942:	4b98      	ldr	r3, [pc, #608]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002948:	f023 0203 	bic.w	r2, r3, #3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	4994      	ldr	r1, [pc, #592]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002964:	4b8f      	ldr	r3, [pc, #572]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	f023 020c 	bic.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	498c      	ldr	r1, [pc, #560]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002986:	4b87      	ldr	r3, [pc, #540]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	4983      	ldr	r1, [pc, #524]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029a8:	4b7e      	ldr	r3, [pc, #504]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	497b      	ldr	r1, [pc, #492]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029ca:	4b76      	ldr	r3, [pc, #472]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d8:	4972      	ldr	r1, [pc, #456]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029ec:	4b6d      	ldr	r3, [pc, #436]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	496a      	ldr	r1, [pc, #424]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a0e:	4b65      	ldr	r3, [pc, #404]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	4961      	ldr	r1, [pc, #388]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a30:	4b5c      	ldr	r3, [pc, #368]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3e:	4959      	ldr	r1, [pc, #356]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a52:	4b54      	ldr	r3, [pc, #336]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a60:	4950      	ldr	r1, [pc, #320]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a74:	4b4b      	ldr	r3, [pc, #300]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	4948      	ldr	r1, [pc, #288]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a96:	4b43      	ldr	r3, [pc, #268]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	493f      	ldr	r1, [pc, #252]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d028      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ab8:	4b3a      	ldr	r3, [pc, #232]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac6:	4937      	ldr	r1, [pc, #220]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad8:	4b32      	ldr	r3, [pc, #200]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4a31      	ldr	r2, [pc, #196]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae2:	60d3      	str	r3, [r2, #12]
 8002ae4:	e011      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aee:	d10c      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	2101      	movs	r1, #1
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f8c8 	bl	8002c8c <RCCEx_PLLSAI1_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d028      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b16:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	491f      	ldr	r1, [pc, #124]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b34:	d106      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b40:	60d3      	str	r3, [r2, #12]
 8002b42:	e011      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2101      	movs	r1, #1
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 f899 	bl	8002c8c <RCCEx_PLLSAI1_Config>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b5e:	7cfb      	ldrb	r3, [r7, #19]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d02b      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b82:	4908      	ldr	r1, [pc, #32]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b92:	d109      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4a02      	ldr	r2, [pc, #8]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b9e:	60d3      	str	r3, [r2, #12]
 8002ba0:	e014      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f867 	bl	8002c8c <RCCEx_PLLSAI1_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d02f      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bd8:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be6:	4928      	ldr	r1, [pc, #160]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bf6:	d10d      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f844 	bl	8002c8c <RCCEx_PLLSAI1_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d014      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c0e:	7cfb      	ldrb	r3, [r7, #19]
 8002c10:	74bb      	strb	r3, [r7, #18]
 8002c12:	e011      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3320      	adds	r3, #32
 8002c22:	2102      	movs	r1, #2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f925 	bl	8002e74 <RCCEx_PLLSAI2_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c52:	490d      	ldr	r1, [pc, #52]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c76:	4904      	ldr	r1, [pc, #16]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40021000 	.word	0x40021000

08002c8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c9a:	4b75      	ldr	r3, [pc, #468]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d018      	beq.n	8002cd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ca6:	4b72      	ldr	r3, [pc, #456]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0203 	and.w	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d10d      	bne.n	8002cd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cbe:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
       ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d047      	beq.n	8002d62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
 8002cd6:	e044      	b.n	8002d62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d018      	beq.n	8002d12 <RCCEx_PLLSAI1_Config+0x86>
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d825      	bhi.n	8002d30 <RCCEx_PLLSAI1_Config+0xa4>
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d002      	beq.n	8002cee <RCCEx_PLLSAI1_Config+0x62>
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d009      	beq.n	8002d00 <RCCEx_PLLSAI1_Config+0x74>
 8002cec:	e020      	b.n	8002d30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cee:	4b60      	ldr	r3, [pc, #384]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11d      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfe:	e01a      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d00:	4b5b      	ldr	r3, [pc, #364]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d116      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d10:	e013      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d12:	4b57      	ldr	r3, [pc, #348]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d1e:	4b54      	ldr	r3, [pc, #336]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d2e:	e006      	b.n	8002d3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      break;
 8002d34:	e004      	b.n	8002d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d36:	bf00      	nop
 8002d38:	e002      	b.n	8002d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10d      	bne.n	8002d62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	4944      	ldr	r1, [pc, #272]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d17d      	bne.n	8002e64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d68:	4b41      	ldr	r3, [pc, #260]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a40      	ldr	r2, [pc, #256]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d74:	f7fd fed6 	bl	8000b24 <HAL_GetTick>
 8002d78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d7a:	e009      	b.n	8002d90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d7c:	f7fd fed2 	bl	8000b24 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d902      	bls.n	8002d90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d8e:	e005      	b.n	8002d9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d90:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ef      	bne.n	8002d7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d160      	bne.n	8002e64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d111      	bne.n	8002dcc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da8:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6892      	ldr	r2, [r2, #8]
 8002db8:	0211      	lsls	r1, r2, #8
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68d2      	ldr	r2, [r2, #12]
 8002dbe:	0912      	lsrs	r2, r2, #4
 8002dc0:	0452      	lsls	r2, r2, #17
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	492a      	ldr	r1, [pc, #168]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	610b      	str	r3, [r1, #16]
 8002dca:	e027      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d112      	bne.n	8002df8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dd2:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6892      	ldr	r2, [r2, #8]
 8002de2:	0211      	lsls	r1, r2, #8
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6912      	ldr	r2, [r2, #16]
 8002de8:	0852      	lsrs	r2, r2, #1
 8002dea:	3a01      	subs	r2, #1
 8002dec:	0552      	lsls	r2, r2, #21
 8002dee:	430a      	orrs	r2, r1
 8002df0:	491f      	ldr	r1, [pc, #124]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	610b      	str	r3, [r1, #16]
 8002df6:	e011      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6892      	ldr	r2, [r2, #8]
 8002e08:	0211      	lsls	r1, r2, #8
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6952      	ldr	r2, [r2, #20]
 8002e0e:	0852      	lsrs	r2, r2, #1
 8002e10:	3a01      	subs	r2, #1
 8002e12:	0652      	lsls	r2, r2, #25
 8002e14:	430a      	orrs	r2, r1
 8002e16:	4916      	ldr	r1, [pc, #88]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7fd fe7c 	bl	8000b24 <HAL_GetTick>
 8002e2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e2e:	e009      	b.n	8002e44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e30:	f7fd fe78 	bl	8000b24 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d902      	bls.n	8002e44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	73fb      	strb	r3, [r7, #15]
          break;
 8002e42:	e005      	b.n	8002e50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0ef      	beq.n	8002e30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	4904      	ldr	r1, [pc, #16]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000

08002e74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e82:	4b6a      	ldr	r3, [pc, #424]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d018      	beq.n	8002ec0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e8e:	4b67      	ldr	r3, [pc, #412]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0203 	and.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d10d      	bne.n	8002eba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ea6:	4b61      	ldr	r3, [pc, #388]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
       ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d047      	beq.n	8002f4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	e044      	b.n	8002f4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d018      	beq.n	8002efa <RCCEx_PLLSAI2_Config+0x86>
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d825      	bhi.n	8002f18 <RCCEx_PLLSAI2_Config+0xa4>
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d002      	beq.n	8002ed6 <RCCEx_PLLSAI2_Config+0x62>
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d009      	beq.n	8002ee8 <RCCEx_PLLSAI2_Config+0x74>
 8002ed4:	e020      	b.n	8002f18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ed6:	4b55      	ldr	r3, [pc, #340]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11d      	bne.n	8002f1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee6:	e01a      	b.n	8002f1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ee8:	4b50      	ldr	r3, [pc, #320]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d116      	bne.n	8002f22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef8:	e013      	b.n	8002f22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002efa:	4b4c      	ldr	r3, [pc, #304]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10f      	bne.n	8002f26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f06:	4b49      	ldr	r3, [pc, #292]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f16:	e006      	b.n	8002f26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1c:	e004      	b.n	8002f28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e002      	b.n	8002f28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10d      	bne.n	8002f4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f2e:	4b3f      	ldr	r3, [pc, #252]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6819      	ldr	r1, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	430b      	orrs	r3, r1
 8002f44:	4939      	ldr	r1, [pc, #228]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d167      	bne.n	8003020 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f50:	4b36      	ldr	r3, [pc, #216]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a35      	ldr	r2, [pc, #212]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5c:	f7fd fde2 	bl	8000b24 <HAL_GetTick>
 8002f60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f62:	e009      	b.n	8002f78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f64:	f7fd fdde 	bl	8000b24 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d902      	bls.n	8002f78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	73fb      	strb	r3, [r7, #15]
        break;
 8002f76:	e005      	b.n	8002f84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f78:	4b2c      	ldr	r3, [pc, #176]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ef      	bne.n	8002f64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d14a      	bne.n	8003020 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d111      	bne.n	8002fb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f90:	4b26      	ldr	r3, [pc, #152]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6892      	ldr	r2, [r2, #8]
 8002fa0:	0211      	lsls	r1, r2, #8
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68d2      	ldr	r2, [r2, #12]
 8002fa6:	0912      	lsrs	r2, r2, #4
 8002fa8:	0452      	lsls	r2, r2, #17
 8002faa:	430a      	orrs	r2, r1
 8002fac:	491f      	ldr	r1, [pc, #124]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	614b      	str	r3, [r1, #20]
 8002fb2:	e011      	b.n	8002fd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6892      	ldr	r2, [r2, #8]
 8002fc4:	0211      	lsls	r1, r2, #8
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6912      	ldr	r2, [r2, #16]
 8002fca:	0852      	lsrs	r2, r2, #1
 8002fcc:	3a01      	subs	r2, #1
 8002fce:	0652      	lsls	r2, r2, #25
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	4916      	ldr	r1, [pc, #88]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fd8:	4b14      	ldr	r3, [pc, #80]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a13      	ldr	r2, [pc, #76]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe4:	f7fd fd9e 	bl	8000b24 <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fea:	e009      	b.n	8003000 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fec:	f7fd fd9a 	bl	8000b24 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d902      	bls.n	8003000 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ffe:	e005      	b.n	800300c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ef      	beq.n	8002fec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	4904      	ldr	r1, [pc, #16]	; (800302c <RCCEx_PLLSAI2_Config+0x1b8>)
 800301c:	4313      	orrs	r3, r2
 800301e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000

08003030 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e040      	b.n	80030c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fd fc14 	bl	8000880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2224      	movs	r2, #36	; 0x24
 800305c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f82c 	bl	80030cc <UART_SetConfig>
 8003074:	4603      	mov	r3, r0
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e022      	b.n	80030c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fad8 	bl	800363c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800309a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fb5f 	bl	8003780 <UART_CheckIdleState>
 80030c2:	4603      	mov	r3, r0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d0:	b08a      	sub	sp, #40	; 0x28
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4ba4      	ldr	r3, [pc, #656]	; (800338c <UART_SetConfig+0x2c0>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003104:	430b      	orrs	r3, r1
 8003106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a99      	ldr	r2, [pc, #612]	; (8003390 <UART_SetConfig+0x2c4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d004      	beq.n	8003138 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003134:	4313      	orrs	r3, r2
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	430a      	orrs	r2, r1
 800314a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a90      	ldr	r2, [pc, #576]	; (8003394 <UART_SetConfig+0x2c8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d126      	bne.n	80031a4 <UART_SetConfig+0xd8>
 8003156:	4b90      	ldr	r3, [pc, #576]	; (8003398 <UART_SetConfig+0x2cc>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b03      	cmp	r3, #3
 8003162:	d81b      	bhi.n	800319c <UART_SetConfig+0xd0>
 8003164:	a201      	add	r2, pc, #4	; (adr r2, 800316c <UART_SetConfig+0xa0>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	0800317d 	.word	0x0800317d
 8003170:	0800318d 	.word	0x0800318d
 8003174:	08003185 	.word	0x08003185
 8003178:	08003195 	.word	0x08003195
 800317c:	2301      	movs	r3, #1
 800317e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003182:	e116      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003184:	2302      	movs	r3, #2
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318a:	e112      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800318c:	2304      	movs	r3, #4
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003192:	e10e      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003194:	2308      	movs	r3, #8
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319a:	e10a      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800319c:	2310      	movs	r3, #16
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a2:	e106      	b.n	80033b2 <UART_SetConfig+0x2e6>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a7c      	ldr	r2, [pc, #496]	; (800339c <UART_SetConfig+0x2d0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d138      	bne.n	8003220 <UART_SetConfig+0x154>
 80031ae:	4b7a      	ldr	r3, [pc, #488]	; (8003398 <UART_SetConfig+0x2cc>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d82d      	bhi.n	8003218 <UART_SetConfig+0x14c>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <UART_SetConfig+0xf8>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031f9 	.word	0x080031f9
 80031c8:	08003219 	.word	0x08003219
 80031cc:	08003219 	.word	0x08003219
 80031d0:	08003219 	.word	0x08003219
 80031d4:	08003209 	.word	0x08003209
 80031d8:	08003219 	.word	0x08003219
 80031dc:	08003219 	.word	0x08003219
 80031e0:	08003219 	.word	0x08003219
 80031e4:	08003201 	.word	0x08003201
 80031e8:	08003219 	.word	0x08003219
 80031ec:	08003219 	.word	0x08003219
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003211 	.word	0x08003211
 80031f8:	2300      	movs	r3, #0
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fe:	e0d8      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003200:	2302      	movs	r3, #2
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003206:	e0d4      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003208:	2304      	movs	r3, #4
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320e:	e0d0      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003210:	2308      	movs	r3, #8
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003216:	e0cc      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003218:	2310      	movs	r3, #16
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321e:	e0c8      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a5e      	ldr	r2, [pc, #376]	; (80033a0 <UART_SetConfig+0x2d4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d125      	bne.n	8003276 <UART_SetConfig+0x1aa>
 800322a:	4b5b      	ldr	r3, [pc, #364]	; (8003398 <UART_SetConfig+0x2cc>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003230:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003234:	2b30      	cmp	r3, #48	; 0x30
 8003236:	d016      	beq.n	8003266 <UART_SetConfig+0x19a>
 8003238:	2b30      	cmp	r3, #48	; 0x30
 800323a:	d818      	bhi.n	800326e <UART_SetConfig+0x1a2>
 800323c:	2b20      	cmp	r3, #32
 800323e:	d00a      	beq.n	8003256 <UART_SetConfig+0x18a>
 8003240:	2b20      	cmp	r3, #32
 8003242:	d814      	bhi.n	800326e <UART_SetConfig+0x1a2>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <UART_SetConfig+0x182>
 8003248:	2b10      	cmp	r3, #16
 800324a:	d008      	beq.n	800325e <UART_SetConfig+0x192>
 800324c:	e00f      	b.n	800326e <UART_SetConfig+0x1a2>
 800324e:	2300      	movs	r3, #0
 8003250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003254:	e0ad      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003256:	2302      	movs	r3, #2
 8003258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325c:	e0a9      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800325e:	2304      	movs	r3, #4
 8003260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003264:	e0a5      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003266:	2308      	movs	r3, #8
 8003268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326c:	e0a1      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800326e:	2310      	movs	r3, #16
 8003270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003274:	e09d      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a4a      	ldr	r2, [pc, #296]	; (80033a4 <UART_SetConfig+0x2d8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d125      	bne.n	80032cc <UART_SetConfig+0x200>
 8003280:	4b45      	ldr	r3, [pc, #276]	; (8003398 <UART_SetConfig+0x2cc>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800328a:	2bc0      	cmp	r3, #192	; 0xc0
 800328c:	d016      	beq.n	80032bc <UART_SetConfig+0x1f0>
 800328e:	2bc0      	cmp	r3, #192	; 0xc0
 8003290:	d818      	bhi.n	80032c4 <UART_SetConfig+0x1f8>
 8003292:	2b80      	cmp	r3, #128	; 0x80
 8003294:	d00a      	beq.n	80032ac <UART_SetConfig+0x1e0>
 8003296:	2b80      	cmp	r3, #128	; 0x80
 8003298:	d814      	bhi.n	80032c4 <UART_SetConfig+0x1f8>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <UART_SetConfig+0x1d8>
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d008      	beq.n	80032b4 <UART_SetConfig+0x1e8>
 80032a2:	e00f      	b.n	80032c4 <UART_SetConfig+0x1f8>
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032aa:	e082      	b.n	80033b2 <UART_SetConfig+0x2e6>
 80032ac:	2302      	movs	r3, #2
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b2:	e07e      	b.n	80033b2 <UART_SetConfig+0x2e6>
 80032b4:	2304      	movs	r3, #4
 80032b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ba:	e07a      	b.n	80033b2 <UART_SetConfig+0x2e6>
 80032bc:	2308      	movs	r3, #8
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c2:	e076      	b.n	80033b2 <UART_SetConfig+0x2e6>
 80032c4:	2310      	movs	r3, #16
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ca:	e072      	b.n	80033b2 <UART_SetConfig+0x2e6>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a35      	ldr	r2, [pc, #212]	; (80033a8 <UART_SetConfig+0x2dc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d12a      	bne.n	800332c <UART_SetConfig+0x260>
 80032d6:	4b30      	ldr	r3, [pc, #192]	; (8003398 <UART_SetConfig+0x2cc>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032e4:	d01a      	beq.n	800331c <UART_SetConfig+0x250>
 80032e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ea:	d81b      	bhi.n	8003324 <UART_SetConfig+0x258>
 80032ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f0:	d00c      	beq.n	800330c <UART_SetConfig+0x240>
 80032f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f6:	d815      	bhi.n	8003324 <UART_SetConfig+0x258>
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <UART_SetConfig+0x238>
 80032fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003300:	d008      	beq.n	8003314 <UART_SetConfig+0x248>
 8003302:	e00f      	b.n	8003324 <UART_SetConfig+0x258>
 8003304:	2300      	movs	r3, #0
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330a:	e052      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800330c:	2302      	movs	r3, #2
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003312:	e04e      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003314:	2304      	movs	r3, #4
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331a:	e04a      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800331c:	2308      	movs	r3, #8
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003322:	e046      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003324:	2310      	movs	r3, #16
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332a:	e042      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a17      	ldr	r2, [pc, #92]	; (8003390 <UART_SetConfig+0x2c4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d13a      	bne.n	80033ac <UART_SetConfig+0x2e0>
 8003336:	4b18      	ldr	r3, [pc, #96]	; (8003398 <UART_SetConfig+0x2cc>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003344:	d01a      	beq.n	800337c <UART_SetConfig+0x2b0>
 8003346:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800334a:	d81b      	bhi.n	8003384 <UART_SetConfig+0x2b8>
 800334c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003350:	d00c      	beq.n	800336c <UART_SetConfig+0x2a0>
 8003352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003356:	d815      	bhi.n	8003384 <UART_SetConfig+0x2b8>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <UART_SetConfig+0x298>
 800335c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003360:	d008      	beq.n	8003374 <UART_SetConfig+0x2a8>
 8003362:	e00f      	b.n	8003384 <UART_SetConfig+0x2b8>
 8003364:	2300      	movs	r3, #0
 8003366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336a:	e022      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800336c:	2302      	movs	r3, #2
 800336e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003372:	e01e      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003374:	2304      	movs	r3, #4
 8003376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800337a:	e01a      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800337c:	2308      	movs	r3, #8
 800337e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003382:	e016      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003384:	2310      	movs	r3, #16
 8003386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800338a:	e012      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800338c:	efff69f3 	.word	0xefff69f3
 8003390:	40008000 	.word	0x40008000
 8003394:	40013800 	.word	0x40013800
 8003398:	40021000 	.word	0x40021000
 800339c:	40004400 	.word	0x40004400
 80033a0:	40004800 	.word	0x40004800
 80033a4:	40004c00 	.word	0x40004c00
 80033a8:	40005000 	.word	0x40005000
 80033ac:	2310      	movs	r3, #16
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a9f      	ldr	r2, [pc, #636]	; (8003634 <UART_SetConfig+0x568>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d17a      	bne.n	80034b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d824      	bhi.n	800340e <UART_SetConfig+0x342>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <UART_SetConfig+0x300>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033f1 	.word	0x080033f1
 80033d0:	0800340f 	.word	0x0800340f
 80033d4:	080033f9 	.word	0x080033f9
 80033d8:	0800340f 	.word	0x0800340f
 80033dc:	080033ff 	.word	0x080033ff
 80033e0:	0800340f 	.word	0x0800340f
 80033e4:	0800340f 	.word	0x0800340f
 80033e8:	0800340f 	.word	0x0800340f
 80033ec:	08003407 	.word	0x08003407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f0:	f7ff f8d6 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 80033f4:	61f8      	str	r0, [r7, #28]
        break;
 80033f6:	e010      	b.n	800341a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f8:	4b8f      	ldr	r3, [pc, #572]	; (8003638 <UART_SetConfig+0x56c>)
 80033fa:	61fb      	str	r3, [r7, #28]
        break;
 80033fc:	e00d      	b.n	800341a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033fe:	f7ff f837 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 8003402:	61f8      	str	r0, [r7, #28]
        break;
 8003404:	e009      	b.n	800341a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340a:	61fb      	str	r3, [r7, #28]
        break;
 800340c:	e005      	b.n	800341a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003418:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80fb 	beq.w	8003618 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	429a      	cmp	r2, r3
 8003430:	d305      	bcc.n	800343e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	429a      	cmp	r2, r3
 800343c:	d903      	bls.n	8003446 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003444:	e0e8      	b.n	8003618 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	2200      	movs	r2, #0
 800344a:	461c      	mov	r4, r3
 800344c:	4615      	mov	r5, r2
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	022b      	lsls	r3, r5, #8
 8003458:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800345c:	0222      	lsls	r2, r4, #8
 800345e:	68f9      	ldr	r1, [r7, #12]
 8003460:	6849      	ldr	r1, [r1, #4]
 8003462:	0849      	lsrs	r1, r1, #1
 8003464:	2000      	movs	r0, #0
 8003466:	4688      	mov	r8, r1
 8003468:	4681      	mov	r9, r0
 800346a:	eb12 0a08 	adds.w	sl, r2, r8
 800346e:	eb43 0b09 	adc.w	fp, r3, r9
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	603b      	str	r3, [r7, #0]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003480:	4650      	mov	r0, sl
 8003482:	4659      	mov	r1, fp
 8003484:	f7fc fea0 	bl	80001c8 <__aeabi_uldivmod>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4613      	mov	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003496:	d308      	bcc.n	80034aa <UART_SetConfig+0x3de>
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349e:	d204      	bcs.n	80034aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	60da      	str	r2, [r3, #12]
 80034a8:	e0b6      	b.n	8003618 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034b0:	e0b2      	b.n	8003618 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ba:	d15e      	bne.n	800357a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80034bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d828      	bhi.n	8003516 <UART_SetConfig+0x44a>
 80034c4:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <UART_SetConfig+0x400>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	080034f9 	.word	0x080034f9
 80034d4:	08003501 	.word	0x08003501
 80034d8:	08003517 	.word	0x08003517
 80034dc:	08003507 	.word	0x08003507
 80034e0:	08003517 	.word	0x08003517
 80034e4:	08003517 	.word	0x08003517
 80034e8:	08003517 	.word	0x08003517
 80034ec:	0800350f 	.word	0x0800350f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f0:	f7ff f856 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 80034f4:	61f8      	str	r0, [r7, #28]
        break;
 80034f6:	e014      	b.n	8003522 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034f8:	f7ff f868 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 80034fc:	61f8      	str	r0, [r7, #28]
        break;
 80034fe:	e010      	b.n	8003522 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003500:	4b4d      	ldr	r3, [pc, #308]	; (8003638 <UART_SetConfig+0x56c>)
 8003502:	61fb      	str	r3, [r7, #28]
        break;
 8003504:	e00d      	b.n	8003522 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003506:	f7fe ffb3 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 800350a:	61f8      	str	r0, [r7, #28]
        break;
 800350c:	e009      	b.n	8003522 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800350e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003512:	61fb      	str	r3, [r7, #28]
        break;
 8003514:	e005      	b.n	8003522 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003520:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d077      	beq.n	8003618 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005a      	lsls	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	441a      	add	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b0f      	cmp	r3, #15
 8003542:	d916      	bls.n	8003572 <UART_SetConfig+0x4a6>
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354a:	d212      	bcs.n	8003572 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f023 030f 	bic.w	r3, r3, #15
 8003554:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	085b      	lsrs	r3, r3, #1
 800355a:	b29b      	uxth	r3, r3
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	b29a      	uxth	r2, r3
 8003562:	8afb      	ldrh	r3, [r7, #22]
 8003564:	4313      	orrs	r3, r2
 8003566:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	8afa      	ldrh	r2, [r7, #22]
 800356e:	60da      	str	r2, [r3, #12]
 8003570:	e052      	b.n	8003618 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003578:	e04e      	b.n	8003618 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800357a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800357e:	2b08      	cmp	r3, #8
 8003580:	d827      	bhi.n	80035d2 <UART_SetConfig+0x506>
 8003582:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <UART_SetConfig+0x4bc>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	080035ad 	.word	0x080035ad
 800358c:	080035b5 	.word	0x080035b5
 8003590:	080035bd 	.word	0x080035bd
 8003594:	080035d3 	.word	0x080035d3
 8003598:	080035c3 	.word	0x080035c3
 800359c:	080035d3 	.word	0x080035d3
 80035a0:	080035d3 	.word	0x080035d3
 80035a4:	080035d3 	.word	0x080035d3
 80035a8:	080035cb 	.word	0x080035cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ac:	f7fe fff8 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 80035b0:	61f8      	str	r0, [r7, #28]
        break;
 80035b2:	e014      	b.n	80035de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b4:	f7ff f80a 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 80035b8:	61f8      	str	r0, [r7, #28]
        break;
 80035ba:	e010      	b.n	80035de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035bc:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <UART_SetConfig+0x56c>)
 80035be:	61fb      	str	r3, [r7, #28]
        break;
 80035c0:	e00d      	b.n	80035de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c2:	f7fe ff55 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 80035c6:	61f8      	str	r0, [r7, #28]
        break;
 80035c8:	e009      	b.n	80035de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ce:	61fb      	str	r3, [r7, #28]
        break;
 80035d0:	e005      	b.n	80035de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035dc:	bf00      	nop
    }

    if (pclk != 0U)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d019      	beq.n	8003618 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	085a      	lsrs	r2, r3, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	441a      	add	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b0f      	cmp	r3, #15
 80035fc:	d909      	bls.n	8003612 <UART_SetConfig+0x546>
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003604:	d205      	bcs.n	8003612 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60da      	str	r2, [r3, #12]
 8003610:	e002      	b.n	8003618 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003624:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003628:	4618      	mov	r0, r3
 800362a:	3728      	adds	r7, #40	; 0x28
 800362c:	46bd      	mov	sp, r7
 800362e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003632:	bf00      	nop
 8003634:	40008000 	.word	0x40008000
 8003638:	00f42400 	.word	0x00f42400

0800363c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01a      	beq.n	8003752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800373a:	d10a      	bne.n	8003752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]
  }
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af02      	add	r7, sp, #8
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003790:	f7fd f9c8 	bl	8000b24 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d10e      	bne.n	80037c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f82d 	bl	8003812 <UART_WaitOnFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e023      	b.n	800380a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d10e      	bne.n	80037ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f817 	bl	8003812 <UART_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e00d      	b.n	800380a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b09c      	sub	sp, #112	; 0x70
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003822:	e0a5      	b.n	8003970 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	f000 80a1 	beq.w	8003970 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7fd f979 	bl	8000b24 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <UART_WaitOnFlagUntilTimeout+0x32>
 800383e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003840:	2b00      	cmp	r3, #0
 8003842:	d13e      	bne.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003854:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003858:	667b      	str	r3, [r7, #100]	; 0x64
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003864:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003868:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e6      	bne.n	8003844 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3308      	adds	r3, #8
 800387c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	663b      	str	r3, [r7, #96]	; 0x60
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3308      	adds	r3, #8
 8003894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003896:	64ba      	str	r2, [r7, #72]	; 0x48
 8003898:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800389c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e5      	bne.n	8003876 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e067      	b.n	8003992 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d04f      	beq.n	8003970 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038de:	d147      	bne.n	8003970 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
 800390a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800390e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e6      	bne.n	80038ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3308      	adds	r3, #8
 8003922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	613b      	str	r3, [r7, #16]
   return(result);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	66bb      	str	r3, [r7, #104]	; 0x68
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3308      	adds	r3, #8
 800393a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800393c:	623a      	str	r2, [r7, #32]
 800393e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	69f9      	ldr	r1, [r7, #28]
 8003942:	6a3a      	ldr	r2, [r7, #32]
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	61bb      	str	r3, [r7, #24]
   return(result);
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e5      	bne.n	800391c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e010      	b.n	8003992 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69da      	ldr	r2, [r3, #28]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4013      	ands	r3, r2
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	429a      	cmp	r2, r3
 800398c:	f43f af4a 	beq.w	8003824 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3770      	adds	r7, #112	; 0x70
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800399a:	b480      	push	{r7}
 800399c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800399e:	bf00      	nop
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af04      	add	r7, sp, #16
 80039ae:	4603      	mov	r3, r0
 80039b0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295
 80039b6:	9302      	str	r3, [sp, #8]
 80039b8:	2301      	movs	r3, #1
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	1dfb      	adds	r3, r7, #7
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2301      	movs	r3, #1
 80039c2:	2200      	movs	r2, #0
 80039c4:	2178      	movs	r1, #120	; 0x78
 80039c6:	4803      	ldr	r0, [pc, #12]	; (80039d4 <ssd1306_WriteCommand+0x2c>)
 80039c8:	f7fd fc14 	bl	80011f4 <HAL_I2C_Mem_Write>
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000030 	.word	0x20000030

080039d8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af04      	add	r7, sp, #16
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ea:	9202      	str	r2, [sp, #8]
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2301      	movs	r3, #1
 80039f4:	2240      	movs	r2, #64	; 0x40
 80039f6:	2178      	movs	r1, #120	; 0x78
 80039f8:	4803      	ldr	r0, [pc, #12]	; (8003a08 <ssd1306_WriteData+0x30>)
 80039fa:	f7fd fbfb 	bl	80011f4 <HAL_I2C_Mem_Write>
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000030 	.word	0x20000030

08003a0c <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003a10:	f7ff ffc3 	bl	800399a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003a14:	2064      	movs	r0, #100	; 0x64
 8003a16:	f7fd f891 	bl	8000b3c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f000 f9da 	bl	8003dd4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003a20:	2020      	movs	r0, #32
 8003a22:	f7ff ffc1 	bl	80039a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003a26:	2000      	movs	r0, #0
 8003a28:	f7ff ffbe 	bl	80039a8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003a2c:	20b0      	movs	r0, #176	; 0xb0
 8003a2e:	f7ff ffbb 	bl	80039a8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003a32:	20c8      	movs	r0, #200	; 0xc8
 8003a34:	f7ff ffb8 	bl	80039a8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003a38:	2000      	movs	r0, #0
 8003a3a:	f7ff ffb5 	bl	80039a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003a3e:	2010      	movs	r0, #16
 8003a40:	f7ff ffb2 	bl	80039a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003a44:	2040      	movs	r0, #64	; 0x40
 8003a46:	f7ff ffaf 	bl	80039a8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003a4a:	20ff      	movs	r0, #255	; 0xff
 8003a4c:	f000 f9ae 	bl	8003dac <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003a50:	20a1      	movs	r0, #161	; 0xa1
 8003a52:	f7ff ffa9 	bl	80039a8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003a56:	20a6      	movs	r0, #166	; 0xa6
 8003a58:	f7ff ffa6 	bl	80039a8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003a5c:	20a8      	movs	r0, #168	; 0xa8
 8003a5e:	f7ff ffa3 	bl	80039a8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8003a62:	201f      	movs	r0, #31
 8003a64:	f7ff ffa0 	bl	80039a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003a68:	20a4      	movs	r0, #164	; 0xa4
 8003a6a:	f7ff ff9d 	bl	80039a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003a6e:	20d3      	movs	r0, #211	; 0xd3
 8003a70:	f7ff ff9a 	bl	80039a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7ff ff97 	bl	80039a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003a7a:	20d5      	movs	r0, #213	; 0xd5
 8003a7c:	f7ff ff94 	bl	80039a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003a80:	20f0      	movs	r0, #240	; 0xf0
 8003a82:	f7ff ff91 	bl	80039a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003a86:	20d9      	movs	r0, #217	; 0xd9
 8003a88:	f7ff ff8e 	bl	80039a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003a8c:	2022      	movs	r0, #34	; 0x22
 8003a8e:	f7ff ff8b 	bl	80039a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003a92:	20da      	movs	r0, #218	; 0xda
 8003a94:	f7ff ff88 	bl	80039a8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8003a98:	2002      	movs	r0, #2
 8003a9a:	f7ff ff85 	bl	80039a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003a9e:	20db      	movs	r0, #219	; 0xdb
 8003aa0:	f7ff ff82 	bl	80039a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003aa4:	2020      	movs	r0, #32
 8003aa6:	f7ff ff7f 	bl	80039a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003aaa:	208d      	movs	r0, #141	; 0x8d
 8003aac:	f7ff ff7c 	bl	80039a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003ab0:	2014      	movs	r0, #20
 8003ab2:	f7ff ff79 	bl	80039a8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	f000 f98c 	bl	8003dd4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003abc:	2000      	movs	r0, #0
 8003abe:	f000 f80f 	bl	8003ae0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003ac2:	f000 f831 	bl	8003b28 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <ssd1306_Init+0xd0>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003acc:	4b03      	ldr	r3, [pc, #12]	; (8003adc <ssd1306_Init+0xd0>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003ad2:	4b02      	ldr	r3, [pc, #8]	; (8003adc <ssd1306_Init+0xd0>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	711a      	strb	r2, [r3, #4]
}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	2000030c 	.word	0x2000030c

08003ae0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	e00d      	b.n	8003b0c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <ssd1306_Fill+0x1a>
 8003af6:	2100      	movs	r1, #0
 8003af8:	e000      	b.n	8003afc <ssd1306_Fill+0x1c>
 8003afa:	21ff      	movs	r1, #255	; 0xff
 8003afc:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <ssd1306_Fill+0x44>)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	460a      	mov	r2, r1
 8003b04:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b12:	d3ed      	bcc.n	8003af0 <ssd1306_Fill+0x10>
    }
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	2000010c 	.word	0x2000010c

08003b28 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003b2e:	2300      	movs	r3, #0
 8003b30:	71fb      	strb	r3, [r7, #7]
 8003b32:	e016      	b.n	8003b62 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	3b50      	subs	r3, #80	; 0x50
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff34 	bl	80039a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003b40:	2000      	movs	r0, #0
 8003b42:	f7ff ff31 	bl	80039a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003b46:	2010      	movs	r0, #16
 8003b48:	f7ff ff2e 	bl	80039a8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	01db      	lsls	r3, r3, #7
 8003b50:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <ssd1306_UpdateScreen+0x4c>)
 8003b52:	4413      	add	r3, r2
 8003b54:	2180      	movs	r1, #128	; 0x80
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff ff3e 	bl	80039d8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	71fb      	strb	r3, [r7, #7]
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d9e5      	bls.n	8003b34 <ssd1306_UpdateScreen+0xc>
    }
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	2000010c 	.word	0x2000010c

08003b78 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	71fb      	strb	r3, [r7, #7]
 8003b82:	460b      	mov	r3, r1
 8003b84:	71bb      	strb	r3, [r7, #6]
 8003b86:	4613      	mov	r3, r2
 8003b88:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	db3d      	blt.n	8003c0e <ssd1306_DrawPixel+0x96>
 8003b92:	79bb      	ldrb	r3, [r7, #6]
 8003b94:	2b1f      	cmp	r3, #31
 8003b96:	d83a      	bhi.n	8003c0e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003b98:	797b      	ldrb	r3, [r7, #5]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d11a      	bne.n	8003bd4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003b9e:	79fa      	ldrb	r2, [r7, #7]
 8003ba0:	79bb      	ldrb	r3, [r7, #6]
 8003ba2:	08db      	lsrs	r3, r3, #3
 8003ba4:	b2d8      	uxtb	r0, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	01db      	lsls	r3, r3, #7
 8003baa:	4413      	add	r3, r2
 8003bac:	4a1b      	ldr	r2, [pc, #108]	; (8003c1c <ssd1306_DrawPixel+0xa4>)
 8003bae:	5cd3      	ldrb	r3, [r2, r3]
 8003bb0:	b25a      	sxtb	r2, r3
 8003bb2:	79bb      	ldrb	r3, [r7, #6]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	2101      	movs	r1, #1
 8003bba:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbe:	b25b      	sxtb	r3, r3
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	b259      	sxtb	r1, r3
 8003bc4:	79fa      	ldrb	r2, [r7, #7]
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	01db      	lsls	r3, r3, #7
 8003bca:	4413      	add	r3, r2
 8003bcc:	b2c9      	uxtb	r1, r1
 8003bce:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <ssd1306_DrawPixel+0xa4>)
 8003bd0:	54d1      	strb	r1, [r2, r3]
 8003bd2:	e01d      	b.n	8003c10 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003bd4:	79fa      	ldrb	r2, [r7, #7]
 8003bd6:	79bb      	ldrb	r3, [r7, #6]
 8003bd8:	08db      	lsrs	r3, r3, #3
 8003bda:	b2d8      	uxtb	r0, r3
 8003bdc:	4603      	mov	r3, r0
 8003bde:	01db      	lsls	r3, r3, #7
 8003be0:	4413      	add	r3, r2
 8003be2:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <ssd1306_DrawPixel+0xa4>)
 8003be4:	5cd3      	ldrb	r3, [r2, r3]
 8003be6:	b25a      	sxtb	r2, r3
 8003be8:	79bb      	ldrb	r3, [r7, #6]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	2101      	movs	r1, #1
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	b25b      	sxtb	r3, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	b25b      	sxtb	r3, r3
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b259      	sxtb	r1, r3
 8003bfe:	79fa      	ldrb	r2, [r7, #7]
 8003c00:	4603      	mov	r3, r0
 8003c02:	01db      	lsls	r3, r3, #7
 8003c04:	4413      	add	r3, r2
 8003c06:	b2c9      	uxtb	r1, r1
 8003c08:	4a04      	ldr	r2, [pc, #16]	; (8003c1c <ssd1306_DrawPixel+0xa4>)
 8003c0a:	54d1      	strb	r1, [r2, r3]
 8003c0c:	e000      	b.n	8003c10 <ssd1306_DrawPixel+0x98>
        return;
 8003c0e:	bf00      	nop
    }
}
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	2000010c 	.word	0x2000010c

08003c20 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b089      	sub	sp, #36	; 0x24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4604      	mov	r4, r0
 8003c28:	1d38      	adds	r0, r7, #4
 8003c2a:	e880 0006 	stmia.w	r0, {r1, r2}
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4623      	mov	r3, r4
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	4613      	mov	r3, r2
 8003c36:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b1f      	cmp	r3, #31
 8003c3c:	d902      	bls.n	8003c44 <ssd1306_WriteChar+0x24>
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b7e      	cmp	r3, #126	; 0x7e
 8003c42:	d901      	bls.n	8003c48 <ssd1306_WriteChar+0x28>
        return 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e06d      	b.n	8003d24 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003c48:	4b38      	ldr	r3, [pc, #224]	; (8003d2c <ssd1306_WriteChar+0x10c>)
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	793b      	ldrb	r3, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	2b80      	cmp	r3, #128	; 0x80
 8003c54:	dc06      	bgt.n	8003c64 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003c56:	4b35      	ldr	r3, [pc, #212]	; (8003d2c <ssd1306_WriteChar+0x10c>)
 8003c58:	885b      	ldrh	r3, [r3, #2]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	797b      	ldrb	r3, [r7, #5]
 8003c5e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	dd01      	ble.n	8003c68 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e05d      	b.n	8003d24 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
 8003c6c:	e04c      	b.n	8003d08 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	3b20      	subs	r3, #32
 8003c74:	7979      	ldrb	r1, [r7, #5]
 8003c76:	fb01 f303 	mul.w	r3, r1, r3
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	440b      	add	r3, r1
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61bb      	str	r3, [r7, #24]
 8003c8c:	e034      	b.n	8003cf8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d012      	beq.n	8003cc4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003c9e:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <ssd1306_WriteChar+0x10c>)
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	4413      	add	r3, r2
 8003caa:	b2d8      	uxtb	r0, r3
 8003cac:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <ssd1306_WriteChar+0x10c>)
 8003cae:	885b      	ldrh	r3, [r3, #2]
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	7bba      	ldrb	r2, [r7, #14]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f7ff ff5b 	bl	8003b78 <ssd1306_DrawPixel>
 8003cc2:	e016      	b.n	8003cf2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003cc4:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <ssd1306_WriteChar+0x10c>)
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	b2d8      	uxtb	r0, r3
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <ssd1306_WriteChar+0x10c>)
 8003cd4:	885b      	ldrh	r3, [r3, #2]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	b2d9      	uxtb	r1, r3
 8003ce0:	7bbb      	ldrb	r3, [r7, #14]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2301      	moveq	r3, #1
 8003ce8:	2300      	movne	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	f7ff ff43 	bl	8003b78 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	793b      	ldrb	r3, [r7, #4]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d3c5      	bcc.n	8003c8e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3301      	adds	r3, #1
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	797b      	ldrb	r3, [r7, #5]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d3ad      	bcc.n	8003c6e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <ssd1306_WriteChar+0x10c>)
 8003d14:	881a      	ldrh	r2, [r3, #0]
 8003d16:	793b      	ldrb	r3, [r7, #4]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <ssd1306_WriteChar+0x10c>)
 8003d20:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3724      	adds	r7, #36	; 0x24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd90      	pop	{r4, r7, pc}
 8003d2c:	2000030c 	.word	0x2000030c

08003d30 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	1d38      	adds	r0, r7, #4
 8003d3a:	e880 0006 	stmia.w	r0, {r1, r2}
 8003d3e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8003d40:	e012      	b.n	8003d68 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	7818      	ldrb	r0, [r3, #0]
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	1d3a      	adds	r2, r7, #4
 8003d4a:	ca06      	ldmia	r2, {r1, r2}
 8003d4c:	f7ff ff68 	bl	8003c20 <ssd1306_WriteChar>
 8003d50:	4603      	mov	r3, r0
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d002      	beq.n	8003d62 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	e008      	b.n	8003d74 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3301      	adds	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1e8      	bne.n	8003d42 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	781b      	ldrb	r3, [r3, #0]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	460a      	mov	r2, r1
 8003d86:	71fb      	strb	r3, [r7, #7]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <ssd1306_SetCursor+0x2c>)
 8003d92:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003d94:	79bb      	ldrb	r3, [r7, #6]
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <ssd1306_SetCursor+0x2c>)
 8003d9a:	805a      	strh	r2, [r3, #2]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	2000030c 	.word	0x2000030c

08003dac <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003db6:	2381      	movs	r3, #129	; 0x81
 8003db8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fdf3 	bl	80039a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fdef 	bl	80039a8 <ssd1306_WriteCommand>
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003de4:	23af      	movs	r3, #175	; 0xaf
 8003de6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003de8:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <ssd1306_SetDisplayOn+0x38>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	715a      	strb	r2, [r3, #5]
 8003dee:	e004      	b.n	8003dfa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003df0:	23ae      	movs	r3, #174	; 0xae
 8003df2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <ssd1306_SetDisplayOn+0x38>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fdd3 	bl	80039a8 <ssd1306_WriteCommand>
}
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	2000030c 	.word	0x2000030c

08003e10 <__libc_init_array>:
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	4d0d      	ldr	r5, [pc, #52]	; (8003e48 <__libc_init_array+0x38>)
 8003e14:	4c0d      	ldr	r4, [pc, #52]	; (8003e4c <__libc_init_array+0x3c>)
 8003e16:	1b64      	subs	r4, r4, r5
 8003e18:	10a4      	asrs	r4, r4, #2
 8003e1a:	2600      	movs	r6, #0
 8003e1c:	42a6      	cmp	r6, r4
 8003e1e:	d109      	bne.n	8003e34 <__libc_init_array+0x24>
 8003e20:	4d0b      	ldr	r5, [pc, #44]	; (8003e50 <__libc_init_array+0x40>)
 8003e22:	4c0c      	ldr	r4, [pc, #48]	; (8003e54 <__libc_init_array+0x44>)
 8003e24:	f000 f820 	bl	8003e68 <_init>
 8003e28:	1b64      	subs	r4, r4, r5
 8003e2a:	10a4      	asrs	r4, r4, #2
 8003e2c:	2600      	movs	r6, #0
 8003e2e:	42a6      	cmp	r6, r4
 8003e30:	d105      	bne.n	8003e3e <__libc_init_array+0x2e>
 8003e32:	bd70      	pop	{r4, r5, r6, pc}
 8003e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e38:	4798      	blx	r3
 8003e3a:	3601      	adds	r6, #1
 8003e3c:	e7ee      	b.n	8003e1c <__libc_init_array+0xc>
 8003e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e42:	4798      	blx	r3
 8003e44:	3601      	adds	r6, #1
 8003e46:	e7f2      	b.n	8003e2e <__libc_init_array+0x1e>
 8003e48:	08004650 	.word	0x08004650
 8003e4c:	08004650 	.word	0x08004650
 8003e50:	08004650 	.word	0x08004650
 8003e54:	08004654 	.word	0x08004654

08003e58 <memset>:
 8003e58:	4402      	add	r2, r0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d100      	bne.n	8003e62 <memset+0xa>
 8003e60:	4770      	bx	lr
 8003e62:	f803 1b01 	strb.w	r1, [r3], #1
 8003e66:	e7f9      	b.n	8003e5c <memset+0x4>

08003e68 <_init>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	bf00      	nop
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr

08003e74 <_fini>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	bf00      	nop
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr
