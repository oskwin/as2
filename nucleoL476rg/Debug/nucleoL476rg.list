
nucleoL476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003940  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b10  08003b10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b18  08003b18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b18  08003b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08003b2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003b2c  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f75  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2e  00000000  00000000  00029fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002bae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002c468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025262  00000000  00000000  0002cd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a507  00000000  00000000  00051faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5358  00000000  00000000  0005c4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141809  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f4  00000000  00000000  0014185c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ab0 	.word	0x08003ab0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ab0 	.word	0x08003ab0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa6e 	bl	80009c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f82c 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8ac 	bl	8000644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f87a 	bl	80005e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart2, (uint8_t*)text, 1);  // Prepare for a callback after 1 byte
 80004f0:	2201      	movs	r2, #1
 80004f2:	490f      	ldr	r1, [pc, #60]	; (8000530 <main+0x54>)
 80004f4:	480f      	ldr	r0, [pc, #60]	; (8000534 <main+0x58>)
 80004f6:	f002 fa5f 	bl	80029b8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle the green LED
 80004fa:	2120      	movs	r1, #32
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000500:	f000 fe50 	bl	80011a4 <HAL_GPIO_TogglePin>
	  HAL_Delay(250); // Wait a quarter of a second
 8000504:	20fa      	movs	r0, #250	; 0xfa
 8000506:	f000 fad7 	bl	8000ab8 <HAL_Delay>
	  if (done ) {
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <main+0x5c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0f3      	beq.n	80004fa <main+0x1e>
		  done = 0;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <main+0x5c>)
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t *)request, strlen(request), 100);  // Return the character to the laptop
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <main+0x60>)
 800051a:	f7ff fe55 	bl	80001c8 <strlen>
 800051e:	4603      	mov	r3, r0
 8000520:	b29a      	uxth	r2, r3
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	4905      	ldr	r1, [pc, #20]	; (800053c <main+0x60>)
 8000526:	4803      	ldr	r0, [pc, #12]	; (8000534 <main+0x58>)
 8000528:	f002 f9b2 	bl	8002890 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle the green LED
 800052c:	e7e5      	b.n	80004fa <main+0x1e>
 800052e:	bf00      	nop
 8000530:	200000ac 	.word	0x200000ac
 8000534:	20000028 	.word	0x20000028
 8000538:	200000c0 	.word	0x200000c0
 800053c:	200000b0 	.word	0x200000b0

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b096      	sub	sp, #88	; 0x58
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2244      	movs	r2, #68	; 0x44
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 faa6 	bl	8003aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000566:	f000 fe45 	bl	80011f4 <HAL_PWREx_ControlVoltageScaling>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000570:	f000 f908 	bl	8000784 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058a:	2301      	movs	r3, #1
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800058e:	230a      	movs	r3, #10
 8000590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000592:	2307      	movs	r3, #7
 8000594:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fe7c 	bl	80012a0 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ae:	f000 f8e9 	bl	8000784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	2104      	movs	r1, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fa50 	bl	8001a70 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d6:	f000 f8d5 	bl	8000784 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3758      	adds	r7, #88	; 0x58
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <MX_USART2_UART_Init+0x5c>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_USART2_UART_Init+0x58>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000628:	f002 f8e4 	bl	80027f4 <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000632:	f000 f8a7 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000028 	.word	0x20000028
 8000640:	40004400 	.word	0x40004400

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a2a      	ldr	r2, [pc, #168]	; (8000708 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b28      	ldr	r3, [pc, #160]	; (8000708 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a24      	ldr	r2, [pc, #144]	; (8000708 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a1e      	ldr	r2, [pc, #120]	; (8000708 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a18      	ldr	r2, [pc, #96]	; (8000708 <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2120      	movs	r1, #32
 80006be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c2:	f000 fd57 	bl	8001174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_GPIO_Init+0xc8>)
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_GPIO_Init+0xcc>)
 80006dc:	f000 fba0 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006e0:	2320      	movs	r3, #32
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f000 fb91 	bl	8000e20 <HAL_GPIO_Init>

}
 80006fe:	bf00      	nop
 8000700:	3728      	adds	r7, #40	; 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000
 800070c:	10210000 	.word	0x10210000
 8000710:	48000800 	.word	0x48000800

08000714 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, (uint8_t*)text, 1);		// Prepare for a callback after 1 byte
 800071c:	2201      	movs	r2, #1
 800071e:	4914      	ldr	r1, [pc, #80]	; (8000770 <HAL_UART_RxCpltCallback+0x5c>)
 8000720:	4814      	ldr	r0, [pc, #80]	; (8000774 <HAL_UART_RxCpltCallback+0x60>)
 8000722:	f002 f949 	bl	80029b8 <HAL_UART_Receive_IT>
  if (text[0] == '\r') {
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_UART_RxCpltCallback+0x5c>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b0d      	cmp	r3, #13
 800072c:	d106      	bne.n	800073c <HAL_UART_RxCpltCallback+0x28>
	  done = 1;
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_UART_RxCpltCallback+0x64>)
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]
	  charIndex = 0;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <HAL_UART_RxCpltCallback+0x68>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
		  charIndex = 0;
	  }
	  request[charIndex] = '\0';
  }

}
 800073a:	e014      	b.n	8000766 <HAL_UART_RxCpltCallback+0x52>
	  request[charIndex++] = text[0];
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_UART_RxCpltCallback+0x68>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	490e      	ldr	r1, [pc, #56]	; (800077c <HAL_UART_RxCpltCallback+0x68>)
 8000744:	600a      	str	r2, [r1, #0]
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <HAL_UART_RxCpltCallback+0x5c>)
 8000748:	7811      	ldrb	r1, [r2, #0]
 800074a:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <HAL_UART_RxCpltCallback+0x6c>)
 800074c:	54d1      	strb	r1, [r2, r3]
	  if (charIndex > 9) {
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <HAL_UART_RxCpltCallback+0x68>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b09      	cmp	r3, #9
 8000754:	dd02      	ble.n	800075c <HAL_UART_RxCpltCallback+0x48>
		  charIndex = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_UART_RxCpltCallback+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
	  request[charIndex] = '\0';
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <HAL_UART_RxCpltCallback+0x68>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a07      	ldr	r2, [pc, #28]	; (8000780 <HAL_UART_RxCpltCallback+0x6c>)
 8000762:	2100      	movs	r1, #0
 8000764:	54d1      	strb	r1, [r2, r3]
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000ac 	.word	0x200000ac
 8000774:	20000028 	.word	0x20000028
 8000778:	200000c0 	.word	0x200000c0
 800077c:	200000bc 	.word	0x200000bc
 8000780:	200000b0 	.word	0x200000b0

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x44>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <HAL_MspInit+0x44>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6613      	str	r3, [r2, #96]	; 0x60
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_MspInit+0x44>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_MspInit+0x44>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_MspInit+0x44>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_MspInit+0x44>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0ac      	sub	sp, #176	; 0xb0
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2288      	movs	r2, #136	; 0x88
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 f951 	bl	8003aa0 <memset>
  if(huart->Instance==USART2)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a25      	ldr	r2, [pc, #148]	; (8000898 <HAL_UART_MspInit+0xc0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d143      	bne.n	8000890 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000808:	2302      	movs	r3, #2
 800080a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800080c:	2300      	movs	r3, #0
 800080e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4618      	mov	r0, r3
 8000816:	f001 fb31 	bl	8001e7c <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000820:	f7ff ffb0 	bl	8000784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <HAL_UART_MspInit+0xc4>)
 8000826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000828:	4a1c      	ldr	r2, [pc, #112]	; (800089c <HAL_UART_MspInit+0xc4>)
 800082a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082e:	6593      	str	r3, [r2, #88]	; 0x58
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <HAL_UART_MspInit+0xc4>)
 8000832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_UART_MspInit+0xc4>)
 800083e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000840:	4a16      	ldr	r2, [pc, #88]	; (800089c <HAL_UART_MspInit+0xc4>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_UART_MspInit+0xc4>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000854:	230c      	movs	r3, #12
 8000856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800086c:	2307      	movs	r3, #7
 800086e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f000 fad0 	bl	8000e20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2026      	movs	r0, #38	; 0x26
 8000886:	f000 fa16 	bl	8000cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800088a:	2026      	movs	r0, #38	; 0x26
 800088c:	f000 fa2f 	bl	8000cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000890:	bf00      	nop
 8000892:	37b0      	adds	r7, #176	; 0xb0
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40004400 	.word	0x40004400
 800089c:	40021000 	.word	0x40021000

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f8c4 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <USART2_IRQHandler+0x10>)
 80008fa:	f002 f8a1 	bl	8002a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000028 	.word	0x20000028

08000908 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <SystemInit+0x5c>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	4a14      	ldr	r2, [pc, #80]	; (8000964 <SystemInit+0x5c>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <SystemInit+0x60>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a11      	ldr	r2, [pc, #68]	; (8000968 <SystemInit+0x60>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <SystemInit+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <SystemInit+0x60>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <SystemInit+0x60>)
 8000934:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000938:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800093c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <SystemInit+0x60>)
 8000940:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000944:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <SystemInit+0x60>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a07      	ldr	r2, [pc, #28]	; (8000968 <SystemInit+0x60>)
 800094c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000950:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <SystemInit+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00
 8000968:	40021000 	.word	0x40021000

0800096c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800096c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000970:	f7ff ffca 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000974:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000976:	e003      	b.n	8000980 <LoopCopyDataInit>

08000978 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800097a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800097c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800097e:	3104      	adds	r1, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000980:	480a      	ldr	r0, [pc, #40]	; (80009ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000984:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000986:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000988:	d3f6      	bcc.n	8000978 <CopyDataInit>
	ldr	r2, =_sbss
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800098c:	e002      	b.n	8000994 <LoopFillZerobss>

0800098e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800098e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000990:	f842 3b04 	str.w	r3, [r2], #4

08000994 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000996:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000998:	d3f9      	bcc.n	800098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099a:	f003 f85d 	bl	8003a58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800099e:	f7ff fd9d 	bl	80004dc <main>

080009a2 <LoopForever>:

LoopForever:
    b LoopForever
 80009a2:	e7fe      	b.n	80009a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009a4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80009a8:	08003b20 	.word	0x08003b20
	ldr	r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009b0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80009b4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80009b8:	200000c8 	.word	0x200000c8

080009bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC1_2_IRQHandler>
	...

080009c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_Init+0x3c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <HAL_Init+0x3c>)
 80009d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d6:	2003      	movs	r0, #3
 80009d8:	f000 f962 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 f80f 	bl	8000a00 <HAL_InitTick>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d002      	beq.n	80009ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	71fb      	strb	r3, [r7, #7]
 80009ec:	e001      	b.n	80009f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ee:	f7ff fecf 	bl	8000790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f2:	79fb      	ldrb	r3, [r7, #7]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40022000 	.word	0x40022000

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_InitTick+0x6c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d023      	beq.n	8000a5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_InitTick+0x70>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_InitTick+0x6c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f96d 	bl	8000d0a <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10f      	bne.n	8000a56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d809      	bhi.n	8000a50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f000 f937 	bl	8000cb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_InitTick+0x74>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e007      	b.n	8000a60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	e004      	b.n	8000a60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	e001      	b.n	8000a60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x20>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x24>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_IncTick+0x24>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	200000c4 	.word	0x200000c4

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_GetTick+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	200000c4 	.word	0x200000c4

08000ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac0:	f7ff ffee 	bl	8000aa0 <HAL_GetTick>
 8000ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad0:	d005      	beq.n	8000ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_Delay+0x44>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ade:	bf00      	nop
 8000ae0:	f7ff ffde 	bl	8000aa0 <HAL_GetTick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8f7      	bhi.n	8000ae0 <HAL_Delay+0x28>
  {
  }
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	; (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	; 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c6c:	d301      	bcc.n	8000c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00f      	b.n	8000c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <SysTick_Config+0x40>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f7ff ff8e 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <SysTick_Config+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SysTick_Config+0x40>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff29 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff3e 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff8e 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5d 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff31 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa2 	bl	8000c5c <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b085      	sub	sp, #20
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d008      	beq.n	8000d4c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e022      	b.n	8000d92 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 020e 	bic.w	r2, r2, #14
 8000d5a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0201 	bic.w	r2, r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d70:	f003 021c 	and.w	r2, r3, #28
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2201      	movs	r2, #1
 8000d84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b084      	sub	sp, #16
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d005      	beq.n	8000dc2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2204      	movs	r2, #4
 8000dba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e029      	b.n	8000e16 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 020e 	bic.w	r2, r2, #14
 8000dd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 0201 	bic.w	r2, r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f003 021c 	and.w	r2, r3, #28
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	2101      	movs	r1, #1
 8000df0:	fa01 f202 	lsl.w	r2, r1, r2
 8000df4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	4798      	blx	r3
    }
  }
  return status;
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2e:	e17f      	b.n	8001130 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	2101      	movs	r1, #1
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8171 	beq.w	800112a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d00b      	beq.n	8000e68 <HAL_GPIO_Init+0x48>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d007      	beq.n	8000e68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5c:	2b11      	cmp	r3, #17
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b12      	cmp	r3, #18
 8000e66:	d130      	bne.n	8000eca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	f003 0201 	and.w	r2, r3, #1
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d118      	bne.n	8000f08 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000edc:	2201      	movs	r2, #1
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	f003 0201 	and.w	r2, r3, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x128>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b12      	cmp	r3, #18
 8000f46:	d123      	bne.n	8000f90 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	691a      	ldr	r2, [r3, #16]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	08da      	lsrs	r2, r3, #3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3208      	adds	r2, #8
 8000f8a:	6939      	ldr	r1, [r7, #16]
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0203 	and.w	r2, r3, #3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 80ac 	beq.w	800112a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b5f      	ldr	r3, [pc, #380]	; (8001150 <HAL_GPIO_Init+0x330>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	4a5e      	ldr	r2, [pc, #376]	; (8001150 <HAL_GPIO_Init+0x330>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fde:	4b5c      	ldr	r3, [pc, #368]	; (8001150 <HAL_GPIO_Init+0x330>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fea:	4a5a      	ldr	r2, [pc, #360]	; (8001154 <HAL_GPIO_Init+0x334>)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001014:	d025      	beq.n	8001062 <HAL_GPIO_Init+0x242>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4f      	ldr	r2, [pc, #316]	; (8001158 <HAL_GPIO_Init+0x338>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d01f      	beq.n	800105e <HAL_GPIO_Init+0x23e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4e      	ldr	r2, [pc, #312]	; (800115c <HAL_GPIO_Init+0x33c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d019      	beq.n	800105a <HAL_GPIO_Init+0x23a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4d      	ldr	r2, [pc, #308]	; (8001160 <HAL_GPIO_Init+0x340>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d013      	beq.n	8001056 <HAL_GPIO_Init+0x236>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <HAL_GPIO_Init+0x344>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d00d      	beq.n	8001052 <HAL_GPIO_Init+0x232>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4b      	ldr	r2, [pc, #300]	; (8001168 <HAL_GPIO_Init+0x348>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d007      	beq.n	800104e <HAL_GPIO_Init+0x22e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4a      	ldr	r2, [pc, #296]	; (800116c <HAL_GPIO_Init+0x34c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d101      	bne.n	800104a <HAL_GPIO_Init+0x22a>
 8001046:	2306      	movs	r3, #6
 8001048:	e00c      	b.n	8001064 <HAL_GPIO_Init+0x244>
 800104a:	2307      	movs	r3, #7
 800104c:	e00a      	b.n	8001064 <HAL_GPIO_Init+0x244>
 800104e:	2305      	movs	r3, #5
 8001050:	e008      	b.n	8001064 <HAL_GPIO_Init+0x244>
 8001052:	2304      	movs	r3, #4
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x244>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x244>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x244>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x244>
 8001062:	2300      	movs	r3, #0
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001074:	4937      	ldr	r1, [pc, #220]	; (8001154 <HAL_GPIO_Init+0x334>)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <HAL_GPIO_Init+0x350>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010a6:	4a32      	ldr	r2, [pc, #200]	; (8001170 <HAL_GPIO_Init+0x350>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010ac:	4b30      	ldr	r3, [pc, #192]	; (8001170 <HAL_GPIO_Init+0x350>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010d0:	4a27      	ldr	r2, [pc, #156]	; (8001170 <HAL_GPIO_Init+0x350>)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_GPIO_Init+0x350>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010fa:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_GPIO_Init+0x350>)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_GPIO_Init+0x350>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001124:	4a12      	ldr	r2, [pc, #72]	; (8001170 <HAL_GPIO_Init+0x350>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3301      	adds	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa22 f303 	lsr.w	r3, r2, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	f47f ae78 	bne.w	8000e30 <HAL_GPIO_Init+0x10>
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	40010000 	.word	0x40010000
 8001158:	48000400 	.word	0x48000400
 800115c:	48000800 	.word	0x48000800
 8001160:	48000c00 	.word	0x48000c00
 8001164:	48001000 	.word	0x48001000
 8001168:	48001400 	.word	0x48001400
 800116c:	48001800 	.word	0x48001800
 8001170:	40010400 	.word	0x40010400

08001174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
 8001180:	4613      	mov	r3, r2
 8001182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001190:	e002      	b.n	8001198 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4013      	ands	r3, r2
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43d9      	mvns	r1, r3
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	400b      	ands	r3, r1
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40007000 	.word	0x40007000

080011f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001202:	d130      	bne.n	8001266 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800120c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001210:	d038      	beq.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001220:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2232      	movs	r2, #50	; 0x32
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	4a1b      	ldr	r2, [pc, #108]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	0c9b      	lsrs	r3, r3, #18
 8001234:	3301      	adds	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001238:	e002      	b.n	8001240 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3b01      	subs	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124c:	d102      	bne.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x60>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f2      	bne.n	800123a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001260:	d110      	bne.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e00f      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800126e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001272:	d007      	beq.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800127c:	4a05      	ldr	r2, [pc, #20]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001282:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40007000 	.word	0x40007000
 8001298:	20000000 	.word	0x20000000
 800129c:	431bde83 	.word	0x431bde83

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e3d8      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b2:	4b97      	ldr	r3, [pc, #604]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012bc:	4b94      	ldr	r3, [pc, #592]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80e4 	beq.w	800149c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d007      	beq.n	80012ea <HAL_RCC_OscConfig+0x4a>
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b0c      	cmp	r3, #12
 80012de:	f040 808b 	bne.w	80013f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	f040 8087 	bne.w	80013f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012ea:	4b89      	ldr	r3, [pc, #548]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_RCC_OscConfig+0x62>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e3b0      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1a      	ldr	r2, [r3, #32]
 8001306:	4b82      	ldr	r3, [pc, #520]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d004      	beq.n	800131c <HAL_RCC_OscConfig+0x7c>
 8001312:	4b7f      	ldr	r3, [pc, #508]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800131a:	e005      	b.n	8001328 <HAL_RCC_OscConfig+0x88>
 800131c:	4b7c      	ldr	r3, [pc, #496]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 800131e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001328:	4293      	cmp	r3, r2
 800132a:	d223      	bcs.n	8001374 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fd43 	bl	8001dbc <RCC_SetFlashLatencyFromMSIRange>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e391      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001340:	4b73      	ldr	r3, [pc, #460]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a72      	ldr	r2, [pc, #456]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b70      	ldr	r3, [pc, #448]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	496d      	ldr	r1, [pc, #436]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 800135a:	4313      	orrs	r3, r2
 800135c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800135e:	4b6c      	ldr	r3, [pc, #432]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	4968      	ldr	r1, [pc, #416]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 800136e:	4313      	orrs	r3, r2
 8001370:	604b      	str	r3, [r1, #4]
 8001372:	e025      	b.n	80013c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001374:	4b66      	ldr	r3, [pc, #408]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a65      	ldr	r2, [pc, #404]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b63      	ldr	r3, [pc, #396]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4960      	ldr	r1, [pc, #384]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001392:	4b5f      	ldr	r3, [pc, #380]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	495b      	ldr	r1, [pc, #364]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d109      	bne.n	80013c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fd03 	bl	8001dbc <RCC_SetFlashLatencyFromMSIRange>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e351      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013c0:	f000 fc38 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b52      	ldr	r3, [pc, #328]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	4950      	ldr	r1, [pc, #320]	; (8001514 <HAL_RCC_OscConfig+0x274>)
 80013d2:	5ccb      	ldrb	r3, [r1, r3]
 80013d4:	f003 031f 	and.w	r3, r3, #31
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
 80013dc:	4a4e      	ldr	r2, [pc, #312]	; (8001518 <HAL_RCC_OscConfig+0x278>)
 80013de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013e0:	4b4e      	ldr	r3, [pc, #312]	; (800151c <HAL_RCC_OscConfig+0x27c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fb0b 	bl	8000a00 <HAL_InitTick>
 80013ea:	4603      	mov	r3, r0
 80013ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d052      	beq.n	800149a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	e335      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d032      	beq.n	8001466 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001400:	4b43      	ldr	r3, [pc, #268]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a42      	ldr	r2, [pc, #264]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800140c:	f7ff fb48 	bl	8000aa0 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001414:	f7ff fb44 	bl	8000aa0 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e31e      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001426:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001432:	4b37      	ldr	r3, [pc, #220]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a36      	ldr	r2, [pc, #216]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4931      	ldr	r1, [pc, #196]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001450:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	492c      	ldr	r1, [pc, #176]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
 8001464:	e01a      	b.n	800149c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a29      	ldr	r2, [pc, #164]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001472:	f7ff fb15 	bl	8000aa0 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800147a:	f7ff fb11 	bl	8000aa0 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e2eb      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f0      	bne.n	800147a <HAL_RCC_OscConfig+0x1da>
 8001498:	e000      	b.n	800149c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800149a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d074      	beq.n	8001592 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d005      	beq.n	80014ba <HAL_RCC_OscConfig+0x21a>
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b0c      	cmp	r3, #12
 80014b2:	d10e      	bne.n	80014d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d10b      	bne.n	80014d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d064      	beq.n	8001590 <HAL_RCC_OscConfig+0x2f0>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d160      	bne.n	8001590 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e2c8      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x24a>
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 80014e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	e026      	b.n	8001538 <HAL_RCC_OscConfig+0x298>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f2:	d115      	bne.n	8001520 <HAL_RCC_OscConfig+0x280>
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 80014fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a02      	ldr	r2, [pc, #8]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	e014      	b.n	8001538 <HAL_RCC_OscConfig+0x298>
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	08003ac8 	.word	0x08003ac8
 8001518:	20000000 	.word	0x20000000
 800151c:	20000004 	.word	0x20000004
 8001520:	4ba0      	ldr	r3, [pc, #640]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a9f      	ldr	r2, [pc, #636]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b9d      	ldr	r3, [pc, #628]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a9c      	ldr	r2, [pc, #624]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d013      	beq.n	8001568 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff faae 	bl	8000aa0 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff faaa 	bl	8000aa0 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e284      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155a:	4b92      	ldr	r3, [pc, #584]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x2a8>
 8001566:	e014      	b.n	8001592 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fa9a 	bl	8000aa0 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fa96 	bl	8000aa0 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e270      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001582:	4b88      	ldr	r3, [pc, #544]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x2d0>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d060      	beq.n	8001660 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_OscConfig+0x310>
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d119      	bne.n	80015de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d116      	bne.n	80015de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b0:	4b7c      	ldr	r3, [pc, #496]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_OscConfig+0x328>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e24d      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b76      	ldr	r3, [pc, #472]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	061b      	lsls	r3, r3, #24
 80015d6:	4973      	ldr	r1, [pc, #460]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015dc:	e040      	b.n	8001660 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d023      	beq.n	800162e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e6:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a6e      	ldr	r2, [pc, #440]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f2:	f7ff fa55 	bl	8000aa0 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fa:	f7ff fa51 	bl	8000aa0 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e22b      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800160c:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001618:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	061b      	lsls	r3, r3, #24
 8001626:	495f      	ldr	r1, [pc, #380]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
 800162c:	e018      	b.n	8001660 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162e:	4b5d      	ldr	r3, [pc, #372]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a5c      	ldr	r2, [pc, #368]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fa31 	bl	8000aa0 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff fa2d 	bl	8000aa0 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e207      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001654:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f0      	bne.n	8001642 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d03c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d01c      	beq.n	80016ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001674:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167a:	4a4a      	ldr	r2, [pc, #296]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff fa0c 	bl	8000aa0 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff fa08 	bl	8000aa0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1e2      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 80016a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0ef      	beq.n	800168c <HAL_RCC_OscConfig+0x3ec>
 80016ac:	e01b      	b.n	80016e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ae:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 80016b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b4:	4a3b      	ldr	r2, [pc, #236]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016be:	f7ff f9ef 	bl	8000aa0 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c6:	f7ff f9eb 	bl	8000aa0 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e1c5      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 80016da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ef      	bne.n	80016c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 80a6 	beq.w	8001840 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016f8:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10d      	bne.n	8001720 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001704:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001708:	4a26      	ldr	r2, [pc, #152]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 800170a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170e:	6593      	str	r3, [r2, #88]	; 0x58
 8001710:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171c:	2301      	movs	r3, #1
 800171e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <HAL_RCC_OscConfig+0x508>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d118      	bne.n	800175e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <HAL_RCC_OscConfig+0x508>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <HAL_RCC_OscConfig+0x508>)
 8001732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001736:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001738:	f7ff f9b2 	bl	8000aa0 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001740:	f7ff f9ae 	bl	8000aa0 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e188      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_RCC_OscConfig+0x508>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d108      	bne.n	8001778 <HAL_RCC_OscConfig+0x4d8>
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001776:	e029      	b.n	80017cc <HAL_RCC_OscConfig+0x52c>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d115      	bne.n	80017ac <HAL_RCC_OscConfig+0x50c>
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001786:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001796:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a0:	e014      	b.n	80017cc <HAL_RCC_OscConfig+0x52c>
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40007000 	.word	0x40007000
 80017ac:	4b91      	ldr	r3, [pc, #580]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b2:	4a90      	ldr	r2, [pc, #576]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017bc:	4b8d      	ldr	r3, [pc, #564]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80017be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c2:	4a8c      	ldr	r2, [pc, #560]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d016      	beq.n	8001802 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff f964 	bl	8000aa0 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7ff f960 	bl	8000aa0 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e138      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f2:	4b80      	ldr	r3, [pc, #512]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0ed      	beq.n	80017dc <HAL_RCC_OscConfig+0x53c>
 8001800:	e015      	b.n	800182e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001802:	f7ff f94d 	bl	8000aa0 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7ff f949 	bl	8000aa0 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f241 3288 	movw	r2, #5000	; 0x1388
 8001818:	4293      	cmp	r3, r2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e121      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001820:	4b74      	ldr	r3, [pc, #464]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 8001822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ed      	bne.n	800180a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800182e:	7ffb      	ldrb	r3, [r7, #31]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d105      	bne.n	8001840 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001834:	4b6f      	ldr	r3, [pc, #444]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	4a6e      	ldr	r2, [pc, #440]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 800183a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 810c 	beq.w	8001a62 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	2b02      	cmp	r3, #2
 8001850:	f040 80d4 	bne.w	80019fc <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001854:	4b67      	ldr	r3, [pc, #412]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 0203 	and.w	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	429a      	cmp	r2, r3
 8001866:	d130      	bne.n	80018ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	3b01      	subs	r3, #1
 8001874:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d127      	bne.n	80018ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001884:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d11f      	bne.n	80018ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001894:	2a07      	cmp	r2, #7
 8001896:	bf14      	ite	ne
 8001898:	2201      	movne	r2, #1
 800189a:	2200      	moveq	r2, #0
 800189c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800189e:	4293      	cmp	r3, r2
 80018a0:	d113      	bne.n	80018ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ac:	085b      	lsrs	r3, r3, #1
 80018ae:	3b01      	subs	r3, #1
 80018b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d109      	bne.n	80018ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	3b01      	subs	r3, #1
 80018c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d06e      	beq.n	80019a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	2b0c      	cmp	r3, #12
 80018ce:	d069      	beq.n	80019a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018d0:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018dc:	4b45      	ldr	r3, [pc, #276]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0bb      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018ec:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a40      	ldr	r2, [pc, #256]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80018f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018f8:	f7ff f8d2 	bl	8000aa0 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff f8ce 	bl	8000aa0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e0a8      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001912:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800191e:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <HAL_RCC_OscConfig+0x758>)
 8001924:	4013      	ands	r3, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800192e:	3a01      	subs	r2, #1
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	4311      	orrs	r1, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001938:	0212      	lsls	r2, r2, #8
 800193a:	4311      	orrs	r1, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001940:	0852      	lsrs	r2, r2, #1
 8001942:	3a01      	subs	r2, #1
 8001944:	0552      	lsls	r2, r2, #21
 8001946:	4311      	orrs	r1, r2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800194c:	0852      	lsrs	r2, r2, #1
 800194e:	3a01      	subs	r2, #1
 8001950:	0652      	lsls	r2, r2, #25
 8001952:	4311      	orrs	r1, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001958:	0912      	lsrs	r2, r2, #4
 800195a:	0452      	lsls	r2, r2, #17
 800195c:	430a      	orrs	r2, r1
 800195e:	4925      	ldr	r1, [pc, #148]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 8001960:	4313      	orrs	r3, r2
 8001962:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a22      	ldr	r2, [pc, #136]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 800196a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001970:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4a1f      	ldr	r2, [pc, #124]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 8001976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800197c:	f7ff f890 	bl	8000aa0 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff f88c 	bl	8000aa0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e066      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a2:	e05e      	b.n	8001a62 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e05d      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d156      	bne.n	8001a62 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80019ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019cc:	f7ff f868 	bl	8000aa0 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff f864 	bl	8000aa0 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e03e      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e6:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_RCC_OscConfig+0x754>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x734>
 80019f2:	e036      	b.n	8001a62 <HAL_RCC_OscConfig+0x7c2>
 80019f4:	40021000 	.word	0x40021000
 80019f8:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d02d      	beq.n	8001a5e <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_RCC_OscConfig+0x7cc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_RCC_OscConfig+0x7cc>)
 8001a08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_RCC_OscConfig+0x7cc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_RCC_OscConfig+0x7cc>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <HAL_RCC_OscConfig+0x7cc>)
 8001a20:	f023 0303 	bic.w	r3, r3, #3
 8001a24:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_RCC_OscConfig+0x7cc>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <HAL_RCC_OscConfig+0x7cc>)
 8001a2c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a34:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff f833 	bl	8000aa0 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff f82f 	bl	8000aa0 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e009      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_RCC_OscConfig+0x7cc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x79e>
 8001a5c:	e001      	b.n	8001a62 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40021000 	.word	0x40021000

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0c8      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b66      	ldr	r3, [pc, #408]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	4961      	ldr	r1, [pc, #388]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b5f      	ldr	r3, [pc, #380]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0b0      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d04c      	beq.n	8001b5a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac8:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d121      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e09e      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae0:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d115      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e092      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af8:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d109      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e086      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e07e      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 0203 	bic.w	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	493f      	ldr	r1, [pc, #252]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b2a:	f7fe ffb9 	bl	8000aa0 <HAL_GetTick>
 8001b2e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b32:	f7fe ffb5 	bl	8000aa0 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e066      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b48:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 020c 	and.w	r2, r3, #12
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d1eb      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	492c      	ldr	r1, [pc, #176]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b78:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d210      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0207 	bic.w	r2, r3, #7
 8001b8e:	4924      	ldr	r1, [pc, #144]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e036      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4918      	ldr	r1, [pc, #96]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4910      	ldr	r1, [pc, #64]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001be6:	f000 f825 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	490c      	ldr	r1, [pc, #48]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf8:	5ccb      	ldrb	r3, [r1, r3]
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fef8 	bl	8000a00 <HAL_InitTick>
 8001c10:	4603      	mov	r3, r0
 8001c12:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c14:	7afb      	ldrb	r3, [r7, #11]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40022000 	.word	0x40022000
 8001c24:	40021000 	.word	0x40021000
 8001c28:	08003ac8 	.word	0x08003ac8
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x34>
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d121      	bne.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d11e      	bne.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c68:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c7a:	0a1b      	lsrs	r3, r3, #8
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e005      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c90:	4a2b      	ldr	r2, [pc, #172]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10d      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d102      	bne.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cac:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	e004      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d134      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d003      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0xa6>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d003      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xac>
 8001cd8:	e005      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cdc:	617b      	str	r3, [r7, #20]
      break;
 8001cde:	e005      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ce2:	617b      	str	r3, [r7, #20]
      break;
 8001ce4:	e002      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	617b      	str	r3, [r7, #20]
      break;
 8001cea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	fb03 f202 	mul.w	r2, r3, r2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	0e5b      	lsrs	r3, r3, #25
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08003ae0 	.word	0x08003ae0
 8001d44:	00f42400 	.word	0x00f42400
 8001d48:	007a1200 	.word	0x007a1200

08001d4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000000 	.word	0x20000000

08001d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d68:	f7ff fff0 	bl	8001d4c <HAL_RCC_GetHCLKFreq>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	4904      	ldr	r1, [pc, #16]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d7a:	5ccb      	ldrb	r3, [r1, r3]
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08003ad8 	.word	0x08003ad8

08001d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d94:	f7ff ffda 	bl	8001d4c <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0adb      	lsrs	r3, r3, #11
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4904      	ldr	r1, [pc, #16]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08003ad8 	.word	0x08003ad8

08001dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dd4:	f7ff fa00 	bl	80011d8 <HAL_PWREx_GetVoltageRange>
 8001dd8:	6178      	str	r0, [r7, #20]
 8001dda:	e014      	b.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de6:	6593      	str	r3, [r2, #88]	; 0x58
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001df4:	f7ff f9f0 	bl	80011d8 <HAL_PWREx_GetVoltageRange>
 8001df8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	4a1d      	ldr	r2, [pc, #116]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0c:	d10b      	bne.n	8001e26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b80      	cmp	r3, #128	; 0x80
 8001e12:	d919      	bls.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2ba0      	cmp	r3, #160	; 0xa0
 8001e18:	d902      	bls.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	e013      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e20:	2301      	movs	r3, #1
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	e010      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b80      	cmp	r3, #128	; 0x80
 8001e2a:	d902      	bls.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	e00a      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b80      	cmp	r3, #128	; 0x80
 8001e36:	d102      	bne.n	8001e3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e38:	2302      	movs	r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	e004      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b70      	cmp	r3, #112	; 0x70
 8001e42:	d101      	bne.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e44:	2301      	movs	r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 0207 	bic.w	r2, r3, #7
 8001e50:	4909      	ldr	r1, [pc, #36]	; (8001e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e58:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d001      	beq.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40022000 	.word	0x40022000

08001e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e84:	2300      	movs	r3, #0
 8001e86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e88:	2300      	movs	r3, #0
 8001e8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d041      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ea0:	d02a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ea2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ea6:	d824      	bhi.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ea8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001eac:	d008      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001eae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001eb2:	d81e      	bhi.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001eb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ebc:	d010      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ebe:	e018      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ec0:	4b86      	ldr	r3, [pc, #536]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a85      	ldr	r2, [pc, #532]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ecc:	e015      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 fabb 	bl	8002450 <RCCEx_PLLSAI1_Config>
 8001eda:	4603      	mov	r3, r0
 8001edc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ede:	e00c      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3320      	adds	r3, #32
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fba6 	bl	8002638 <RCCEx_PLLSAI2_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ef0:	e003      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ef6:	e000      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001efa:	7cfb      	ldrb	r3, [r7, #19]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10b      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f00:	4b76      	ldr	r3, [pc, #472]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f0e:	4973      	ldr	r1, [pc, #460]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f16:	e001      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f18:	7cfb      	ldrb	r3, [r7, #19]
 8001f1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d041      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f30:	d02a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f36:	d824      	bhi.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f3c:	d008      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f42:	d81e      	bhi.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f4c:	d010      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f4e:	e018      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f50:	4b62      	ldr	r3, [pc, #392]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4a61      	ldr	r2, [pc, #388]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f5c:	e015      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 fa73 	bl	8002450 <RCCEx_PLLSAI1_Config>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f6e:	e00c      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3320      	adds	r3, #32
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fb5e 	bl	8002638 <RCCEx_PLLSAI2_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f80:	e003      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	74fb      	strb	r3, [r7, #19]
      break;
 8001f86:	e000      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f8a:	7cfb      	ldrb	r3, [r7, #19]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f90:	4b52      	ldr	r3, [pc, #328]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f9e:	494f      	ldr	r1, [pc, #316]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fa6:	e001      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80a0 	beq.w	80020fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00d      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd4:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	4a40      	ldr	r2, [pc, #256]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fde:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe0:	4b3e      	ldr	r3, [pc, #248]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fec:	2301      	movs	r3, #1
 8001fee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a3a      	ldr	r2, [pc, #232]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ffc:	f7fe fd50 	bl	8000aa0 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002002:	e009      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002004:	f7fe fd4c 	bl	8000aa0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d902      	bls.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	74fb      	strb	r3, [r7, #19]
        break;
 8002016:	e005      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002018:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ef      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d15c      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800202a:	4b2c      	ldr	r3, [pc, #176]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002034:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01f      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	429a      	cmp	r2, r3
 8002046:	d019      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002052:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	4a20      	ldr	r2, [pc, #128]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002064:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	4a1c      	ldr	r2, [pc, #112]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002074:	4a19      	ldr	r2, [pc, #100]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d016      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7fe fd0b 	bl	8000aa0 <HAL_GetTick>
 800208a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208c:	e00b      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7fe fd07 	bl	8000aa0 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d902      	bls.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	74fb      	strb	r3, [r7, #19]
            break;
 80020a4:	e006      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0ec      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ca:	4904      	ldr	r1, [pc, #16]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020d2:	e009      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	74bb      	strb	r3, [r7, #18]
 80020d8:	e006      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e8:	7c7b      	ldrb	r3, [r7, #17]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ee:	4b9e      	ldr	r3, [pc, #632]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	4a9d      	ldr	r2, [pc, #628]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002106:	4b98      	ldr	r3, [pc, #608]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210c:	f023 0203 	bic.w	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002114:	4994      	ldr	r1, [pc, #592]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002128:	4b8f      	ldr	r3, [pc, #572]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	f023 020c 	bic.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002136:	498c      	ldr	r1, [pc, #560]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800214a:	4b87      	ldr	r3, [pc, #540]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002150:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	4983      	ldr	r1, [pc, #524]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800216c:	4b7e      	ldr	r3, [pc, #504]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	497b      	ldr	r1, [pc, #492]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219c:	4972      	ldr	r1, [pc, #456]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021b0:	4b6d      	ldr	r3, [pc, #436]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	496a      	ldr	r1, [pc, #424]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021d2:	4b65      	ldr	r3, [pc, #404]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	4961      	ldr	r1, [pc, #388]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021f4:	4b5c      	ldr	r3, [pc, #368]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002202:	4959      	ldr	r1, [pc, #356]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002216:	4b54      	ldr	r3, [pc, #336]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002224:	4950      	ldr	r1, [pc, #320]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002238:	4b4b      	ldr	r3, [pc, #300]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	4948      	ldr	r1, [pc, #288]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800225a:	4b43      	ldr	r3, [pc, #268]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002260:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	493f      	ldr	r1, [pc, #252]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d028      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800227c:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800228a:	4937      	ldr	r1, [pc, #220]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800229a:	d106      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800229c:	4b32      	ldr	r3, [pc, #200]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a31      	ldr	r2, [pc, #196]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a6:	60d3      	str	r3, [r2, #12]
 80022a8:	e011      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022b2:	d10c      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3304      	adds	r3, #4
 80022b8:	2101      	movs	r1, #1
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f8c8 	bl	8002450 <RCCEx_PLLSAI1_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022c4:	7cfb      	ldrb	r3, [r7, #19]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d028      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	491f      	ldr	r1, [pc, #124]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f8:	d106      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002304:	60d3      	str	r3, [r2, #12]
 8002306:	e011      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002310:	d10c      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f000 f899 	bl	8002450 <RCCEx_PLLSAI1_Config>
 800231e:	4603      	mov	r3, r0
 8002320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d02b      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002346:	4908      	ldr	r1, [pc, #32]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002356:	d109      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a02      	ldr	r2, [pc, #8]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002362:	60d3      	str	r3, [r2, #12]
 8002364:	e014      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002374:	d10c      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3304      	adds	r3, #4
 800237a:	2101      	movs	r1, #1
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f867 	bl	8002450 <RCCEx_PLLSAI1_Config>
 8002382:	4603      	mov	r3, r0
 8002384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d02f      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800239c:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023aa:	4928      	ldr	r1, [pc, #160]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ba:	d10d      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	2102      	movs	r1, #2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f844 	bl	8002450 <RCCEx_PLLSAI1_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d014      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	74bb      	strb	r3, [r7, #18]
 80023d6:	e011      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3320      	adds	r3, #32
 80023e6:	2102      	movs	r1, #2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 f925 	bl	8002638 <RCCEx_PLLSAI2_Config>
 80023ee:	4603      	mov	r3, r0
 80023f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002416:	490d      	ldr	r1, [pc, #52]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800243a:	4904      	ldr	r1, [pc, #16]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002442:	7cbb      	ldrb	r3, [r7, #18]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000

08002450 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800245e:	4b75      	ldr	r3, [pc, #468]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d018      	beq.n	800249c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800246a:	4b72      	ldr	r3, [pc, #456]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 0203 	and.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d10d      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
       ||
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002482:	4b6c      	ldr	r3, [pc, #432]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
       ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d047      	beq.n	8002526 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e044      	b.n	8002526 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d018      	beq.n	80024d6 <RCCEx_PLLSAI1_Config+0x86>
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d825      	bhi.n	80024f4 <RCCEx_PLLSAI1_Config+0xa4>
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d002      	beq.n	80024b2 <RCCEx_PLLSAI1_Config+0x62>
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d009      	beq.n	80024c4 <RCCEx_PLLSAI1_Config+0x74>
 80024b0:	e020      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024b2:	4b60      	ldr	r3, [pc, #384]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d11d      	bne.n	80024fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c2:	e01a      	b.n	80024fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024c4:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d116      	bne.n	80024fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d4:	e013      	b.n	80024fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024d6:	4b57      	ldr	r3, [pc, #348]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10f      	bne.n	8002502 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024e2:	4b54      	ldr	r3, [pc, #336]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024f2:	e006      	b.n	8002502 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
      break;
 80024f8:	e004      	b.n	8002504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024fa:	bf00      	nop
 80024fc:	e002      	b.n	8002504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024fe:	bf00      	nop
 8002500:	e000      	b.n	8002504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002502:	bf00      	nop
    }

    if(status == HAL_OK)
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10d      	bne.n	8002526 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800250a:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	430b      	orrs	r3, r1
 8002520:	4944      	ldr	r1, [pc, #272]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d17d      	bne.n	8002628 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800252c:	4b41      	ldr	r3, [pc, #260]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a40      	ldr	r2, [pc, #256]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002532:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002538:	f7fe fab2 	bl	8000aa0 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800253e:	e009      	b.n	8002554 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002540:	f7fe faae 	bl	8000aa0 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d902      	bls.n	8002554 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	73fb      	strb	r3, [r7, #15]
        break;
 8002552:	e005      	b.n	8002560 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002554:	4b37      	ldr	r3, [pc, #220]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1ef      	bne.n	8002540 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d160      	bne.n	8002628 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d111      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6892      	ldr	r2, [r2, #8]
 800257c:	0211      	lsls	r1, r2, #8
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68d2      	ldr	r2, [r2, #12]
 8002582:	0912      	lsrs	r2, r2, #4
 8002584:	0452      	lsls	r2, r2, #17
 8002586:	430a      	orrs	r2, r1
 8002588:	492a      	ldr	r1, [pc, #168]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	610b      	str	r3, [r1, #16]
 800258e:	e027      	b.n	80025e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d112      	bne.n	80025bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002596:	4b27      	ldr	r3, [pc, #156]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800259e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6892      	ldr	r2, [r2, #8]
 80025a6:	0211      	lsls	r1, r2, #8
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6912      	ldr	r2, [r2, #16]
 80025ac:	0852      	lsrs	r2, r2, #1
 80025ae:	3a01      	subs	r2, #1
 80025b0:	0552      	lsls	r2, r2, #21
 80025b2:	430a      	orrs	r2, r1
 80025b4:	491f      	ldr	r1, [pc, #124]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	610b      	str	r3, [r1, #16]
 80025ba:	e011      	b.n	80025e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025bc:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6892      	ldr	r2, [r2, #8]
 80025cc:	0211      	lsls	r1, r2, #8
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6952      	ldr	r2, [r2, #20]
 80025d2:	0852      	lsrs	r2, r2, #1
 80025d4:	3a01      	subs	r2, #1
 80025d6:	0652      	lsls	r2, r2, #25
 80025d8:	430a      	orrs	r2, r1
 80025da:	4916      	ldr	r1, [pc, #88]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a13      	ldr	r2, [pc, #76]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe fa58 	bl	8000aa0 <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025f2:	e009      	b.n	8002608 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025f4:	f7fe fa54 	bl	8000aa0 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d902      	bls.n	8002608 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	73fb      	strb	r3, [r7, #15]
          break;
 8002606:	e005      	b.n	8002614 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ef      	beq.n	80025f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	4904      	ldr	r1, [pc, #16]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002624:	4313      	orrs	r3, r2
 8002626:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000

08002638 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002646:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d018      	beq.n	8002684 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002652:	4b67      	ldr	r3, [pc, #412]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0203 	and.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d10d      	bne.n	800267e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
       ||
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800266a:	4b61      	ldr	r3, [pc, #388]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
       ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d047      	beq.n	800270e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	e044      	b.n	800270e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d018      	beq.n	80026be <RCCEx_PLLSAI2_Config+0x86>
 800268c:	2b03      	cmp	r3, #3
 800268e:	d825      	bhi.n	80026dc <RCCEx_PLLSAI2_Config+0xa4>
 8002690:	2b01      	cmp	r3, #1
 8002692:	d002      	beq.n	800269a <RCCEx_PLLSAI2_Config+0x62>
 8002694:	2b02      	cmp	r3, #2
 8002696:	d009      	beq.n	80026ac <RCCEx_PLLSAI2_Config+0x74>
 8002698:	e020      	b.n	80026dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800269a:	4b55      	ldr	r3, [pc, #340]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d11d      	bne.n	80026e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026aa:	e01a      	b.n	80026e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026ac:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d116      	bne.n	80026e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026bc:	e013      	b.n	80026e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026be:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026ca:	4b49      	ldr	r3, [pc, #292]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026da:	e006      	b.n	80026ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      break;
 80026e0:	e004      	b.n	80026ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026e2:	bf00      	nop
 80026e4:	e002      	b.n	80026ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10d      	bne.n	800270e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026f2:	4b3f      	ldr	r3, [pc, #252]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	430b      	orrs	r3, r1
 8002708:	4939      	ldr	r1, [pc, #228]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270a:	4313      	orrs	r3, r2
 800270c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d167      	bne.n	80027e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a35      	ldr	r2, [pc, #212]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002720:	f7fe f9be 	bl	8000aa0 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002726:	e009      	b.n	800273c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002728:	f7fe f9ba 	bl	8000aa0 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d902      	bls.n	800273c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	73fb      	strb	r3, [r7, #15]
        break;
 800273a:	e005      	b.n	8002748 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800273c:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ef      	bne.n	8002728 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d14a      	bne.n	80027e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d111      	bne.n	8002778 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002754:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800275c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6892      	ldr	r2, [r2, #8]
 8002764:	0211      	lsls	r1, r2, #8
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68d2      	ldr	r2, [r2, #12]
 800276a:	0912      	lsrs	r2, r2, #4
 800276c:	0452      	lsls	r2, r2, #17
 800276e:	430a      	orrs	r2, r1
 8002770:	491f      	ldr	r1, [pc, #124]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	614b      	str	r3, [r1, #20]
 8002776:	e011      	b.n	800279c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002780:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6892      	ldr	r2, [r2, #8]
 8002788:	0211      	lsls	r1, r2, #8
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6912      	ldr	r2, [r2, #16]
 800278e:	0852      	lsrs	r2, r2, #1
 8002790:	3a01      	subs	r2, #1
 8002792:	0652      	lsls	r2, r2, #25
 8002794:	430a      	orrs	r2, r1
 8002796:	4916      	ldr	r1, [pc, #88]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002798:	4313      	orrs	r3, r2
 800279a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe f97a 	bl	8000aa0 <HAL_GetTick>
 80027ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027ae:	e009      	b.n	80027c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027b0:	f7fe f976 	bl	8000aa0 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d902      	bls.n	80027c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	73fb      	strb	r3, [r7, #15]
          break;
 80027c2:	e005      	b.n	80027d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ef      	beq.n	80027b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	4904      	ldr	r1, [pc, #16]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e040      	b.n	8002888 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fd ffde 	bl	80007d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2224      	movs	r2, #36	; 0x24
 8002820:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fb26 	bl	8002e84 <UART_SetConfig>
 8002838:	4603      	mov	r3, r0
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e022      	b.n	8002888 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fdd4 	bl	80033f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800285e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800286e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fe5b 	bl	800353c <UART_CheckIdleState>
 8002886:	4603      	mov	r3, r0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	f040 8082 	bne.w	80029ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_UART_Transmit+0x26>
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e07a      	b.n	80029b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_UART_Transmit+0x38>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e073      	b.n	80029b0 <HAL_UART_Transmit+0x120>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2221      	movs	r2, #33	; 0x21
 80028dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028de:	f7fe f8df 	bl	8000aa0 <HAL_GetTick>
 80028e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	88fa      	ldrh	r2, [r7, #6]
 80028e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	88fa      	ldrh	r2, [r7, #6]
 80028f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fc:	d108      	bne.n	8002910 <HAL_UART_Transmit+0x80>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	e003      	b.n	8002918 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002920:	e02d      	b.n	800297e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2200      	movs	r2, #0
 800292a:	2180      	movs	r1, #128	; 0x80
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fe4e 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e039      	b.n	80029b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10b      	bne.n	800295a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	881a      	ldrh	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800294e:	b292      	uxth	r2, r2
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	3302      	adds	r3, #2
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	e008      	b.n	800296c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	b292      	uxth	r2, r2
 8002964:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3301      	adds	r3, #1
 800296a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1cb      	bne.n	8002922 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	2140      	movs	r1, #64	; 0x40
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fe1a 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e005      	b.n	80029b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
  }
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3720      	adds	r7, #32
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d131      	bne.n	8002a32 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_UART_Receive_IT+0x22>
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e02a      	b.n	8002a34 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_UART_Receive_IT+0x34>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e023      	b.n	8002a34 <HAL_UART_Receive_IT+0x7c>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a0f      	ldr	r2, [pc, #60]	; (8002a3c <HAL_UART_Receive_IT+0x84>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00e      	beq.n	8002a22 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a20:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	461a      	mov	r2, r3
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fe4d 	bl	80036c8 <UART_Start_Receive_IT>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	e000      	b.n	8002a34 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
  }
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40008000 	.word	0x40008000

08002a40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d113      	bne.n	8002a98 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00e      	beq.n	8002a98 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 81cf 	beq.w	8002e2c <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
      }
      return;
 8002a96:	e1c9      	b.n	8002e2c <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80e8 	beq.w	8002c70 <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d105      	bne.n	8002ab6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4b6e      	ldr	r3, [pc, #440]	; (8002c68 <HAL_UART_IRQHandler+0x228>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80dd 	beq.w	8002c70 <HAL_UART_IRQHandler+0x230>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d010      	beq.n	8002ae2 <HAL_UART_IRQHandler+0xa2>
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d010      	beq.n	8002b0e <HAL_UART_IRQHandler+0xce>
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2202      	movs	r2, #2
 8002afc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b04:	f043 0204 	orr.w	r2, r3, #4
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d010      	beq.n	8002b3a <HAL_UART_IRQHandler+0xfa>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2204      	movs	r2, #4
 8002b28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b30:	f043 0202 	orr.w	r2, r3, #2
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d015      	beq.n	8002b70 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d104      	bne.n	8002b58 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00b      	beq.n	8002b70 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b66:	f043 0208 	orr.w	r2, r3, #8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d011      	beq.n	8002b9e <HAL_UART_IRQHandler+0x15e>
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00c      	beq.n	8002b9e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8143 	beq.w	8002e30 <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00c      	beq.n	8002bce <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d004      	beq.n	8002bee <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d031      	beq.n	8002c52 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fdf2 	bl	80037d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d123      	bne.n	8002c4a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c10:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d013      	beq.n	8002c42 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <HAL_UART_IRQHandler+0x22c>)
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe f8b9 	bl	8000d9e <HAL_DMA_Abort_IT>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d017      	beq.n	8002c62 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c40:	e00f      	b.n	8002c62 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f908 	bl	8002e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	e00b      	b.n	8002c62 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f904 	bl	8002e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c50:	e007      	b.n	8002c62 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f900 	bl	8002e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002c60:	e0e6      	b.n	8002e30 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c62:	bf00      	nop
    return;
 8002c64:	e0e4      	b.n	8002e30 <HAL_UART_IRQHandler+0x3f0>
 8002c66:	bf00      	nop
 8002c68:	04000120 	.word	0x04000120
 8002c6c:	08003837 	.word	0x08003837

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	f040 80a5 	bne.w	8002dc4 <HAL_UART_IRQHandler+0x384>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 809f 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x384>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8099 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x384>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2210      	movs	r2, #16
 8002c98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d154      	bne.n	8002d52 <HAL_UART_IRQHandler+0x312>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8002cb2:	893b      	ldrh	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80bd 	beq.w	8002e34 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002cc0:	893a      	ldrh	r2, [r7, #8]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	f080 80b6 	bcs.w	8002e34 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	893a      	ldrh	r2, [r7, #8]
 8002ccc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d12a      	bne.n	8002d36 <HAL_UART_IRQHandler+0x2f6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d0e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0210 	bic.w	r2, r2, #16
 8002d2a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd fff6 	bl	8000d22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f88e 	bl	8002e6c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d50:	e070      	b.n	8002e34 <HAL_UART_IRQHandler+0x3f4>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d063      	beq.n	8002e38 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8002d70:	897b      	ldrh	r3, [r7, #10]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d060      	beq.n	8002e38 <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d84:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0210 	bic.w	r2, r2, #16
 8002db6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002db8:	897b      	ldrh	r3, [r7, #10]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f855 	bl	8002e6c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002dc2:	e039      	b.n	8002e38 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00d      	beq.n	8002dea <HAL_UART_IRQHandler+0x3aa>
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002de0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fe2e 	bl	8003a44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002de8:	e029      	b.n	8002e3e <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00d      	beq.n	8002e10 <HAL_UART_IRQHandler+0x3d0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_UART_IRQHandler+0x3d0>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01a      	beq.n	8002e3c <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
    }
    return;
 8002e0e:	e015      	b.n	8002e3c <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d011      	beq.n	8002e3e <HAL_UART_IRQHandler+0x3fe>
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00c      	beq.n	8002e3e <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fd1c 	bl	8003862 <UART_EndTransmit_IT>
    return;
 8002e2a:	e008      	b.n	8002e3e <HAL_UART_IRQHandler+0x3fe>
      return;
 8002e2c:	bf00      	nop
 8002e2e:	e006      	b.n	8002e3e <HAL_UART_IRQHandler+0x3fe>
    return;
 8002e30:	bf00      	nop
 8002e32:	e004      	b.n	8002e3e <HAL_UART_IRQHandler+0x3fe>
      return;
 8002e34:	bf00      	nop
 8002e36:	e002      	b.n	8002e3e <HAL_UART_IRQHandler+0x3fe>
      return;
 8002e38:	bf00      	nop
 8002e3a:	e000      	b.n	8002e3e <HAL_UART_IRQHandler+0x3fe>
    return;
 8002e3c:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e88:	b08a      	sub	sp, #40	; 0x28
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4ba4      	ldr	r3, [pc, #656]	; (8003144 <UART_SetConfig+0x2c0>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a99      	ldr	r2, [pc, #612]	; (8003148 <UART_SetConfig+0x2c4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	4313      	orrs	r3, r2
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f00:	430a      	orrs	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a90      	ldr	r2, [pc, #576]	; (800314c <UART_SetConfig+0x2c8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d126      	bne.n	8002f5c <UART_SetConfig+0xd8>
 8002f0e:	4b90      	ldr	r3, [pc, #576]	; (8003150 <UART_SetConfig+0x2cc>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d81b      	bhi.n	8002f54 <UART_SetConfig+0xd0>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <UART_SetConfig+0xa0>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f45 	.word	0x08002f45
 8002f2c:	08002f3d 	.word	0x08002f3d
 8002f30:	08002f4d 	.word	0x08002f4d
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f3a:	e116      	b.n	800316a <UART_SetConfig+0x2e6>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f42:	e112      	b.n	800316a <UART_SetConfig+0x2e6>
 8002f44:	2304      	movs	r3, #4
 8002f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4a:	e10e      	b.n	800316a <UART_SetConfig+0x2e6>
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f52:	e10a      	b.n	800316a <UART_SetConfig+0x2e6>
 8002f54:	2310      	movs	r3, #16
 8002f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5a:	e106      	b.n	800316a <UART_SetConfig+0x2e6>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a7c      	ldr	r2, [pc, #496]	; (8003154 <UART_SetConfig+0x2d0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d138      	bne.n	8002fd8 <UART_SetConfig+0x154>
 8002f66:	4b7a      	ldr	r3, [pc, #488]	; (8003150 <UART_SetConfig+0x2cc>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	d82d      	bhi.n	8002fd0 <UART_SetConfig+0x14c>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <UART_SetConfig+0xf8>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fb1 	.word	0x08002fb1
 8002f80:	08002fd1 	.word	0x08002fd1
 8002f84:	08002fd1 	.word	0x08002fd1
 8002f88:	08002fd1 	.word	0x08002fd1
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	08002fd1 	.word	0x08002fd1
 8002f94:	08002fd1 	.word	0x08002fd1
 8002f98:	08002fd1 	.word	0x08002fd1
 8002f9c:	08002fb9 	.word	0x08002fb9
 8002fa0:	08002fd1 	.word	0x08002fd1
 8002fa4:	08002fd1 	.word	0x08002fd1
 8002fa8:	08002fd1 	.word	0x08002fd1
 8002fac:	08002fc9 	.word	0x08002fc9
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb6:	e0d8      	b.n	800316a <UART_SetConfig+0x2e6>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fbe:	e0d4      	b.n	800316a <UART_SetConfig+0x2e6>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc6:	e0d0      	b.n	800316a <UART_SetConfig+0x2e6>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fce:	e0cc      	b.n	800316a <UART_SetConfig+0x2e6>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd6:	e0c8      	b.n	800316a <UART_SetConfig+0x2e6>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a5e      	ldr	r2, [pc, #376]	; (8003158 <UART_SetConfig+0x2d4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d125      	bne.n	800302e <UART_SetConfig+0x1aa>
 8002fe2:	4b5b      	ldr	r3, [pc, #364]	; (8003150 <UART_SetConfig+0x2cc>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fec:	2b30      	cmp	r3, #48	; 0x30
 8002fee:	d016      	beq.n	800301e <UART_SetConfig+0x19a>
 8002ff0:	2b30      	cmp	r3, #48	; 0x30
 8002ff2:	d818      	bhi.n	8003026 <UART_SetConfig+0x1a2>
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d00a      	beq.n	800300e <UART_SetConfig+0x18a>
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d814      	bhi.n	8003026 <UART_SetConfig+0x1a2>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <UART_SetConfig+0x182>
 8003000:	2b10      	cmp	r3, #16
 8003002:	d008      	beq.n	8003016 <UART_SetConfig+0x192>
 8003004:	e00f      	b.n	8003026 <UART_SetConfig+0x1a2>
 8003006:	2300      	movs	r3, #0
 8003008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300c:	e0ad      	b.n	800316a <UART_SetConfig+0x2e6>
 800300e:	2302      	movs	r3, #2
 8003010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003014:	e0a9      	b.n	800316a <UART_SetConfig+0x2e6>
 8003016:	2304      	movs	r3, #4
 8003018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301c:	e0a5      	b.n	800316a <UART_SetConfig+0x2e6>
 800301e:	2308      	movs	r3, #8
 8003020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003024:	e0a1      	b.n	800316a <UART_SetConfig+0x2e6>
 8003026:	2310      	movs	r3, #16
 8003028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302c:	e09d      	b.n	800316a <UART_SetConfig+0x2e6>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a4a      	ldr	r2, [pc, #296]	; (800315c <UART_SetConfig+0x2d8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d125      	bne.n	8003084 <UART_SetConfig+0x200>
 8003038:	4b45      	ldr	r3, [pc, #276]	; (8003150 <UART_SetConfig+0x2cc>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003042:	2bc0      	cmp	r3, #192	; 0xc0
 8003044:	d016      	beq.n	8003074 <UART_SetConfig+0x1f0>
 8003046:	2bc0      	cmp	r3, #192	; 0xc0
 8003048:	d818      	bhi.n	800307c <UART_SetConfig+0x1f8>
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d00a      	beq.n	8003064 <UART_SetConfig+0x1e0>
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d814      	bhi.n	800307c <UART_SetConfig+0x1f8>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <UART_SetConfig+0x1d8>
 8003056:	2b40      	cmp	r3, #64	; 0x40
 8003058:	d008      	beq.n	800306c <UART_SetConfig+0x1e8>
 800305a:	e00f      	b.n	800307c <UART_SetConfig+0x1f8>
 800305c:	2300      	movs	r3, #0
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003062:	e082      	b.n	800316a <UART_SetConfig+0x2e6>
 8003064:	2302      	movs	r3, #2
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306a:	e07e      	b.n	800316a <UART_SetConfig+0x2e6>
 800306c:	2304      	movs	r3, #4
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e07a      	b.n	800316a <UART_SetConfig+0x2e6>
 8003074:	2308      	movs	r3, #8
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307a:	e076      	b.n	800316a <UART_SetConfig+0x2e6>
 800307c:	2310      	movs	r3, #16
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003082:	e072      	b.n	800316a <UART_SetConfig+0x2e6>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a35      	ldr	r2, [pc, #212]	; (8003160 <UART_SetConfig+0x2dc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d12a      	bne.n	80030e4 <UART_SetConfig+0x260>
 800308e:	4b30      	ldr	r3, [pc, #192]	; (8003150 <UART_SetConfig+0x2cc>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800309c:	d01a      	beq.n	80030d4 <UART_SetConfig+0x250>
 800309e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a2:	d81b      	bhi.n	80030dc <UART_SetConfig+0x258>
 80030a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a8:	d00c      	beq.n	80030c4 <UART_SetConfig+0x240>
 80030aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ae:	d815      	bhi.n	80030dc <UART_SetConfig+0x258>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <UART_SetConfig+0x238>
 80030b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b8:	d008      	beq.n	80030cc <UART_SetConfig+0x248>
 80030ba:	e00f      	b.n	80030dc <UART_SetConfig+0x258>
 80030bc:	2300      	movs	r3, #0
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c2:	e052      	b.n	800316a <UART_SetConfig+0x2e6>
 80030c4:	2302      	movs	r3, #2
 80030c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ca:	e04e      	b.n	800316a <UART_SetConfig+0x2e6>
 80030cc:	2304      	movs	r3, #4
 80030ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d2:	e04a      	b.n	800316a <UART_SetConfig+0x2e6>
 80030d4:	2308      	movs	r3, #8
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030da:	e046      	b.n	800316a <UART_SetConfig+0x2e6>
 80030dc:	2310      	movs	r3, #16
 80030de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e2:	e042      	b.n	800316a <UART_SetConfig+0x2e6>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a17      	ldr	r2, [pc, #92]	; (8003148 <UART_SetConfig+0x2c4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d13a      	bne.n	8003164 <UART_SetConfig+0x2e0>
 80030ee:	4b18      	ldr	r3, [pc, #96]	; (8003150 <UART_SetConfig+0x2cc>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030fc:	d01a      	beq.n	8003134 <UART_SetConfig+0x2b0>
 80030fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003102:	d81b      	bhi.n	800313c <UART_SetConfig+0x2b8>
 8003104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003108:	d00c      	beq.n	8003124 <UART_SetConfig+0x2a0>
 800310a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310e:	d815      	bhi.n	800313c <UART_SetConfig+0x2b8>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <UART_SetConfig+0x298>
 8003114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003118:	d008      	beq.n	800312c <UART_SetConfig+0x2a8>
 800311a:	e00f      	b.n	800313c <UART_SetConfig+0x2b8>
 800311c:	2300      	movs	r3, #0
 800311e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003122:	e022      	b.n	800316a <UART_SetConfig+0x2e6>
 8003124:	2302      	movs	r3, #2
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312a:	e01e      	b.n	800316a <UART_SetConfig+0x2e6>
 800312c:	2304      	movs	r3, #4
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003132:	e01a      	b.n	800316a <UART_SetConfig+0x2e6>
 8003134:	2308      	movs	r3, #8
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313a:	e016      	b.n	800316a <UART_SetConfig+0x2e6>
 800313c:	2310      	movs	r3, #16
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003142:	e012      	b.n	800316a <UART_SetConfig+0x2e6>
 8003144:	efff69f3 	.word	0xefff69f3
 8003148:	40008000 	.word	0x40008000
 800314c:	40013800 	.word	0x40013800
 8003150:	40021000 	.word	0x40021000
 8003154:	40004400 	.word	0x40004400
 8003158:	40004800 	.word	0x40004800
 800315c:	40004c00 	.word	0x40004c00
 8003160:	40005000 	.word	0x40005000
 8003164:	2310      	movs	r3, #16
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4aa0      	ldr	r2, [pc, #640]	; (80033f0 <UART_SetConfig+0x56c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d17a      	bne.n	800326a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003178:	2b08      	cmp	r3, #8
 800317a:	d824      	bhi.n	80031c6 <UART_SetConfig+0x342>
 800317c:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <UART_SetConfig+0x300>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	080031a9 	.word	0x080031a9
 8003188:	080031c7 	.word	0x080031c7
 800318c:	080031b1 	.word	0x080031b1
 8003190:	080031c7 	.word	0x080031c7
 8003194:	080031b7 	.word	0x080031b7
 8003198:	080031c7 	.word	0x080031c7
 800319c:	080031c7 	.word	0x080031c7
 80031a0:	080031c7 	.word	0x080031c7
 80031a4:	080031bf 	.word	0x080031bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a8:	f7fe fddc 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 80031ac:	61f8      	str	r0, [r7, #28]
        break;
 80031ae:	e010      	b.n	80031d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b0:	4b90      	ldr	r3, [pc, #576]	; (80033f4 <UART_SetConfig+0x570>)
 80031b2:	61fb      	str	r3, [r7, #28]
        break;
 80031b4:	e00d      	b.n	80031d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b6:	f7fe fd3d 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 80031ba:	61f8      	str	r0, [r7, #28]
        break;
 80031bc:	e009      	b.n	80031d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c2:	61fb      	str	r3, [r7, #28]
        break;
 80031c4:	e005      	b.n	80031d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80fd 	beq.w	80033d4 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d305      	bcc.n	80031f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d903      	bls.n	80031fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031fc:	e0ea      	b.n	80033d4 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	2200      	movs	r2, #0
 8003202:	461c      	mov	r4, r3
 8003204:	4615      	mov	r5, r2
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	022b      	lsls	r3, r5, #8
 8003210:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003214:	0222      	lsls	r2, r4, #8
 8003216:	68f9      	ldr	r1, [r7, #12]
 8003218:	6849      	ldr	r1, [r1, #4]
 800321a:	0849      	lsrs	r1, r1, #1
 800321c:	2000      	movs	r0, #0
 800321e:	4688      	mov	r8, r1
 8003220:	4681      	mov	r9, r0
 8003222:	eb12 0a08 	adds.w	sl, r2, r8
 8003226:	eb43 0b09 	adc.w	fp, r3, r9
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003238:	4650      	mov	r0, sl
 800323a:	4659      	mov	r1, fp
 800323c:	f7fc ffcc 	bl	80001d8 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4613      	mov	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800324e:	d308      	bcc.n	8003262 <UART_SetConfig+0x3de>
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003256:	d204      	bcs.n	8003262 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	60da      	str	r2, [r3, #12]
 8003260:	e0b8      	b.n	80033d4 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003268:	e0b4      	b.n	80033d4 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003272:	d15f      	bne.n	8003334 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8003274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003278:	2b08      	cmp	r3, #8
 800327a:	d828      	bhi.n	80032ce <UART_SetConfig+0x44a>
 800327c:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <UART_SetConfig+0x400>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	080032a9 	.word	0x080032a9
 8003288:	080032b1 	.word	0x080032b1
 800328c:	080032b9 	.word	0x080032b9
 8003290:	080032cf 	.word	0x080032cf
 8003294:	080032bf 	.word	0x080032bf
 8003298:	080032cf 	.word	0x080032cf
 800329c:	080032cf 	.word	0x080032cf
 80032a0:	080032cf 	.word	0x080032cf
 80032a4:	080032c7 	.word	0x080032c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a8:	f7fe fd5c 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 80032ac:	61f8      	str	r0, [r7, #28]
        break;
 80032ae:	e014      	b.n	80032da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032b0:	f7fe fd6e 	bl	8001d90 <HAL_RCC_GetPCLK2Freq>
 80032b4:	61f8      	str	r0, [r7, #28]
        break;
 80032b6:	e010      	b.n	80032da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b8:	4b4e      	ldr	r3, [pc, #312]	; (80033f4 <UART_SetConfig+0x570>)
 80032ba:	61fb      	str	r3, [r7, #28]
        break;
 80032bc:	e00d      	b.n	80032da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032be:	f7fe fcb9 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 80032c2:	61f8      	str	r0, [r7, #28]
        break;
 80032c4:	e009      	b.n	80032da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ca:	61fb      	str	r3, [r7, #28]
        break;
 80032cc:	e005      	b.n	80032da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d079      	beq.n	80033d4 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	005a      	lsls	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	441a      	add	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b0f      	cmp	r3, #15
 80032fc:	d916      	bls.n	800332c <UART_SetConfig+0x4a8>
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d212      	bcs.n	800332c <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f023 030f 	bic.w	r3, r3, #15
 800330e:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	b29b      	uxth	r3, r3
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	b29a      	uxth	r2, r3
 800331c:	8afb      	ldrh	r3, [r7, #22]
 800331e:	4313      	orrs	r3, r2
 8003320:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	8afa      	ldrh	r2, [r7, #22]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e053      	b.n	80033d4 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003332:	e04f      	b.n	80033d4 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003338:	2b08      	cmp	r3, #8
 800333a:	d828      	bhi.n	800338e <UART_SetConfig+0x50a>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <UART_SetConfig+0x4c0>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003369 	.word	0x08003369
 8003348:	08003371 	.word	0x08003371
 800334c:	08003379 	.word	0x08003379
 8003350:	0800338f 	.word	0x0800338f
 8003354:	0800337f 	.word	0x0800337f
 8003358:	0800338f 	.word	0x0800338f
 800335c:	0800338f 	.word	0x0800338f
 8003360:	0800338f 	.word	0x0800338f
 8003364:	08003387 	.word	0x08003387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003368:	f7fe fcfc 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 800336c:	61f8      	str	r0, [r7, #28]
        break;
 800336e:	e014      	b.n	800339a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003370:	f7fe fd0e 	bl	8001d90 <HAL_RCC_GetPCLK2Freq>
 8003374:	61f8      	str	r0, [r7, #28]
        break;
 8003376:	e010      	b.n	800339a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <UART_SetConfig+0x570>)
 800337a:	61fb      	str	r3, [r7, #28]
        break;
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337e:	f7fe fc59 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8003382:	61f8      	str	r0, [r7, #28]
        break;
 8003384:	e009      	b.n	800339a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800338a:	61fb      	str	r3, [r7, #28]
        break;
 800338c:	e005      	b.n	800339a <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003398:	bf00      	nop
    }

    if (pclk != 0U)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d019      	beq.n	80033d4 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	085a      	lsrs	r2, r3, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	441a      	add	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b0f      	cmp	r3, #15
 80033ba:	d908      	bls.n	80033ce <UART_SetConfig+0x54a>
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c2:	d204      	bcs.n	80033ce <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	e002      	b.n	80033d4 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3728      	adds	r7, #40	; 0x28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ee:	bf00      	nop
 80033f0:	40008000 	.word	0x40008000
 80033f4:	00f42400 	.word	0x00f42400

080033f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01a      	beq.n	800350e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034f6:	d10a      	bne.n	800350e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
  }
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800354c:	f7fd faa8 	bl	8000aa0 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b08      	cmp	r3, #8
 800355e:	d10e      	bne.n	800357e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f82d 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e023      	b.n	80035c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d10e      	bne.n	80035aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800358c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f817 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e00d      	b.n	80035c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	4613      	mov	r3, r2
 80035dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035de:	e05e      	b.n	800369e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d05a      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e8:	f7fd fa5a 	bl	8000aa0 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d302      	bcc.n	80035fe <UART_WaitOnFlagUntilTimeout+0x30>
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11b      	bne.n	8003636 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800360c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e043      	b.n	80036be <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d02c      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003652:	d124      	bne.n	800369e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800365c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800366c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0201 	bic.w	r2, r2, #1
 800367c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e00f      	b.n	80036be <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69da      	ldr	r2, [r3, #28]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	bf0c      	ite	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	2300      	movne	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d091      	beq.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	88fa      	ldrh	r2, [r7, #6]
 80036e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	88fa      	ldrh	r2, [r7, #6]
 80036e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fa:	d10e      	bne.n	800371a <UART_Start_Receive_IT+0x52>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <UART_Start_Receive_IT+0x48>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f240 12ff 	movw	r2, #511	; 0x1ff
 800370a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800370e:	e02d      	b.n	800376c <UART_Start_Receive_IT+0xa4>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	22ff      	movs	r2, #255	; 0xff
 8003714:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003718:	e028      	b.n	800376c <UART_Start_Receive_IT+0xa4>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10d      	bne.n	800373e <UART_Start_Receive_IT+0x76>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d104      	bne.n	8003734 <UART_Start_Receive_IT+0x6c>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	22ff      	movs	r2, #255	; 0xff
 800372e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003732:	e01b      	b.n	800376c <UART_Start_Receive_IT+0xa4>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	227f      	movs	r2, #127	; 0x7f
 8003738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800373c:	e016      	b.n	800376c <UART_Start_Receive_IT+0xa4>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003746:	d10d      	bne.n	8003764 <UART_Start_Receive_IT+0x9c>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <UART_Start_Receive_IT+0x92>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	227f      	movs	r2, #127	; 0x7f
 8003754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003758:	e008      	b.n	800376c <UART_Start_Receive_IT+0xa4>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	223f      	movs	r2, #63	; 0x3f
 800375e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003762:	e003      	b.n	800376c <UART_Start_Receive_IT+0xa4>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2222      	movs	r2, #34	; 0x22
 8003778:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003792:	d107      	bne.n	80037a4 <UART_Start_Receive_IT+0xdc>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <UART_Start_Receive_IT+0x108>)
 80037a0:	665a      	str	r2, [r3, #100]	; 0x64
 80037a2:	e002      	b.n	80037aa <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <UART_Start_Receive_IT+0x10c>)
 80037a8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80037c0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	0800396d 	.word	0x0800396d
 80037d4:	08003895 	.word	0x08003895

080037d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037ee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0210 	bic.w	r2, r2, #16
 8003816:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	665a      	str	r2, [r3, #100]	; 0x64
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7ff faff 	bl	8002e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003878:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff fadc 	bl	8002e44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038a2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038a8:	2b22      	cmp	r3, #34	; 0x22
 80038aa:	d151      	bne.n	8003950 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038b2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038b4:	89bb      	ldrh	r3, [r7, #12]
 80038b6:	b2d9      	uxtb	r1, r3
 80038b8:	89fb      	ldrh	r3, [r7, #14]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	400a      	ands	r2, r1
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d13a      	bne.n	8003964 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391e:	2b01      	cmp	r3, #1
 8003920:	d10f      	bne.n	8003942 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0210 	bic.w	r2, r2, #16
 8003930:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff fa96 	bl	8002e6c <HAL_UARTEx_RxEventCallback>
 8003940:	e002      	b.n	8003948 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fc fee6 	bl	8000714 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800394e:	e009      	b.n	8003964 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	8b1b      	ldrh	r3, [r3, #24]
 8003956:	b29a      	uxth	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0208 	orr.w	r2, r2, #8
 8003960:	b292      	uxth	r2, r2
 8003962:	831a      	strh	r2, [r3, #24]
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800397a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003980:	2b22      	cmp	r3, #34	; 0x22
 8003982:	d151      	bne.n	8003a28 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800398a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003990:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003992:	89ba      	ldrh	r2, [r7, #12]
 8003994:	89fb      	ldrh	r3, [r7, #14]
 8003996:	4013      	ands	r3, r2
 8003998:	b29a      	uxth	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	1c9a      	adds	r2, r3, #2
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d13a      	bne.n	8003a3c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d10f      	bne.n	8003a1a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0210 	bic.w	r2, r2, #16
 8003a08:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a10:	4619      	mov	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fa2a 	bl	8002e6c <HAL_UARTEx_RxEventCallback>
 8003a18:	e002      	b.n	8003a20 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fc fe7a 	bl	8000714 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a26:	e009      	b.n	8003a3c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	8b1b      	ldrh	r3, [r3, #24]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0208 	orr.w	r2, r2, #8
 8003a38:	b292      	uxth	r2, r2
 8003a3a:	831a      	strh	r2, [r3, #24]
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <__libc_init_array>:
 8003a58:	b570      	push	{r4, r5, r6, lr}
 8003a5a:	4d0d      	ldr	r5, [pc, #52]	; (8003a90 <__libc_init_array+0x38>)
 8003a5c:	4c0d      	ldr	r4, [pc, #52]	; (8003a94 <__libc_init_array+0x3c>)
 8003a5e:	1b64      	subs	r4, r4, r5
 8003a60:	10a4      	asrs	r4, r4, #2
 8003a62:	2600      	movs	r6, #0
 8003a64:	42a6      	cmp	r6, r4
 8003a66:	d109      	bne.n	8003a7c <__libc_init_array+0x24>
 8003a68:	4d0b      	ldr	r5, [pc, #44]	; (8003a98 <__libc_init_array+0x40>)
 8003a6a:	4c0c      	ldr	r4, [pc, #48]	; (8003a9c <__libc_init_array+0x44>)
 8003a6c:	f000 f820 	bl	8003ab0 <_init>
 8003a70:	1b64      	subs	r4, r4, r5
 8003a72:	10a4      	asrs	r4, r4, #2
 8003a74:	2600      	movs	r6, #0
 8003a76:	42a6      	cmp	r6, r4
 8003a78:	d105      	bne.n	8003a86 <__libc_init_array+0x2e>
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
 8003a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a80:	4798      	blx	r3
 8003a82:	3601      	adds	r6, #1
 8003a84:	e7ee      	b.n	8003a64 <__libc_init_array+0xc>
 8003a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a8a:	4798      	blx	r3
 8003a8c:	3601      	adds	r6, #1
 8003a8e:	e7f2      	b.n	8003a76 <__libc_init_array+0x1e>
 8003a90:	08003b18 	.word	0x08003b18
 8003a94:	08003b18 	.word	0x08003b18
 8003a98:	08003b18 	.word	0x08003b18
 8003a9c:	08003b1c 	.word	0x08003b1c

08003aa0 <memset>:
 8003aa0:	4402      	add	r2, r0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d100      	bne.n	8003aaa <memset+0xa>
 8003aa8:	4770      	bx	lr
 8003aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003aae:	e7f9      	b.n	8003aa4 <memset+0x4>

08003ab0 <_init>:
 8003ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab2:	bf00      	nop
 8003ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab6:	bc08      	pop	{r3}
 8003ab8:	469e      	mov	lr, r3
 8003aba:	4770      	bx	lr

08003abc <_fini>:
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	bf00      	nop
 8003ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac2:	bc08      	pop	{r3}
 8003ac4:	469e      	mov	lr, r3
 8003ac6:	4770      	bx	lr
