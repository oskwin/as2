
nucleoL476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004708  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004938  08004938  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004940  08004940  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  080049b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080049b8  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbd1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c98  00000000  00000000  0002cc71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002e910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002f310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264f3  00000000  00000000  0002fc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a859  00000000  00000000  0005615b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec032  00000000  00000000  000609b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c9e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c44  00000000  00000000  0014ca3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004880 	.word	0x08004880

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004880 	.word	0x08004880

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08e      	sub	sp, #56	; 0x38
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb87 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f879 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f963 	bl	8000840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057a:	f000 f931 	bl	80007e0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800057e:	f000 f8c5 	bl	800070c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  uart_buf_len = sprintf(uart_buf, "\nCAN BUS Communication\r\n");
 8000582:	463b      	mov	r3, r7
 8000584:	492f      	ldr	r1, [pc, #188]	; (8000644 <main+0xdc>)
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fd4c 	bl	8004024 <siprintf>
 800058c:	6378      	str	r0, [r7, #52]	; 0x34
  HAL_UART_Transmit(&huart2,(uint8_t*)uart_buf, uart_buf_len, 100);
 800058e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000590:	b29a      	uxth	r2, r3
 8000592:	4639      	mov	r1, r7
 8000594:	2364      	movs	r3, #100	; 0x64
 8000596:	482c      	ldr	r0, [pc, #176]	; (8000648 <main+0xe0>)
 8000598:	f003 f88c 	bl	80036b4 <HAL_UART_Transmit>

  // Setup the transmit header
    TxHeader.DLC = 8;
 800059c:	4b2b      	ldr	r3, [pc, #172]	; (800064c <main+0xe4>)
 800059e:	2208      	movs	r2, #8
 80005a0:	611a      	str	r2, [r3, #16]
    TxHeader.ExtId = 0;
 80005a2:	4b2a      	ldr	r3, [pc, #168]	; (800064c <main+0xe4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
    TxHeader.IDE = CAN_ID_STD;
 80005a8:	4b28      	ldr	r3, [pc, #160]	; (800064c <main+0xe4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80005ae:	4b27      	ldr	r3, [pc, #156]	; (800064c <main+0xe4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = requestMessagesID;
 80005b4:	4b25      	ldr	r3, [pc, #148]	; (800064c <main+0xe4>)
 80005b6:	f240 72df 	movw	r2, #2015	; 0x7df
 80005ba:	601a      	str	r2, [r3, #0]
    TxHeader.TransmitGlobalTime = DISABLE;
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <main+0xe4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	751a      	strb	r2, [r3, #20]

  // Setup the data or payload
	TxData[0] = 0x02;	// Look at the next 2 bytes
 80005c2:	4b23      	ldr	r3, [pc, #140]	; (8000650 <main+0xe8>)
 80005c4:	2202      	movs	r2, #2
 80005c6:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x01;	// Mode 1 requests Current Data
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <main+0xe8>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0x0D;	// Requesting velocity PID
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <main+0xe8>)
 80005d0:	220d      	movs	r2, #13
 80005d2:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x00;	// Dummy values. The number of bytes sent is set by the DLC parameter
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <main+0xe8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0x00;
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <main+0xe8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0x00;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <main+0xe8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0x00;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <main+0xe8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0x00;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <main+0xe8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	71da      	strb	r2, [r3, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Start the transmission process
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <main+0xec>)
 80005f4:	4a16      	ldr	r2, [pc, #88]	; (8000650 <main+0xe8>)
 80005f6:	4915      	ldr	r1, [pc, #84]	; (800064c <main+0xe4>)
 80005f8:	4817      	ldr	r0, [pc, #92]	; (8000658 <main+0xf0>)
 80005fa:	f000 fdea 	bl	80011d2 <HAL_CAN_AddTxMessage>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <main+0xa0>
	  	{
	  		Error_Handler();
 8000604:	f000 f9a4 	bl	8000950 <Error_Handler>
	  	}

	  HAL_Delay(500);  // Wait half a second
 8000608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060c:	f000 fbb4 	bl	8000d78 <HAL_Delay>

	  // Send data payload to UART2
	  if ((RxHeader.StdId == 0x07E8) && (RxHeader.IDE == CAN_ID_STD) )  //&& (RxHeader.DLC == 2)
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <main+0xf4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 8000618:	d1eb      	bne.n	80005f2 <main+0x8a>
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <main+0xf4>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1e7      	bne.n	80005f2 <main+0x8a>
	  {
		  uart_buf_len = sprintf(uart_buf, "%hhu\r\n", RxData[3]);
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <main+0xf8>)
 8000624:	78db      	ldrb	r3, [r3, #3]
 8000626:	461a      	mov	r2, r3
 8000628:	463b      	mov	r3, r7
 800062a:	490e      	ldr	r1, [pc, #56]	; (8000664 <main+0xfc>)
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fcf9 	bl	8004024 <siprintf>
 8000632:	6378      	str	r0, [r7, #52]	; 0x34
		  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);
 8000634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000636:	b29a      	uxth	r2, r3
 8000638:	4639      	mov	r1, r7
 800063a:	2364      	movs	r3, #100	; 0x64
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <main+0xe0>)
 800063e:	f003 f839 	bl	80036b4 <HAL_UART_Transmit>
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000642:	e7d6      	b.n	80005f2 <main+0x8a>
 8000644:	08004898 	.word	0x08004898
 8000648:	200000b0 	.word	0x200000b0
 800064c:	2000015c 	.word	0x2000015c
 8000650:	2000009c 	.word	0x2000009c
 8000654:	200000a4 	.word	0x200000a4
 8000658:	20000134 	.word	0x20000134
 800065c:	20000174 	.word	0x20000174
 8000660:	200000a8 	.word	0x200000a8
 8000664:	080048b4 	.word	0x080048b4

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b096      	sub	sp, #88	; 0x58
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2244      	movs	r2, #68	; 0x44
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fccc 	bl	8004014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800068e:	f001 fcc5 	bl	800201c <HAL_PWREx_ControlVoltageScaling>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000698:	f000 f95a 	bl	8000950 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006b6:	230a      	movs	r3, #10
 80006b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fcfc 	bl	80020c8 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006d6:	f000 f93b 	bl	8000950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 f8ce 	bl	8002894 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006fe:	f000 f927 	bl	8000950 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3758      	adds	r7, #88	; 0x58
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000712:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <MX_CAN1_Init+0xcc>)
 8000714:	4a31      	ldr	r2, [pc, #196]	; (80007dc <MX_CAN1_Init+0xd0>)
 8000716:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_CAN1_Init+0xcc>)
 800071a:	2210      	movs	r2, #16
 800071c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800071e:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <MX_CAN1_Init+0xcc>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <MX_CAN1_Init+0xcc>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800072a:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <MX_CAN1_Init+0xcc>)
 800072c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000730:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000732:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <MX_CAN1_Init+0xcc>)
 8000734:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000738:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <MX_CAN1_Init+0xcc>)
 800073c:	2200      	movs	r2, #0
 800073e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <MX_CAN1_Init+0xcc>)
 8000742:	2200      	movs	r2, #0
 8000744:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000746:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_CAN1_Init+0xcc>)
 8000748:	2200      	movs	r2, #0
 800074a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_CAN1_Init+0xcc>)
 800074e:	2200      	movs	r2, #0
 8000750:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <MX_CAN1_Init+0xcc>)
 8000754:	2200      	movs	r2, #0
 8000756:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_CAN1_Init+0xcc>)
 800075a:	2200      	movs	r2, #0
 800075c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800075e:	481e      	ldr	r0, [pc, #120]	; (80007d8 <MX_CAN1_Init+0xcc>)
 8000760:	f000 fb2e 	bl	8000dc0 <HAL_CAN_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800076a:	f000 f8f1 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800076e:	2301      	movs	r3, #1
 8000770:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 8000772:	230a      	movs	r3, #10
 8000774:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x7E0 << 5; // Standard CAN id (not extended)
 800077a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800077e:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0x0000;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x7E0 << 5;
 8000784:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000788:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000792:	2301      	movs	r3, #1
 8000794:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 0;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)	// Configure the CAN filter
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <MX_CAN1_Init+0xcc>)
 80007a0:	f000 fc09 	bl	8000fb6 <HAL_CAN_ConfigFilter>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_CAN1_Init+0xa2>
    {
      Error_Handler();
 80007aa:	f000 f8d1 	bl	8000950 <Error_Handler>
    }
    if (HAL_CAN_Start(&hcan1) != HAL_OK)	// Start the CAN peripheral
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <MX_CAN1_Init+0xcc>)
 80007b0:	f000 fccb 	bl	800114a <HAL_CAN_Start>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_CAN1_Init+0xb2>
    {
      Error_Handler();
 80007ba:	f000 f8c9 	bl	8000950 <Error_Handler>
    }
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)  // Enable CAN message receive interrupts
 80007be:	2102      	movs	r1, #2
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_CAN1_Init+0xcc>)
 80007c2:	f000 fef3 	bl	80015ac <HAL_CAN_ActivateNotification>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_CAN1_Init+0xc4>
    {
      Error_Handler();
 80007cc:	f000 f8c0 	bl	8000950 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000134 	.word	0x20000134
 80007dc:	40006400 	.word	0x40006400

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007e6:	4a15      	ldr	r2, [pc, #84]	; (800083c <MX_USART2_UART_Init+0x5c>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000824:	f002 fef8 	bl	8003618 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 f88f 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000b0 	.word	0x200000b0
 800083c:	40004400 	.word	0x40004400

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a2a      	ldr	r2, [pc, #168]	; (8000904 <MX_GPIO_Init+0xc4>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b28      	ldr	r3, [pc, #160]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a24      	ldr	r2, [pc, #144]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_GPIO_Init+0xc4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <MX_GPIO_Init+0xc4>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_GPIO_Init+0xc4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <MX_GPIO_Init+0xc4>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_GPIO_Init+0xc4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f001 fb87 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_GPIO_Init+0xc8>)
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_GPIO_Init+0xcc>)
 80008d8:	f001 f9d0 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008dc:	2320      	movs	r3, #32
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f001 f9c1 	bl	8001c7c <HAL_GPIO_Init>

}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000
 8000908:	10210000 	.word	0x10210000
 800090c:	48000800 	.word	0x48000800

08000910 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
/* This function is called when there is a CAN received interrupt*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	// Get the CAN message from FIFO0, put the header into the receive header and the data in the its array
	if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800091c:	2100      	movs	r1, #0
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f000 fd32 	bl	8001388 <HAL_CAN_GetRxMessage>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		/* Reception Error */
		Error_Handler();
 800092a:	f000 f811 	bl	8000950 <Error_Handler>
	}
	count++;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000938:	701a      	strb	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000a8 	.word	0x200000a8
 8000948:	20000174 	.word	0x20000174
 800094c:	2000008c 	.word	0x2000008c

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6613      	str	r3, [r2, #96]	; 0x60
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6593      	str	r3, [r2, #88]	; 0x58
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <HAL_CAN_MspInit+0x90>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d131      	bne.n	8000a2a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_CAN_MspInit+0x94>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <HAL_CAN_MspInit+0x94>)
 80009cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009d0:	6593      	str	r3, [r2, #88]	; 0x58
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_CAN_MspInit+0x94>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <HAL_CAN_MspInit+0x94>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <HAL_CAN_MspInit+0x94>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <HAL_CAN_MspInit+0x94>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a08:	2309      	movs	r3, #9
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a16:	f001 f931 	bl	8001c7c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2014      	movs	r0, #20
 8000a20:	f001 f8f5 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a24:	2014      	movs	r0, #20
 8000a26:	f001 f90e 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40006400 	.word	0x40006400
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0ac      	sub	sp, #176	; 0xb0
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2288      	movs	r2, #136	; 0x88
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 fad9 	bl	8004014 <memset>
  if(huart->Instance==USART2)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a21      	ldr	r2, [pc, #132]	; (8000aec <HAL_UART_MspInit+0xb0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d13b      	bne.n	8000ae4 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f002 f911 	bl	8002ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a84:	f7ff ff64 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_UART_MspInit+0xb4>)
 8000a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8c:	4a18      	ldr	r2, [pc, #96]	; (8000af0 <HAL_UART_MspInit+0xb4>)
 8000a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a92:	6593      	str	r3, [r2, #88]	; 0x58
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <HAL_UART_MspInit+0xb4>)
 8000a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <HAL_UART_MspInit+0xb4>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <HAL_UART_MspInit+0xb4>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_UART_MspInit+0xb4>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ab8:	230c      	movs	r3, #12
 8000aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ada:	4619      	mov	r1, r3
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f001 f8cc 	bl	8001c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae4:	bf00      	nop
 8000ae6:	37b0      	adds	r7, #176	; 0xb0
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40021000 	.word	0x40021000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b40:	f000 f8fa 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <CAN1_RX0_IRQHandler+0x10>)
 8000b4e:	f000 fd53 	bl	80015f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000134 	.word	0x20000134

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d207      	bcs.n	8000b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b8c:	f003 fa18 	bl	8003fc0 <__errno>
 8000b90:	4603      	mov	r3, r0
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e009      	b.n	8000bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <_sbrk+0x64>)
 8000bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20018000 	.word	0x20018000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	20000090 	.word	0x20000090
 8000bc4:	200001a8 	.word	0x200001a8

08000bc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <SystemInit+0x5c>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <SystemInit+0x5c>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <SystemInit+0x60>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <SystemInit+0x60>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <SystemInit+0x60>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <SystemInit+0x60>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <SystemInit+0x60>)
 8000bf4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000bf8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bfc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <SystemInit+0x60>)
 8000c00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <SystemInit+0x60>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <SystemInit+0x60>)
 8000c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <SystemInit+0x60>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00
 8000c28:	40021000 	.word	0x40021000

08000c2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c30:	f7ff ffca 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c36:	e003      	b.n	8000c40 <LoopCopyDataInit>

08000c38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c3e:	3104      	adds	r1, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c40:	480a      	ldr	r0, [pc, #40]	; (8000c6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c48:	d3f6      	bcc.n	8000c38 <CopyDataInit>
	ldr	r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c4c:	e002      	b.n	8000c54 <LoopFillZerobss>

08000c4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c50:	f842 3b04 	str.w	r3, [r2], #4

08000c54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <LoopForever+0x16>)
	cmp	r2, r3
 8000c56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c58:	d3f9      	bcc.n	8000c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f003 f9b7 	bl	8003fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c5e:	f7ff fc83 	bl	8000568 <main>

08000c62 <LoopForever>:

LoopForever:
    b LoopForever
 8000c62:	e7fe      	b.n	8000c62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c64:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c68:	08004948 	.word	0x08004948
	ldr	r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c70:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000c74:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000c78:	200001a4 	.word	0x200001a4

08000c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC1_2_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_Init+0x3c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <HAL_Init+0x3c>)
 8000c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c96:	2003      	movs	r0, #3
 8000c98:	f000 ffae 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f000 f80f 	bl	8000cc0 <HAL_InitTick>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d002      	beq.n	8000cae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	e001      	b.n	8000cb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cae:	f7ff fe55 	bl	800095c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40022000 	.word	0x40022000

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_InitTick+0x6c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d023      	beq.n	8000d1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_InitTick+0x70>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_InitTick+0x6c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 ffb9 	bl	8001c62 <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10f      	bne.n	8000d16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d809      	bhi.n	8000d10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 ff83 	bl	8001c0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_InitTick+0x74>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e007      	b.n	8000d20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	e004      	b.n	8000d20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]
 8000d1a:	e001      	b.n	8000d20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x20>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x24>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <HAL_IncTick+0x24>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000190 	.word	0x20000190

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000190 	.word	0x20000190

08000d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff ffee 	bl	8000d60 <HAL_GetTick>
 8000d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d90:	d005      	beq.n	8000d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_Delay+0x44>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9e:	bf00      	nop
 8000da0:	f7ff ffde 	bl	8000d60 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d8f7      	bhi.n	8000da0 <HAL_Delay+0x28>
  {
  }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e0ed      	b.n	8000fae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff fde0 	bl	80009a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0202 	bic.w	r2, r2, #2
 8000df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df4:	f7ff ffb4 	bl	8000d60 <HAL_GetTick>
 8000df8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dfa:	e012      	b.n	8000e22 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dfc:	f7ff ffb0 	bl	8000d60 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b0a      	cmp	r3, #10
 8000e08:	d90b      	bls.n	8000e22 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2205      	movs	r2, #5
 8000e1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e0c5      	b.n	8000fae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1e5      	bne.n	8000dfc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0201 	orr.w	r2, r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e40:	f7ff ff8e 	bl	8000d60 <HAL_GetTick>
 8000e44:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e46:	e012      	b.n	8000e6e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e48:	f7ff ff8a 	bl	8000d60 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b0a      	cmp	r3, #10
 8000e54:	d90b      	bls.n	8000e6e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2205      	movs	r2, #5
 8000e66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e09f      	b.n	8000fae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0e5      	beq.n	8000e48 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7e1b      	ldrb	r3, [r3, #24]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d108      	bne.n	8000e96 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	e007      	b.n	8000ea6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7e5b      	ldrb	r3, [r3, #25]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d108      	bne.n	8000ec0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e007      	b.n	8000ed0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ece:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7e9b      	ldrb	r3, [r3, #26]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d108      	bne.n	8000eea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0220 	orr.w	r2, r2, #32
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	e007      	b.n	8000efa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 0220 	bic.w	r2, r2, #32
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7edb      	ldrb	r3, [r3, #27]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d108      	bne.n	8000f14 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0210 	bic.w	r2, r2, #16
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e007      	b.n	8000f24 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0210 	orr.w	r2, r2, #16
 8000f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7f1b      	ldrb	r3, [r3, #28]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d108      	bne.n	8000f3e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0208 	orr.w	r2, r2, #8
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	e007      	b.n	8000f4e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0208 	bic.w	r2, r2, #8
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7f5b      	ldrb	r3, [r3, #29]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d108      	bne.n	8000f68 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f042 0204 	orr.w	r2, r2, #4
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e007      	b.n	8000f78 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0204 	bic.w	r2, r2, #4
 8000f76:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	ea42 0103 	orr.w	r1, r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b087      	sub	sp, #28
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fcc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fce:	7cfb      	ldrb	r3, [r7, #19]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d003      	beq.n	8000fdc <HAL_CAN_ConfigFilter+0x26>
 8000fd4:	7cfb      	ldrb	r3, [r7, #19]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	f040 80aa 	bne.w	8001130 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fe2:	f043 0201 	orr.w	r2, r3, #1
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f003 031f 	and.w	r3, r3, #31
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43db      	mvns	r3, r3
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d123      	bne.n	800105e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	401a      	ands	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001038:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3248      	adds	r2, #72	; 0x48
 800103e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001052:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001054:	6979      	ldr	r1, [r7, #20]
 8001056:	3348      	adds	r3, #72	; 0x48
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d122      	bne.n	80010ac <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	431a      	orrs	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001086:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3248      	adds	r2, #72	; 0x48
 800108c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010a2:	6979      	ldr	r1, [r7, #20]
 80010a4:	3348      	adds	r3, #72	; 0x48
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	440b      	add	r3, r1
 80010aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d109      	bne.n	80010c8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010c6:	e007      	b.n	80010d8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	431a      	orrs	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d109      	bne.n	80010f4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010f2:	e007      	b.n	8001104 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d107      	bne.n	800111c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	431a      	orrs	r2, r3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001122:	f023 0201 	bic.w	r2, r3, #1
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	e006      	b.n	800113e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
  }
}
 800113e:	4618      	mov	r0, r3
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d12e      	bne.n	80011bc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2202      	movs	r2, #2
 8001162:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0201 	bic.w	r2, r2, #1
 8001174:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001176:	f7ff fdf3 	bl	8000d60 <HAL_GetTick>
 800117a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800117c:	e012      	b.n	80011a4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800117e:	f7ff fdef 	bl	8000d60 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b0a      	cmp	r3, #10
 800118a:	d90b      	bls.n	80011a4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2205      	movs	r2, #5
 800119c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e012      	b.n	80011ca <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1e5      	bne.n	800117e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e006      	b.n	80011ca <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
  }
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b089      	sub	sp, #36	; 0x24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011f0:	7ffb      	ldrb	r3, [r7, #31]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d003      	beq.n	80011fe <HAL_CAN_AddTxMessage+0x2c>
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	f040 80b8 	bne.w	800136e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10a      	bne.n	800121e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800120e:	2b00      	cmp	r3, #0
 8001210:	d105      	bne.n	800121e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80a0 	beq.w	800135e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	0e1b      	lsrs	r3, r3, #24
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d907      	bls.n	800123e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e09e      	b.n	800137c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800123e:	2201      	movs	r2, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10d      	bne.n	800126c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800125a:	68f9      	ldr	r1, [r7, #12]
 800125c:	6809      	ldr	r1, [r1, #0]
 800125e:	431a      	orrs	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3318      	adds	r3, #24
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	440b      	add	r3, r1
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e00f      	b.n	800128c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001276:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800127c:	68f9      	ldr	r1, [r7, #12]
 800127e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001280:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3318      	adds	r3, #24
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	440b      	add	r3, r1
 800128a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6819      	ldr	r1, [r3, #0]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3318      	adds	r3, #24
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	440b      	add	r3, r1
 800129c:	3304      	adds	r3, #4
 800129e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	7d1b      	ldrb	r3, [r3, #20]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d111      	bne.n	80012cc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3318      	adds	r3, #24
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	4413      	add	r3, r2
 80012b4:	3304      	adds	r3, #4
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	6811      	ldr	r1, [r2, #0]
 80012bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3318      	adds	r3, #24
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	440b      	add	r3, r1
 80012c8:	3304      	adds	r3, #4
 80012ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3307      	adds	r3, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	061a      	lsls	r2, r3, #24
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3306      	adds	r3, #6
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	041b      	lsls	r3, r3, #16
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3305      	adds	r3, #5
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	4313      	orrs	r3, r2
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	3204      	adds	r2, #4
 80012ec:	7812      	ldrb	r2, [r2, #0]
 80012ee:	4610      	mov	r0, r2
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	6811      	ldr	r1, [r2, #0]
 80012f4:	ea43 0200 	orr.w	r2, r3, r0
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	440b      	add	r3, r1
 80012fe:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001302:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3303      	adds	r3, #3
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	061a      	lsls	r2, r3, #24
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3302      	adds	r3, #2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	041b      	lsls	r3, r3, #16
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3301      	adds	r3, #1
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	4313      	orrs	r3, r2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	7812      	ldrb	r2, [r2, #0]
 8001324:	4610      	mov	r0, r2
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	6811      	ldr	r1, [r2, #0]
 800132a:	ea43 0200 	orr.w	r2, r3, r0
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	440b      	add	r3, r1
 8001334:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001338:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3318      	adds	r3, #24
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	4413      	add	r3, r2
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	6811      	ldr	r1, [r2, #0]
 800134c:	f043 0201 	orr.w	r2, r3, #1
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3318      	adds	r3, #24
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	440b      	add	r3, r1
 8001358:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e00e      	b.n	800137c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e006      	b.n	800137c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
  }
}
 800137c:	4618      	mov	r0, r3
 800137e:	3724      	adds	r7, #36	; 0x24
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d003      	beq.n	80013ac <HAL_CAN_GetRxMessage+0x24>
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	f040 80f3 	bne.w	8001592 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10e      	bne.n	80013d0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d116      	bne.n	80013ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e0e7      	b.n	80015a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d107      	bne.n	80013ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e0d8      	b.n	80015a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	331b      	adds	r3, #27
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	4413      	add	r3, r2
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0204 	and.w	r2, r3, #4
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10c      	bne.n	8001426 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	331b      	adds	r3, #27
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	4413      	add	r3, r2
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	0d5b      	lsrs	r3, r3, #21
 800141c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	e00b      	b.n	800143e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	331b      	adds	r3, #27
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	4413      	add	r3, r2
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	331b      	adds	r3, #27
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4413      	add	r3, r2
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0202 	and.w	r2, r3, #2
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	331b      	adds	r3, #27
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4413      	add	r3, r2
 8001460:	3304      	adds	r3, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 020f 	and.w	r2, r3, #15
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	331b      	adds	r3, #27
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	3304      	adds	r3, #4
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	b2da      	uxtb	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	331b      	adds	r3, #27
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	4413      	add	r3, r2
 8001490:	3304      	adds	r3, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	0c1b      	lsrs	r3, r3, #16
 8001496:	b29a      	uxth	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	4413      	add	r3, r2
 80014a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0a1a      	lsrs	r2, r3, #8
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0c1a      	lsrs	r2, r3, #16
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	3302      	adds	r3, #2
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	0e1a      	lsrs	r2, r3, #24
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	3303      	adds	r3, #3
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	4413      	add	r3, r2
 800150a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	3304      	adds	r3, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	4413      	add	r3, r2
 8001522:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0a1a      	lsrs	r2, r3, #8
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	3305      	adds	r3, #5
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4413      	add	r3, r2
 800153c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	0c1a      	lsrs	r2, r3, #16
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	3306      	adds	r3, #6
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	4413      	add	r3, r2
 8001556:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0e1a      	lsrs	r2, r3, #24
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3307      	adds	r3, #7
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d108      	bne.n	800157e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0220 	orr.w	r2, r2, #32
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	e007      	b.n	800158e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0220 	orr.w	r2, r2, #32
 800158c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e006      	b.n	80015a0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
  }
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	371c      	adds	r7, #28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015bc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d002      	beq.n	80015ca <HAL_CAN_ActivateNotification+0x1e>
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d109      	bne.n	80015de <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6959      	ldr	r1, [r3, #20]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e006      	b.n	80015ec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
  }
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d07c      	beq.n	8001738 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d023      	beq.n	8001690 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2201      	movs	r2, #1
 800164e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f983 	bl	8001966 <HAL_CAN_TxMailbox0CompleteCallback>
 8001660:	e016      	b.n	8001690 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d004      	beq.n	8001676 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
 8001674:	e00c      	b.n	8001690 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d004      	beq.n	800168a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	e002      	b.n	8001690 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f989 	bl	80019a2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d024      	beq.n	80016e4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f963 	bl	800197a <HAL_CAN_TxMailbox1CompleteCallback>
 80016b4:	e016      	b.n	80016e4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d004      	beq.n	80016ca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
 80016c8:	e00c      	b.n	80016e4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d004      	beq.n	80016de <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
 80016dc:	e002      	b.n	80016e4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f969 	bl	80019b6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d024      	beq.n	8001738 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f943 	bl	800198e <HAL_CAN_TxMailbox2CompleteCallback>
 8001708:	e016      	b.n	8001738 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	e00c      	b.n	8001738 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d004      	beq.n	8001732 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
 8001730:	e002      	b.n	8001738 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f949 	bl	80019ca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00c      	beq.n	800175c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001752:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2210      	movs	r2, #16
 800175a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2208      	movs	r2, #8
 8001776:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f930 	bl	80019de <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d009      	beq.n	800179c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff f8ba 	bl	8000910 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00c      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2210      	movs	r2, #16
 80017be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	f003 0320 	and.w	r3, r3, #32
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2208      	movs	r2, #8
 80017da:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f912 	bl	8001a06 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d009      	beq.n	8001800 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f8f9 	bl	80019f2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2210      	movs	r2, #16
 800181a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f8fc 	bl	8001a1a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00b      	beq.n	8001844 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2208      	movs	r2, #8
 800183c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f8f5 	bl	8001a2e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d07b      	beq.n	8001946 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d072      	beq.n	800193e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d008      	beq.n	8001874 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800187a:	2b00      	cmp	r3, #0
 800187c:	d008      	beq.n	8001890 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d043      	beq.n	800193e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d03e      	beq.n	800193e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018c6:	2b60      	cmp	r3, #96	; 0x60
 80018c8:	d02b      	beq.n	8001922 <HAL_CAN_IRQHandler+0x32a>
 80018ca:	2b60      	cmp	r3, #96	; 0x60
 80018cc:	d82e      	bhi.n	800192c <HAL_CAN_IRQHandler+0x334>
 80018ce:	2b50      	cmp	r3, #80	; 0x50
 80018d0:	d022      	beq.n	8001918 <HAL_CAN_IRQHandler+0x320>
 80018d2:	2b50      	cmp	r3, #80	; 0x50
 80018d4:	d82a      	bhi.n	800192c <HAL_CAN_IRQHandler+0x334>
 80018d6:	2b40      	cmp	r3, #64	; 0x40
 80018d8:	d019      	beq.n	800190e <HAL_CAN_IRQHandler+0x316>
 80018da:	2b40      	cmp	r3, #64	; 0x40
 80018dc:	d826      	bhi.n	800192c <HAL_CAN_IRQHandler+0x334>
 80018de:	2b30      	cmp	r3, #48	; 0x30
 80018e0:	d010      	beq.n	8001904 <HAL_CAN_IRQHandler+0x30c>
 80018e2:	2b30      	cmp	r3, #48	; 0x30
 80018e4:	d822      	bhi.n	800192c <HAL_CAN_IRQHandler+0x334>
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d002      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x2f8>
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d005      	beq.n	80018fa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018ee:	e01d      	b.n	800192c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	f043 0308 	orr.w	r3, r3, #8
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018f8:	e019      	b.n	800192e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001902:	e014      	b.n	800192e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	f043 0320 	orr.w	r3, r3, #32
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800190c:	e00f      	b.n	800192e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001916:	e00a      	b.n	800192e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001920:	e005      	b.n	800192e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800192a:	e000      	b.n	800192e <HAL_CAN_IRQHandler+0x336>
            break;
 800192c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800193c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2204      	movs	r2, #4
 8001944:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f872 	bl	8001a42 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	; 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4907      	ldr	r1, [pc, #28]	; (8001af4 <__NVIC_EnableIRQ+0x38>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	; (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ff8e 	bl	8001af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff29 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff3e 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff8e 	bl	8001b4c <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5d 	bl	8001af8 <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff31 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffa2 	bl	8001bb4 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8a:	e17f      	b.n	8001f8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2101      	movs	r1, #1
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8171 	beq.w	8001f86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d00b      	beq.n	8001cc4 <HAL_GPIO_Init+0x48>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d007      	beq.n	8001cc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb8:	2b11      	cmp	r3, #17
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b12      	cmp	r3, #18
 8001cc2:	d130      	bne.n	8001d26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 0201 	and.w	r2, r3, #1
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d118      	bne.n	8001d64 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	08db      	lsrs	r3, r3, #3
 8001d4e:	f003 0201 	and.w	r2, r3, #1
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x128>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b12      	cmp	r3, #18
 8001da2:	d123      	bne.n	8001dec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	08da      	lsrs	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3208      	adds	r2, #8
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	08da      	lsrs	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3208      	adds	r2, #8
 8001de6:	6939      	ldr	r1, [r7, #16]
 8001de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0203 	and.w	r2, r3, #3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80ac 	beq.w	8001f86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	4b5f      	ldr	r3, [pc, #380]	; (8001fac <HAL_GPIO_Init+0x330>)
 8001e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e32:	4a5e      	ldr	r2, [pc, #376]	; (8001fac <HAL_GPIO_Init+0x330>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6613      	str	r3, [r2, #96]	; 0x60
 8001e3a:	4b5c      	ldr	r3, [pc, #368]	; (8001fac <HAL_GPIO_Init+0x330>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e46:	4a5a      	ldr	r2, [pc, #360]	; (8001fb0 <HAL_GPIO_Init+0x334>)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e70:	d025      	beq.n	8001ebe <HAL_GPIO_Init+0x242>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4f      	ldr	r2, [pc, #316]	; (8001fb4 <HAL_GPIO_Init+0x338>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01f      	beq.n	8001eba <HAL_GPIO_Init+0x23e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4e      	ldr	r2, [pc, #312]	; (8001fb8 <HAL_GPIO_Init+0x33c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d019      	beq.n	8001eb6 <HAL_GPIO_Init+0x23a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4d      	ldr	r2, [pc, #308]	; (8001fbc <HAL_GPIO_Init+0x340>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_GPIO_Init+0x236>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4c      	ldr	r2, [pc, #304]	; (8001fc0 <HAL_GPIO_Init+0x344>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00d      	beq.n	8001eae <HAL_GPIO_Init+0x232>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4b      	ldr	r2, [pc, #300]	; (8001fc4 <HAL_GPIO_Init+0x348>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0x22e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4a      	ldr	r2, [pc, #296]	; (8001fc8 <HAL_GPIO_Init+0x34c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_GPIO_Init+0x22a>
 8001ea2:	2306      	movs	r3, #6
 8001ea4:	e00c      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	e00a      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001eaa:	2305      	movs	r3, #5
 8001eac:	e008      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001eae:	2304      	movs	r3, #4
 8001eb0:	e006      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e004      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e002      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_GPIO_Init+0x244>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	f002 0203 	and.w	r2, r2, #3
 8001ec6:	0092      	lsls	r2, r2, #2
 8001ec8:	4093      	lsls	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ed0:	4937      	ldr	r1, [pc, #220]	; (8001fb0 <HAL_GPIO_Init+0x334>)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ede:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <HAL_GPIO_Init+0x350>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f02:	4a32      	ldr	r2, [pc, #200]	; (8001fcc <HAL_GPIO_Init+0x350>)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f08:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <HAL_GPIO_Init+0x350>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f2c:	4a27      	ldr	r2, [pc, #156]	; (8001fcc <HAL_GPIO_Init+0x350>)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <HAL_GPIO_Init+0x350>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f56:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <HAL_GPIO_Init+0x350>)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_GPIO_Init+0x350>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f80:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <HAL_GPIO_Init+0x350>)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f47f ae78 	bne.w	8001c8c <HAL_GPIO_Init+0x10>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	48000400 	.word	0x48000400
 8001fb8:	48000800 	.word	0x48000800
 8001fbc:	48000c00 	.word	0x48000c00
 8001fc0:	48001000 	.word	0x48001000
 8001fc4:	48001400 	.word	0x48001400
 8001fc8:	48001800 	.word	0x48001800
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <HAL_PWREx_GetVoltageRange+0x18>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40007000 	.word	0x40007000

0800201c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202a:	d130      	bne.n	800208e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002038:	d038      	beq.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002042:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002048:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2232      	movs	r2, #50	; 0x32
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0c9b      	lsrs	r3, r3, #18
 800205c:	3301      	adds	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002060:	e002      	b.n	8002068 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3b01      	subs	r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002074:	d102      	bne.n	800207c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f2      	bne.n	8002062 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002088:	d110      	bne.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e00f      	b.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209a:	d007      	beq.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020a4:	4a05      	ldr	r2, [pc, #20]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40007000 	.word	0x40007000
 80020c0:	20000000 	.word	0x20000000
 80020c4:	431bde83 	.word	0x431bde83

080020c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e3d4      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020da:	4ba1      	ldr	r3, [pc, #644]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e4:	4b9e      	ldr	r3, [pc, #632]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80e4 	beq.w	80022c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <HAL_RCC_OscConfig+0x4a>
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b0c      	cmp	r3, #12
 8002106:	f040 808b 	bne.w	8002220 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b01      	cmp	r3, #1
 800210e:	f040 8087 	bne.w	8002220 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002112:	4b93      	ldr	r3, [pc, #588]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_RCC_OscConfig+0x62>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e3ac      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1a      	ldr	r2, [r3, #32]
 800212e:	4b8c      	ldr	r3, [pc, #560]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d004      	beq.n	8002144 <HAL_RCC_OscConfig+0x7c>
 800213a:	4b89      	ldr	r3, [pc, #548]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002142:	e005      	b.n	8002150 <HAL_RCC_OscConfig+0x88>
 8002144:	4b86      	ldr	r3, [pc, #536]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002150:	4293      	cmp	r3, r2
 8002152:	d223      	bcs.n	800219c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fd41 	bl	8002be0 <RCC_SetFlashLatencyFromMSIRange>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e38d      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002168:	4b7d      	ldr	r3, [pc, #500]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a7c      	ldr	r2, [pc, #496]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800216e:	f043 0308 	orr.w	r3, r3, #8
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	4b7a      	ldr	r3, [pc, #488]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4977      	ldr	r1, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002186:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	4972      	ldr	r1, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
 800219a:	e025      	b.n	80021e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800219c:	4b70      	ldr	r3, [pc, #448]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a6f      	ldr	r2, [pc, #444]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80021a2:	f043 0308 	orr.w	r3, r3, #8
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b6d      	ldr	r3, [pc, #436]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	496a      	ldr	r1, [pc, #424]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ba:	4b69      	ldr	r3, [pc, #420]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	4965      	ldr	r1, [pc, #404]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fd01 	bl	8002be0 <RCC_SetFlashLatencyFromMSIRange>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e34d      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021e8:	f000 fc36 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b5c      	ldr	r3, [pc, #368]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	495a      	ldr	r1, [pc, #360]	; (8002364 <HAL_RCC_OscConfig+0x29c>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	4a58      	ldr	r2, [pc, #352]	; (8002368 <HAL_RCC_OscConfig+0x2a0>)
 8002206:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002208:	4b58      	ldr	r3, [pc, #352]	; (800236c <HAL_RCC_OscConfig+0x2a4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fd57 	bl	8000cc0 <HAL_InitTick>
 8002212:	4603      	mov	r3, r0
 8002214:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d052      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	e331      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d032      	beq.n	800228e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002228:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a4c      	ldr	r2, [pc, #304]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002234:	f7fe fd94 	bl	8000d60 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223c:	f7fe fd90 	bl	8000d60 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e31a      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800224e:	4b44      	ldr	r3, [pc, #272]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a40      	ldr	r2, [pc, #256]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b3e      	ldr	r3, [pc, #248]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	493b      	ldr	r1, [pc, #236]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002278:	4b39      	ldr	r3, [pc, #228]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	4936      	ldr	r1, [pc, #216]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
 800228c:	e01a      	b.n	80022c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800228e:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a33      	ldr	r2, [pc, #204]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800229a:	f7fe fd61 	bl	8000d60 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022a2:	f7fe fd5d 	bl	8000d60 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e2e7      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x1da>
 80022c0:	e000      	b.n	80022c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d074      	beq.n	80023ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d005      	beq.n	80022e2 <HAL_RCC_OscConfig+0x21a>
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b0c      	cmp	r3, #12
 80022da:	d10e      	bne.n	80022fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d10b      	bne.n	80022fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e2:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d064      	beq.n	80023b8 <HAL_RCC_OscConfig+0x2f0>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d160      	bne.n	80023b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e2c4      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x24a>
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a15      	ldr	r2, [pc, #84]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e01d      	b.n	800234e <HAL_RCC_OscConfig+0x286>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800231a:	d10c      	bne.n	8002336 <HAL_RCC_OscConfig+0x26e>
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800232e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	e00b      	b.n	800234e <HAL_RCC_OscConfig+0x286>
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800233c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a06      	ldr	r2, [pc, #24]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01c      	beq.n	8002390 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fd03 	bl	8000d60 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235c:	e011      	b.n	8002382 <HAL_RCC_OscConfig+0x2ba>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	080048bc 	.word	0x080048bc
 8002368:	20000000 	.word	0x20000000
 800236c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe fcf6 	bl	8000d60 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e280      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002382:	4baf      	ldr	r3, [pc, #700]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x2a8>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fce6 	bl	8000d60 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7fe fce2 	bl	8000d60 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e26c      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023aa:	4ba5      	ldr	r3, [pc, #660]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x2d0>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d060      	beq.n	8002488 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_OscConfig+0x310>
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b0c      	cmp	r3, #12
 80023d0:	d119      	bne.n	8002406 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d116      	bne.n	8002406 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d8:	4b99      	ldr	r3, [pc, #612]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_OscConfig+0x328>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e249      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b93      	ldr	r3, [pc, #588]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	4990      	ldr	r1, [pc, #576]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002404:	e040      	b.n	8002488 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d023      	beq.n	8002456 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240e:	4b8c      	ldr	r3, [pc, #560]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a8b      	ldr	r2, [pc, #556]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe fca1 	bl	8000d60 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7fe fc9d 	bl	8000d60 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e227      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002434:	4b82      	ldr	r3, [pc, #520]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b7f      	ldr	r3, [pc, #508]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	497c      	ldr	r1, [pc, #496]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
 8002454:	e018      	b.n	8002488 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002456:	4b7a      	ldr	r3, [pc, #488]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a79      	ldr	r2, [pc, #484]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 800245c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe fc7d 	bl	8000d60 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246a:	f7fe fc79 	bl	8000d60 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e203      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800247c:	4b70      	ldr	r3, [pc, #448]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d03c      	beq.n	800250e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01c      	beq.n	80024d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249c:	4b68      	ldr	r3, [pc, #416]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a2:	4a67      	ldr	r2, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7fe fc58 	bl	8000d60 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b4:	f7fe fc54 	bl	8000d60 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e1de      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c6:	4b5e      	ldr	r3, [pc, #376]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80024c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ef      	beq.n	80024b4 <HAL_RCC_OscConfig+0x3ec>
 80024d4:	e01b      	b.n	800250e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d6:	4b5a      	ldr	r3, [pc, #360]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80024d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024dc:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80024de:	f023 0301 	bic.w	r3, r3, #1
 80024e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e6:	f7fe fc3b 	bl	8000d60 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ee:	f7fe fc37 	bl	8000d60 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e1c1      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002500:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1ef      	bne.n	80024ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 80a6 	beq.w	8002668 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251c:	2300      	movs	r3, #0
 800251e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002520:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10d      	bne.n	8002548 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252c:	4b44      	ldr	r3, [pc, #272]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	4a43      	ldr	r2, [pc, #268]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002536:	6593      	str	r3, [r2, #88]	; 0x58
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002544:	2301      	movs	r3, #1
 8002546:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002548:	4b3e      	ldr	r3, [pc, #248]	; (8002644 <HAL_RCC_OscConfig+0x57c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d118      	bne.n	8002586 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002554:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_RCC_OscConfig+0x57c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3a      	ldr	r2, [pc, #232]	; (8002644 <HAL_RCC_OscConfig+0x57c>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002560:	f7fe fbfe 	bl	8000d60 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7fe fbfa 	bl	8000d60 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e184      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257a:	4b32      	ldr	r3, [pc, #200]	; (8002644 <HAL_RCC_OscConfig+0x57c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d108      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4d8>
 800258e:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800259e:	e024      	b.n	80025ea <HAL_RCC_OscConfig+0x522>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d110      	bne.n	80025ca <HAL_RCC_OscConfig+0x502>
 80025a8:	4b25      	ldr	r3, [pc, #148]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	4a24      	ldr	r2, [pc, #144]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b8:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	4a20      	ldr	r2, [pc, #128]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025c8:	e00f      	b.n	80025ea <HAL_RCC_OscConfig+0x522>
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d0:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	4a17      	ldr	r2, [pc, #92]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025e2:	f023 0304 	bic.w	r3, r3, #4
 80025e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7fe fbb5 	bl	8000d60 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe fbb1 	bl	8000d60 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	; 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e139      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0ed      	beq.n	80025fa <HAL_RCC_OscConfig+0x532>
 800261e:	e01a      	b.n	8002656 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe fb9e 	bl	8000d60 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002626:	e00f      	b.n	8002648 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fe fb9a 	bl	8000d60 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d906      	bls.n	8002648 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e122      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002648:	4b90      	ldr	r3, [pc, #576]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e8      	bne.n	8002628 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002656:	7ffb      	ldrb	r3, [r7, #31]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d105      	bne.n	8002668 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265c:	4b8b      	ldr	r3, [pc, #556]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	4a8a      	ldr	r2, [pc, #552]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 8002662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002666:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8108 	beq.w	8002882 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	2b02      	cmp	r3, #2
 8002678:	f040 80d0 	bne.w	800281c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800267c:	4b83      	ldr	r3, [pc, #524]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 0203 	and.w	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	429a      	cmp	r2, r3
 800268e:	d130      	bne.n	80026f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	3b01      	subs	r3, #1
 800269c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d127      	bne.n	80026f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d11f      	bne.n	80026f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026bc:	2a07      	cmp	r2, #7
 80026be:	bf14      	ite	ne
 80026c0:	2201      	movne	r2, #1
 80026c2:	2200      	moveq	r2, #0
 80026c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d113      	bne.n	80026f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	3b01      	subs	r3, #1
 80026d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d109      	bne.n	80026f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	3b01      	subs	r3, #1
 80026ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d06e      	beq.n	80027d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b0c      	cmp	r3, #12
 80026f6:	d069      	beq.n	80027cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026f8:	4b64      	ldr	r3, [pc, #400]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002704:	4b61      	ldr	r3, [pc, #388]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b7      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002714:	4b5d      	ldr	r3, [pc, #372]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a5c      	ldr	r2, [pc, #368]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 800271a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800271e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002720:	f7fe fb1e 	bl	8000d60 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fb1a 	bl	8000d60 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e0a4      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273a:	4b54      	ldr	r3, [pc, #336]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002746:	4b51      	ldr	r3, [pc, #324]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	4b51      	ldr	r3, [pc, #324]	; (8002890 <HAL_RCC_OscConfig+0x7c8>)
 800274c:	4013      	ands	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002756:	3a01      	subs	r2, #1
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	4311      	orrs	r1, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002760:	0212      	lsls	r2, r2, #8
 8002762:	4311      	orrs	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002768:	0852      	lsrs	r2, r2, #1
 800276a:	3a01      	subs	r2, #1
 800276c:	0552      	lsls	r2, r2, #21
 800276e:	4311      	orrs	r1, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002774:	0852      	lsrs	r2, r2, #1
 8002776:	3a01      	subs	r2, #1
 8002778:	0652      	lsls	r2, r2, #25
 800277a:	4311      	orrs	r1, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002780:	0912      	lsrs	r2, r2, #4
 8002782:	0452      	lsls	r2, r2, #17
 8002784:	430a      	orrs	r2, r1
 8002786:	4941      	ldr	r1, [pc, #260]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800278c:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a3e      	ldr	r2, [pc, #248]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 8002792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002796:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002798:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4a3b      	ldr	r2, [pc, #236]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 800279e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027a4:	f7fe fadc 	bl	8000d60 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fe fad8 	bl	8000d60 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e062      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027be:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ca:	e05a      	b.n	8002882 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e059      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d0:	4b2e      	ldr	r3, [pc, #184]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d152      	bne.n	8002882 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027dc:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2a      	ldr	r2, [pc, #168]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 80027e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027e8:	4b28      	ldr	r3, [pc, #160]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4a27      	ldr	r2, [pc, #156]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 80027ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027f4:	f7fe fab4 	bl	8000d60 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe fab0 	bl	8000d60 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e03a      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280e:	4b1f      	ldr	r3, [pc, #124]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x734>
 800281a:	e032      	b.n	8002882 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d02d      	beq.n	800287e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002822:	4b1a      	ldr	r3, [pc, #104]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a19      	ldr	r2, [pc, #100]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 8002828:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800282c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d105      	bne.n	8002846 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	4a13      	ldr	r2, [pc, #76]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 8002840:	f023 0303 	bic.w	r3, r3, #3
 8002844:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	4a10      	ldr	r2, [pc, #64]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 800284c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002854:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fa83 	bl	8000d60 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fa7f 	bl	8000d60 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e009      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCC_OscConfig+0x7c4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x796>
 800287c:	e001      	b.n	8002882 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000
 8002890:	f99d808c 	.word	0xf99d808c

08002894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0c8      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a8:	4b66      	ldr	r3, [pc, #408]	; (8002a44 <HAL_RCC_ClockConfig+0x1b0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d910      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <HAL_RCC_ClockConfig+0x1b0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 0207 	bic.w	r2, r3, #7
 80028be:	4961      	ldr	r1, [pc, #388]	; (8002a44 <HAL_RCC_ClockConfig+0x1b0>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b5f      	ldr	r3, [pc, #380]	; (8002a44 <HAL_RCC_ClockConfig+0x1b0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0b0      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d04c      	beq.n	800297e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ec:	4b56      	ldr	r3, [pc, #344]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d121      	bne.n	800293c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e09e      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d107      	bne.n	8002914 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002904:	4b50      	ldr	r3, [pc, #320]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d115      	bne.n	800293c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e092      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d107      	bne.n	800292c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800291c:	4b4a      	ldr	r3, [pc, #296]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e086      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292c:	4b46      	ldr	r3, [pc, #280]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e07e      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800293c:	4b42      	ldr	r3, [pc, #264]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 0203 	bic.w	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	493f      	ldr	r1, [pc, #252]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294e:	f7fe fa07 	bl	8000d60 <HAL_GetTick>
 8002952:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002954:	e00a      	b.n	800296c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002956:	f7fe fa03 	bl	8000d60 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	; 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e066      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296c:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 020c 	and.w	r2, r3, #12
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	429a      	cmp	r2, r3
 800297c:	d1eb      	bne.n	8002956 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d008      	beq.n	800299c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	492c      	ldr	r1, [pc, #176]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800299c:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <HAL_RCC_ClockConfig+0x1b0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d210      	bcs.n	80029cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <HAL_RCC_ClockConfig+0x1b0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 0207 	bic.w	r2, r3, #7
 80029b2:	4924      	ldr	r1, [pc, #144]	; (8002a44 <HAL_RCC_ClockConfig+0x1b0>)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <HAL_RCC_ClockConfig+0x1b0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e036      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4918      	ldr	r1, [pc, #96]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f6:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4910      	ldr	r1, [pc, #64]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a0a:	f000 f825 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <HAL_RCC_ClockConfig+0x1b4>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	490c      	ldr	r1, [pc, #48]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	5ccb      	ldrb	r3, [r1, r3]
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	fa22 f303 	lsr.w	r3, r2, r3
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe f946 	bl	8000cc0 <HAL_InitTick>
 8002a34:	4603      	mov	r3, r0
 8002a36:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a38:	7afb      	ldrb	r3, [r7, #11]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40022000 	.word	0x40022000
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	080048bc 	.word	0x080048bc
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a66:	4b3e      	ldr	r3, [pc, #248]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a70:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0x34>
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d121      	bne.n	8002aca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d11e      	bne.n	8002aca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a8c:	4b34      	ldr	r3, [pc, #208]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a98:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	e005      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002aa8:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ab4:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10d      	bne.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d102      	bne.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ad0:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	e004      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002adc:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ade:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	2b0c      	cmp	r3, #12
 8002ae4:	d134      	bne.n	8002b50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0xa6>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d003      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0xac>
 8002afc:	e005      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002afe:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b00:	617b      	str	r3, [r7, #20]
      break;
 8002b02:	e005      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b06:	617b      	str	r3, [r7, #20]
      break;
 8002b08:	e002      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	617b      	str	r3, [r7, #20]
      break;
 8002b0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b10:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	fb02 f203 	mul.w	r2, r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	0e5b      	lsrs	r3, r3, #25
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	3301      	adds	r3, #1
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b50:	69bb      	ldr	r3, [r7, #24]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3724      	adds	r7, #36	; 0x24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	080048d4 	.word	0x080048d4
 8002b68:	00f42400 	.word	0x00f42400
 8002b6c:	007a1200 	.word	0x007a1200

08002b70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000000 	.word	0x20000000

08002b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b8c:	f7ff fff0 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	4904      	ldr	r1, [pc, #16]	; (8002bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	080048cc 	.word	0x080048cc

08002bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bb8:	f7ff ffda 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	0adb      	lsrs	r3, r3, #11
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4904      	ldr	r1, [pc, #16]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	080048cc 	.word	0x080048cc

08002be0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002be8:	2300      	movs	r3, #0
 8002bea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bec:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bf8:	f7ff fa02 	bl	8002000 <HAL_PWREx_GetVoltageRange>
 8002bfc:	6178      	str	r0, [r7, #20]
 8002bfe:	e014      	b.n	8002c2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c18:	f7ff f9f2 	bl	8002000 <HAL_PWREx_GetVoltageRange>
 8002c1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c30:	d10b      	bne.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d919      	bls.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c3c:	d902      	bls.n	8002c44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c3e:	2302      	movs	r3, #2
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	e013      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c44:	2301      	movs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	e010      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b80      	cmp	r3, #128	; 0x80
 8002c4e:	d902      	bls.n	8002c56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c50:	2303      	movs	r3, #3
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	e00a      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d102      	bne.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	e004      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b70      	cmp	r3, #112	; 0x70
 8002c66:	d101      	bne.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c68:	2301      	movs	r3, #1
 8002c6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 0207 	bic.w	r2, r3, #7
 8002c74:	4909      	ldr	r1, [pc, #36]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d001      	beq.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40022000 	.word	0x40022000

08002ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ca8:	2300      	movs	r3, #0
 8002caa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cac:	2300      	movs	r3, #0
 8002cae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d041      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cc4:	d02a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002cc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cca:	d824      	bhi.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ccc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cd0:	d008      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cd6:	d81e      	bhi.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce0:	d010      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ce2:	e018      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ce4:	4b86      	ldr	r3, [pc, #536]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4a85      	ldr	r2, [pc, #532]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cf0:	e015      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fabb 	bl	8003274 <RCCEx_PLLSAI1_Config>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d02:	e00c      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3320      	adds	r3, #32
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fba6 	bl	800345c <RCCEx_PLLSAI2_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d14:	e003      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	74fb      	strb	r3, [r7, #19]
      break;
 8002d1a:	e000      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d24:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d32:	4973      	ldr	r1, [pc, #460]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d3a:	e001      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3c:	7cfb      	ldrb	r3, [r7, #19]
 8002d3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d041      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d54:	d02a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d5a:	d824      	bhi.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d60:	d008      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d66:	d81e      	bhi.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d70:	d010      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d72:	e018      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d74:	4b62      	ldr	r3, [pc, #392]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a61      	ldr	r2, [pc, #388]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d80:	e015      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fa73 	bl	8003274 <RCCEx_PLLSAI1_Config>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d92:	e00c      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3320      	adds	r3, #32
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fb5e 	bl	800345c <RCCEx_PLLSAI2_Config>
 8002da0:	4603      	mov	r3, r0
 8002da2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002da4:	e003      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	74fb      	strb	r3, [r7, #19]
      break;
 8002daa:	e000      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dae:	7cfb      	ldrb	r3, [r7, #19]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002db4:	4b52      	ldr	r3, [pc, #328]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc2:	494f      	ldr	r1, [pc, #316]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dca:	e001      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80a0 	beq.w	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	4b41      	ldr	r3, [pc, #260]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	4a40      	ldr	r2, [pc, #256]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e02:	6593      	str	r3, [r2, #88]	; 0x58
 8002e04:	4b3e      	ldr	r3, [pc, #248]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e10:	2301      	movs	r3, #1
 8002e12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e14:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a3a      	ldr	r2, [pc, #232]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e20:	f7fd ff9e 	bl	8000d60 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e26:	e009      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e28:	f7fd ff9a 	bl	8000d60 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d902      	bls.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	74fb      	strb	r3, [r7, #19]
        break;
 8002e3a:	e005      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e3c:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ef      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d15c      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e4e:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01f      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d019      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	4a20      	ldr	r2, [pc, #128]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d016      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eaa:	f7fd ff59 	bl	8000d60 <HAL_GetTick>
 8002eae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb0:	e00b      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fd ff55 	bl	8000d60 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d902      	bls.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ec8:	e006      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ec      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ed8:	7cfb      	ldrb	r3, [r7, #19]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eee:	4904      	ldr	r1, [pc, #16]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ef6:	e009      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	74bb      	strb	r3, [r7, #18]
 8002efc:	e006      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f0c:	7c7b      	ldrb	r3, [r7, #17]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d105      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f12:	4b9e      	ldr	r3, [pc, #632]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	4a9d      	ldr	r2, [pc, #628]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f2a:	4b98      	ldr	r3, [pc, #608]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f30:	f023 0203 	bic.w	r2, r3, #3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	4994      	ldr	r1, [pc, #592]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f4c:	4b8f      	ldr	r3, [pc, #572]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	f023 020c 	bic.w	r2, r3, #12
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	498c      	ldr	r1, [pc, #560]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f6e:	4b87      	ldr	r3, [pc, #540]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	4983      	ldr	r1, [pc, #524]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f90:	4b7e      	ldr	r3, [pc, #504]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	497b      	ldr	r1, [pc, #492]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fb2:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc0:	4972      	ldr	r1, [pc, #456]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fd4:	4b6d      	ldr	r3, [pc, #436]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe2:	496a      	ldr	r1, [pc, #424]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ff6:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	4961      	ldr	r1, [pc, #388]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003018:	4b5c      	ldr	r3, [pc, #368]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003026:	4959      	ldr	r1, [pc, #356]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800303a:	4b54      	ldr	r3, [pc, #336]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003040:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003048:	4950      	ldr	r1, [pc, #320]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800305c:	4b4b      	ldr	r3, [pc, #300]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	4948      	ldr	r1, [pc, #288]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800307e:	4b43      	ldr	r3, [pc, #268]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	493f      	ldr	r1, [pc, #252]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d028      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030a0:	4b3a      	ldr	r3, [pc, #232]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ae:	4937      	ldr	r1, [pc, #220]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030be:	d106      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c0:	4b32      	ldr	r3, [pc, #200]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a31      	ldr	r2, [pc, #196]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ca:	60d3      	str	r3, [r2, #12]
 80030cc:	e011      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030d6:	d10c      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	2101      	movs	r1, #1
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f8c8 	bl	8003274 <RCCEx_PLLSAI1_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80030ee:	7cfb      	ldrb	r3, [r7, #19]
 80030f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d028      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310c:	491f      	ldr	r1, [pc, #124]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800311c:	d106      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800311e:	4b1b      	ldr	r3, [pc, #108]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	4a1a      	ldr	r2, [pc, #104]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003128:	60d3      	str	r3, [r2, #12]
 800312a:	e011      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003134:	d10c      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	2101      	movs	r1, #1
 800313c:	4618      	mov	r0, r3
 800313e:	f000 f899 	bl	8003274 <RCCEx_PLLSAI1_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800314c:	7cfb      	ldrb	r3, [r7, #19]
 800314e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d02b      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316a:	4908      	ldr	r1, [pc, #32]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800317a:	d109      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a02      	ldr	r2, [pc, #8]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003186:	60d3      	str	r3, [r2, #12]
 8003188:	e014      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3304      	adds	r3, #4
 800319e:	2101      	movs	r1, #1
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 f867 	bl	8003274 <RCCEx_PLLSAI1_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d02f      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031c0:	4b2b      	ldr	r3, [pc, #172]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ce:	4928      	ldr	r1, [pc, #160]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031de:	d10d      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	2102      	movs	r1, #2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f844 	bl	8003274 <RCCEx_PLLSAI1_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d014      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	74bb      	strb	r3, [r7, #18]
 80031fa:	e011      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003204:	d10c      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3320      	adds	r3, #32
 800320a:	2102      	movs	r1, #2
 800320c:	4618      	mov	r0, r3
 800320e:	f000 f925 	bl	800345c <RCCEx_PLLSAI2_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003216:	7cfb      	ldrb	r3, [r7, #19]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003232:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800323a:	490d      	ldr	r1, [pc, #52]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325e:	4904      	ldr	r1, [pc, #16]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003266:	7cbb      	ldrb	r3, [r7, #18]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000

08003274 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003282:	4b75      	ldr	r3, [pc, #468]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d018      	beq.n	80032c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800328e:	4b72      	ldr	r3, [pc, #456]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0203 	and.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d10d      	bne.n	80032ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
       ||
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032a6:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
       ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d047      	beq.n	800334a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
 80032be:	e044      	b.n	800334a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d018      	beq.n	80032fa <RCCEx_PLLSAI1_Config+0x86>
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d825      	bhi.n	8003318 <RCCEx_PLLSAI1_Config+0xa4>
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d002      	beq.n	80032d6 <RCCEx_PLLSAI1_Config+0x62>
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d009      	beq.n	80032e8 <RCCEx_PLLSAI1_Config+0x74>
 80032d4:	e020      	b.n	8003318 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032d6:	4b60      	ldr	r3, [pc, #384]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d11d      	bne.n	800331e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e6:	e01a      	b.n	800331e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032e8:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d116      	bne.n	8003322 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f8:	e013      	b.n	8003322 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032fa:	4b57      	ldr	r3, [pc, #348]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003306:	4b54      	ldr	r3, [pc, #336]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003316:	e006      	b.n	8003326 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      break;
 800331c:	e004      	b.n	8003328 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800331e:	bf00      	nop
 8003320:	e002      	b.n	8003328 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003322:	bf00      	nop
 8003324:	e000      	b.n	8003328 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003326:	bf00      	nop
    }

    if(status == HAL_OK)
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10d      	bne.n	800334a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800332e:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	3b01      	subs	r3, #1
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	430b      	orrs	r3, r1
 8003344:	4944      	ldr	r1, [pc, #272]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d17d      	bne.n	800344c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003350:	4b41      	ldr	r3, [pc, #260]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a40      	ldr	r2, [pc, #256]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003356:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800335a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800335c:	f7fd fd00 	bl	8000d60 <HAL_GetTick>
 8003360:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003362:	e009      	b.n	8003378 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003364:	f7fd fcfc 	bl	8000d60 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d902      	bls.n	8003378 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	73fb      	strb	r3, [r7, #15]
        break;
 8003376:	e005      	b.n	8003384 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003378:	4b37      	ldr	r3, [pc, #220]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ef      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d160      	bne.n	800344c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003390:	4b31      	ldr	r3, [pc, #196]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6892      	ldr	r2, [r2, #8]
 80033a0:	0211      	lsls	r1, r2, #8
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68d2      	ldr	r2, [r2, #12]
 80033a6:	0912      	lsrs	r2, r2, #4
 80033a8:	0452      	lsls	r2, r2, #17
 80033aa:	430a      	orrs	r2, r1
 80033ac:	492a      	ldr	r1, [pc, #168]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	610b      	str	r3, [r1, #16]
 80033b2:	e027      	b.n	8003404 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d112      	bne.n	80033e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033ba:	4b27      	ldr	r3, [pc, #156]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6892      	ldr	r2, [r2, #8]
 80033ca:	0211      	lsls	r1, r2, #8
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6912      	ldr	r2, [r2, #16]
 80033d0:	0852      	lsrs	r2, r2, #1
 80033d2:	3a01      	subs	r2, #1
 80033d4:	0552      	lsls	r2, r2, #21
 80033d6:	430a      	orrs	r2, r1
 80033d8:	491f      	ldr	r1, [pc, #124]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	610b      	str	r3, [r1, #16]
 80033de:	e011      	b.n	8003404 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6892      	ldr	r2, [r2, #8]
 80033f0:	0211      	lsls	r1, r2, #8
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6952      	ldr	r2, [r2, #20]
 80033f6:	0852      	lsrs	r2, r2, #1
 80033f8:	3a01      	subs	r2, #1
 80033fa:	0652      	lsls	r2, r2, #25
 80033fc:	430a      	orrs	r2, r1
 80033fe:	4916      	ldr	r1, [pc, #88]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003400:	4313      	orrs	r3, r2
 8003402:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003404:	4b14      	ldr	r3, [pc, #80]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a13      	ldr	r2, [pc, #76]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 800340a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800340e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fd fca6 	bl	8000d60 <HAL_GetTick>
 8003414:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003416:	e009      	b.n	800342c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003418:	f7fd fca2 	bl	8000d60 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d902      	bls.n	800342c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	73fb      	strb	r3, [r7, #15]
          break;
 800342a:	e005      	b.n	8003438 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ef      	beq.n	8003418 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	4904      	ldr	r1, [pc, #16]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003448:	4313      	orrs	r3, r2
 800344a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000

0800345c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800346a:	4b6a      	ldr	r3, [pc, #424]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d018      	beq.n	80034a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003476:	4b67      	ldr	r3, [pc, #412]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0203 	and.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d10d      	bne.n	80034a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
       ||
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800348e:	4b61      	ldr	r3, [pc, #388]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
       ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d047      	beq.n	8003532 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	e044      	b.n	8003532 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d018      	beq.n	80034e2 <RCCEx_PLLSAI2_Config+0x86>
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d825      	bhi.n	8003500 <RCCEx_PLLSAI2_Config+0xa4>
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d002      	beq.n	80034be <RCCEx_PLLSAI2_Config+0x62>
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d009      	beq.n	80034d0 <RCCEx_PLLSAI2_Config+0x74>
 80034bc:	e020      	b.n	8003500 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034be:	4b55      	ldr	r3, [pc, #340]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d11d      	bne.n	8003506 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ce:	e01a      	b.n	8003506 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034d0:	4b50      	ldr	r3, [pc, #320]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d116      	bne.n	800350a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e0:	e013      	b.n	800350a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034e2:	4b4c      	ldr	r3, [pc, #304]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ee:	4b49      	ldr	r3, [pc, #292]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034fe:	e006      	b.n	800350e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      break;
 8003504:	e004      	b.n	8003510 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003506:	bf00      	nop
 8003508:	e002      	b.n	8003510 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800350e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10d      	bne.n	8003532 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003516:	4b3f      	ldr	r3, [pc, #252]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	430b      	orrs	r3, r1
 800352c:	4939      	ldr	r1, [pc, #228]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352e:	4313      	orrs	r3, r2
 8003530:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d167      	bne.n	8003608 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003538:	4b36      	ldr	r3, [pc, #216]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a35      	ldr	r2, [pc, #212]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003544:	f7fd fc0c 	bl	8000d60 <HAL_GetTick>
 8003548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800354a:	e009      	b.n	8003560 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800354c:	f7fd fc08 	bl	8000d60 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d902      	bls.n	8003560 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	73fb      	strb	r3, [r7, #15]
        break;
 800355e:	e005      	b.n	800356c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003560:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ef      	bne.n	800354c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d14a      	bne.n	8003608 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d111      	bne.n	800359c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6892      	ldr	r2, [r2, #8]
 8003588:	0211      	lsls	r1, r2, #8
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68d2      	ldr	r2, [r2, #12]
 800358e:	0912      	lsrs	r2, r2, #4
 8003590:	0452      	lsls	r2, r2, #17
 8003592:	430a      	orrs	r2, r1
 8003594:	491f      	ldr	r1, [pc, #124]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003596:	4313      	orrs	r3, r2
 8003598:	614b      	str	r3, [r1, #20]
 800359a:	e011      	b.n	80035c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6892      	ldr	r2, [r2, #8]
 80035ac:	0211      	lsls	r1, r2, #8
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6912      	ldr	r2, [r2, #16]
 80035b2:	0852      	lsrs	r2, r2, #1
 80035b4:	3a01      	subs	r2, #1
 80035b6:	0652      	lsls	r2, r2, #25
 80035b8:	430a      	orrs	r2, r1
 80035ba:	4916      	ldr	r1, [pc, #88]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a13      	ldr	r2, [pc, #76]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fd fbc8 	bl	8000d60 <HAL_GetTick>
 80035d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035d2:	e009      	b.n	80035e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035d4:	f7fd fbc4 	bl	8000d60 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d902      	bls.n	80035e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	73fb      	strb	r3, [r7, #15]
          break;
 80035e6:	e005      	b.n	80035f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0ef      	beq.n	80035d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	4904      	ldr	r1, [pc, #16]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003604:	4313      	orrs	r3, r2
 8003606:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000

08003618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e040      	b.n	80036ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd f9fe 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	; 0x24
 8003644:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8c0 	bl	80037dc <UART_SetConfig>
 800365c:	4603      	mov	r3, r0
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e022      	b.n	80036ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fb3e 	bl	8003cf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fbc5 	bl	8003e34 <UART_CheckIdleState>
 80036aa:	4603      	mov	r3, r0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	f040 8082 	bne.w	80037d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_UART_Transmit+0x26>
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e07a      	b.n	80037d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_UART_Transmit+0x38>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e073      	b.n	80037d4 <HAL_UART_Transmit+0x120>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2221      	movs	r2, #33	; 0x21
 8003700:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003702:	f7fd fb2d 	bl	8000d60 <HAL_GetTick>
 8003706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	88fa      	ldrh	r2, [r7, #6]
 8003714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003720:	d108      	bne.n	8003734 <HAL_UART_Transmit+0x80>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d104      	bne.n	8003734 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	e003      	b.n	800373c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003744:	e02d      	b.n	80037a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2200      	movs	r2, #0
 800374e:	2180      	movs	r1, #128	; 0x80
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 fbb8 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e039      	b.n	80037d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10b      	bne.n	800377e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	881a      	ldrh	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003772:	b292      	uxth	r2, r2
 8003774:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	3302      	adds	r3, #2
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	e008      	b.n	8003790 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	781a      	ldrb	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	b292      	uxth	r2, r2
 8003788:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3301      	adds	r3, #1
 800378e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1cb      	bne.n	8003746 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2200      	movs	r2, #0
 80037b6:	2140      	movs	r1, #64	; 0x40
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fb84 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e005      	b.n	80037d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e000      	b.n	80037d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
  }
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037dc:	b5b0      	push	{r4, r5, r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4bad      	ldr	r3, [pc, #692]	; (8003abc <UART_SetConfig+0x2e0>)
 8003808:	4013      	ands	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	69f9      	ldr	r1, [r7, #28]
 8003810:	430b      	orrs	r3, r1
 8003812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4aa2      	ldr	r2, [pc, #648]	; (8003ac0 <UART_SetConfig+0x2e4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	4313      	orrs	r3, r2
 8003842:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	430a      	orrs	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a99      	ldr	r2, [pc, #612]	; (8003ac4 <UART_SetConfig+0x2e8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d121      	bne.n	80038a6 <UART_SetConfig+0xca>
 8003862:	4b99      	ldr	r3, [pc, #612]	; (8003ac8 <UART_SetConfig+0x2ec>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b03      	cmp	r3, #3
 800386e:	d817      	bhi.n	80038a0 <UART_SetConfig+0xc4>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <UART_SetConfig+0x9c>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	08003889 	.word	0x08003889
 800387c:	08003895 	.word	0x08003895
 8003880:	0800388f 	.word	0x0800388f
 8003884:	0800389b 	.word	0x0800389b
 8003888:	2301      	movs	r3, #1
 800388a:	76fb      	strb	r3, [r7, #27]
 800388c:	e0e7      	b.n	8003a5e <UART_SetConfig+0x282>
 800388e:	2302      	movs	r3, #2
 8003890:	76fb      	strb	r3, [r7, #27]
 8003892:	e0e4      	b.n	8003a5e <UART_SetConfig+0x282>
 8003894:	2304      	movs	r3, #4
 8003896:	76fb      	strb	r3, [r7, #27]
 8003898:	e0e1      	b.n	8003a5e <UART_SetConfig+0x282>
 800389a:	2308      	movs	r3, #8
 800389c:	76fb      	strb	r3, [r7, #27]
 800389e:	e0de      	b.n	8003a5e <UART_SetConfig+0x282>
 80038a0:	2310      	movs	r3, #16
 80038a2:	76fb      	strb	r3, [r7, #27]
 80038a4:	e0db      	b.n	8003a5e <UART_SetConfig+0x282>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a88      	ldr	r2, [pc, #544]	; (8003acc <UART_SetConfig+0x2f0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d132      	bne.n	8003916 <UART_SetConfig+0x13a>
 80038b0:	4b85      	ldr	r3, [pc, #532]	; (8003ac8 <UART_SetConfig+0x2ec>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b0c      	cmp	r3, #12
 80038bc:	d828      	bhi.n	8003910 <UART_SetConfig+0x134>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <UART_SetConfig+0xe8>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	08003911 	.word	0x08003911
 80038cc:	08003911 	.word	0x08003911
 80038d0:	08003911 	.word	0x08003911
 80038d4:	08003905 	.word	0x08003905
 80038d8:	08003911 	.word	0x08003911
 80038dc:	08003911 	.word	0x08003911
 80038e0:	08003911 	.word	0x08003911
 80038e4:	080038ff 	.word	0x080038ff
 80038e8:	08003911 	.word	0x08003911
 80038ec:	08003911 	.word	0x08003911
 80038f0:	08003911 	.word	0x08003911
 80038f4:	0800390b 	.word	0x0800390b
 80038f8:	2300      	movs	r3, #0
 80038fa:	76fb      	strb	r3, [r7, #27]
 80038fc:	e0af      	b.n	8003a5e <UART_SetConfig+0x282>
 80038fe:	2302      	movs	r3, #2
 8003900:	76fb      	strb	r3, [r7, #27]
 8003902:	e0ac      	b.n	8003a5e <UART_SetConfig+0x282>
 8003904:	2304      	movs	r3, #4
 8003906:	76fb      	strb	r3, [r7, #27]
 8003908:	e0a9      	b.n	8003a5e <UART_SetConfig+0x282>
 800390a:	2308      	movs	r3, #8
 800390c:	76fb      	strb	r3, [r7, #27]
 800390e:	e0a6      	b.n	8003a5e <UART_SetConfig+0x282>
 8003910:	2310      	movs	r3, #16
 8003912:	76fb      	strb	r3, [r7, #27]
 8003914:	e0a3      	b.n	8003a5e <UART_SetConfig+0x282>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6d      	ldr	r2, [pc, #436]	; (8003ad0 <UART_SetConfig+0x2f4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d120      	bne.n	8003962 <UART_SetConfig+0x186>
 8003920:	4b69      	ldr	r3, [pc, #420]	; (8003ac8 <UART_SetConfig+0x2ec>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800392a:	2b30      	cmp	r3, #48	; 0x30
 800392c:	d013      	beq.n	8003956 <UART_SetConfig+0x17a>
 800392e:	2b30      	cmp	r3, #48	; 0x30
 8003930:	d814      	bhi.n	800395c <UART_SetConfig+0x180>
 8003932:	2b20      	cmp	r3, #32
 8003934:	d009      	beq.n	800394a <UART_SetConfig+0x16e>
 8003936:	2b20      	cmp	r3, #32
 8003938:	d810      	bhi.n	800395c <UART_SetConfig+0x180>
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <UART_SetConfig+0x168>
 800393e:	2b10      	cmp	r3, #16
 8003940:	d006      	beq.n	8003950 <UART_SetConfig+0x174>
 8003942:	e00b      	b.n	800395c <UART_SetConfig+0x180>
 8003944:	2300      	movs	r3, #0
 8003946:	76fb      	strb	r3, [r7, #27]
 8003948:	e089      	b.n	8003a5e <UART_SetConfig+0x282>
 800394a:	2302      	movs	r3, #2
 800394c:	76fb      	strb	r3, [r7, #27]
 800394e:	e086      	b.n	8003a5e <UART_SetConfig+0x282>
 8003950:	2304      	movs	r3, #4
 8003952:	76fb      	strb	r3, [r7, #27]
 8003954:	e083      	b.n	8003a5e <UART_SetConfig+0x282>
 8003956:	2308      	movs	r3, #8
 8003958:	76fb      	strb	r3, [r7, #27]
 800395a:	e080      	b.n	8003a5e <UART_SetConfig+0x282>
 800395c:	2310      	movs	r3, #16
 800395e:	76fb      	strb	r3, [r7, #27]
 8003960:	e07d      	b.n	8003a5e <UART_SetConfig+0x282>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a5b      	ldr	r2, [pc, #364]	; (8003ad4 <UART_SetConfig+0x2f8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d120      	bne.n	80039ae <UART_SetConfig+0x1d2>
 800396c:	4b56      	ldr	r3, [pc, #344]	; (8003ac8 <UART_SetConfig+0x2ec>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003976:	2bc0      	cmp	r3, #192	; 0xc0
 8003978:	d013      	beq.n	80039a2 <UART_SetConfig+0x1c6>
 800397a:	2bc0      	cmp	r3, #192	; 0xc0
 800397c:	d814      	bhi.n	80039a8 <UART_SetConfig+0x1cc>
 800397e:	2b80      	cmp	r3, #128	; 0x80
 8003980:	d009      	beq.n	8003996 <UART_SetConfig+0x1ba>
 8003982:	2b80      	cmp	r3, #128	; 0x80
 8003984:	d810      	bhi.n	80039a8 <UART_SetConfig+0x1cc>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <UART_SetConfig+0x1b4>
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d006      	beq.n	800399c <UART_SetConfig+0x1c0>
 800398e:	e00b      	b.n	80039a8 <UART_SetConfig+0x1cc>
 8003990:	2300      	movs	r3, #0
 8003992:	76fb      	strb	r3, [r7, #27]
 8003994:	e063      	b.n	8003a5e <UART_SetConfig+0x282>
 8003996:	2302      	movs	r3, #2
 8003998:	76fb      	strb	r3, [r7, #27]
 800399a:	e060      	b.n	8003a5e <UART_SetConfig+0x282>
 800399c:	2304      	movs	r3, #4
 800399e:	76fb      	strb	r3, [r7, #27]
 80039a0:	e05d      	b.n	8003a5e <UART_SetConfig+0x282>
 80039a2:	2308      	movs	r3, #8
 80039a4:	76fb      	strb	r3, [r7, #27]
 80039a6:	e05a      	b.n	8003a5e <UART_SetConfig+0x282>
 80039a8:	2310      	movs	r3, #16
 80039aa:	76fb      	strb	r3, [r7, #27]
 80039ac:	e057      	b.n	8003a5e <UART_SetConfig+0x282>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a49      	ldr	r2, [pc, #292]	; (8003ad8 <UART_SetConfig+0x2fc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d125      	bne.n	8003a04 <UART_SetConfig+0x228>
 80039b8:	4b43      	ldr	r3, [pc, #268]	; (8003ac8 <UART_SetConfig+0x2ec>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039c6:	d017      	beq.n	80039f8 <UART_SetConfig+0x21c>
 80039c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039cc:	d817      	bhi.n	80039fe <UART_SetConfig+0x222>
 80039ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d2:	d00b      	beq.n	80039ec <UART_SetConfig+0x210>
 80039d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d8:	d811      	bhi.n	80039fe <UART_SetConfig+0x222>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <UART_SetConfig+0x20a>
 80039de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e2:	d006      	beq.n	80039f2 <UART_SetConfig+0x216>
 80039e4:	e00b      	b.n	80039fe <UART_SetConfig+0x222>
 80039e6:	2300      	movs	r3, #0
 80039e8:	76fb      	strb	r3, [r7, #27]
 80039ea:	e038      	b.n	8003a5e <UART_SetConfig+0x282>
 80039ec:	2302      	movs	r3, #2
 80039ee:	76fb      	strb	r3, [r7, #27]
 80039f0:	e035      	b.n	8003a5e <UART_SetConfig+0x282>
 80039f2:	2304      	movs	r3, #4
 80039f4:	76fb      	strb	r3, [r7, #27]
 80039f6:	e032      	b.n	8003a5e <UART_SetConfig+0x282>
 80039f8:	2308      	movs	r3, #8
 80039fa:	76fb      	strb	r3, [r7, #27]
 80039fc:	e02f      	b.n	8003a5e <UART_SetConfig+0x282>
 80039fe:	2310      	movs	r3, #16
 8003a00:	76fb      	strb	r3, [r7, #27]
 8003a02:	e02c      	b.n	8003a5e <UART_SetConfig+0x282>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2d      	ldr	r2, [pc, #180]	; (8003ac0 <UART_SetConfig+0x2e4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d125      	bne.n	8003a5a <UART_SetConfig+0x27e>
 8003a0e:	4b2e      	ldr	r3, [pc, #184]	; (8003ac8 <UART_SetConfig+0x2ec>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a1c:	d017      	beq.n	8003a4e <UART_SetConfig+0x272>
 8003a1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a22:	d817      	bhi.n	8003a54 <UART_SetConfig+0x278>
 8003a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a28:	d00b      	beq.n	8003a42 <UART_SetConfig+0x266>
 8003a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2e:	d811      	bhi.n	8003a54 <UART_SetConfig+0x278>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <UART_SetConfig+0x260>
 8003a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a38:	d006      	beq.n	8003a48 <UART_SetConfig+0x26c>
 8003a3a:	e00b      	b.n	8003a54 <UART_SetConfig+0x278>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	76fb      	strb	r3, [r7, #27]
 8003a40:	e00d      	b.n	8003a5e <UART_SetConfig+0x282>
 8003a42:	2302      	movs	r3, #2
 8003a44:	76fb      	strb	r3, [r7, #27]
 8003a46:	e00a      	b.n	8003a5e <UART_SetConfig+0x282>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	76fb      	strb	r3, [r7, #27]
 8003a4c:	e007      	b.n	8003a5e <UART_SetConfig+0x282>
 8003a4e:	2308      	movs	r3, #8
 8003a50:	76fb      	strb	r3, [r7, #27]
 8003a52:	e004      	b.n	8003a5e <UART_SetConfig+0x282>
 8003a54:	2310      	movs	r3, #16
 8003a56:	76fb      	strb	r3, [r7, #27]
 8003a58:	e001      	b.n	8003a5e <UART_SetConfig+0x282>
 8003a5a:	2310      	movs	r3, #16
 8003a5c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a17      	ldr	r2, [pc, #92]	; (8003ac0 <UART_SetConfig+0x2e4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	f040 8087 	bne.w	8003b78 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a6a:	7efb      	ldrb	r3, [r7, #27]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d837      	bhi.n	8003ae0 <UART_SetConfig+0x304>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <UART_SetConfig+0x29c>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003a9d 	.word	0x08003a9d
 8003a7c:	08003ae1 	.word	0x08003ae1
 8003a80:	08003aa5 	.word	0x08003aa5
 8003a84:	08003ae1 	.word	0x08003ae1
 8003a88:	08003aab 	.word	0x08003aab
 8003a8c:	08003ae1 	.word	0x08003ae1
 8003a90:	08003ae1 	.word	0x08003ae1
 8003a94:	08003ae1 	.word	0x08003ae1
 8003a98:	08003ab3 	.word	0x08003ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a9c:	f7ff f874 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 8003aa0:	6178      	str	r0, [r7, #20]
        break;
 8003aa2:	e022      	b.n	8003aea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <UART_SetConfig+0x300>)
 8003aa6:	617b      	str	r3, [r7, #20]
        break;
 8003aa8:	e01f      	b.n	8003aea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aaa:	f7fe ffd5 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8003aae:	6178      	str	r0, [r7, #20]
        break;
 8003ab0:	e01b      	b.n	8003aea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab6:	617b      	str	r3, [r7, #20]
        break;
 8003ab8:	e017      	b.n	8003aea <UART_SetConfig+0x30e>
 8003aba:	bf00      	nop
 8003abc:	efff69f3 	.word	0xefff69f3
 8003ac0:	40008000 	.word	0x40008000
 8003ac4:	40013800 	.word	0x40013800
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	40004400 	.word	0x40004400
 8003ad0:	40004800 	.word	0x40004800
 8003ad4:	40004c00 	.word	0x40004c00
 8003ad8:	40005000 	.word	0x40005000
 8003adc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	76bb      	strb	r3, [r7, #26]
        break;
 8003ae8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80f1 	beq.w	8003cd4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	4413      	add	r3, r2
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d305      	bcc.n	8003b0e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d902      	bls.n	8003b14 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	76bb      	strb	r3, [r7, #26]
 8003b12:	e0df      	b.n	8003cd4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f04f 0100 	mov.w	r1, #0
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	020b      	lsls	r3, r1, #8
 8003b26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b2a:	0202      	lsls	r2, r0, #8
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	6849      	ldr	r1, [r1, #4]
 8003b30:	0849      	lsrs	r1, r1, #1
 8003b32:	4608      	mov	r0, r1
 8003b34:	f04f 0100 	mov.w	r1, #0
 8003b38:	1814      	adds	r4, r2, r0
 8003b3a:	eb43 0501 	adc.w	r5, r3, r1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	4620      	mov	r0, r4
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	f7fc fb90 	bl	8000270 <__aeabi_uldivmod>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4613      	mov	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b5e:	d308      	bcc.n	8003b72 <UART_SetConfig+0x396>
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b66:	d204      	bcs.n	8003b72 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	e0b0      	b.n	8003cd4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	76bb      	strb	r3, [r7, #26]
 8003b76:	e0ad      	b.n	8003cd4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b80:	d15c      	bne.n	8003c3c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003b82:	7efb      	ldrb	r3, [r7, #27]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d828      	bhi.n	8003bda <UART_SetConfig+0x3fe>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <UART_SetConfig+0x3b4>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003bb5 	.word	0x08003bb5
 8003b94:	08003bbd 	.word	0x08003bbd
 8003b98:	08003bc5 	.word	0x08003bc5
 8003b9c:	08003bdb 	.word	0x08003bdb
 8003ba0:	08003bcb 	.word	0x08003bcb
 8003ba4:	08003bdb 	.word	0x08003bdb
 8003ba8:	08003bdb 	.word	0x08003bdb
 8003bac:	08003bdb 	.word	0x08003bdb
 8003bb0:	08003bd3 	.word	0x08003bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f7fe ffe8 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 8003bb8:	6178      	str	r0, [r7, #20]
        break;
 8003bba:	e013      	b.n	8003be4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bbc:	f7fe fffa 	bl	8002bb4 <HAL_RCC_GetPCLK2Freq>
 8003bc0:	6178      	str	r0, [r7, #20]
        break;
 8003bc2:	e00f      	b.n	8003be4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc4:	4b49      	ldr	r3, [pc, #292]	; (8003cec <UART_SetConfig+0x510>)
 8003bc6:	617b      	str	r3, [r7, #20]
        break;
 8003bc8:	e00c      	b.n	8003be4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bca:	f7fe ff45 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8003bce:	6178      	str	r0, [r7, #20]
        break;
 8003bd0:	e008      	b.n	8003be4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd6:	617b      	str	r3, [r7, #20]
        break;
 8003bd8:	e004      	b.n	8003be4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	76bb      	strb	r3, [r7, #26]
        break;
 8003be2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d074      	beq.n	8003cd4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	005a      	lsls	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	085b      	lsrs	r3, r3, #1
 8003bf4:	441a      	add	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b0f      	cmp	r3, #15
 8003c06:	d916      	bls.n	8003c36 <UART_SetConfig+0x45a>
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0e:	d212      	bcs.n	8003c36 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f023 030f 	bic.w	r3, r3, #15
 8003c18:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	89fb      	ldrh	r3, [r7, #14]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	89fa      	ldrh	r2, [r7, #14]
 8003c32:	60da      	str	r2, [r3, #12]
 8003c34:	e04e      	b.n	8003cd4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	76bb      	strb	r3, [r7, #26]
 8003c3a:	e04b      	b.n	8003cd4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c3c:	7efb      	ldrb	r3, [r7, #27]
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d827      	bhi.n	8003c92 <UART_SetConfig+0x4b6>
 8003c42:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <UART_SetConfig+0x46c>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003c6d 	.word	0x08003c6d
 8003c4c:	08003c75 	.word	0x08003c75
 8003c50:	08003c7d 	.word	0x08003c7d
 8003c54:	08003c93 	.word	0x08003c93
 8003c58:	08003c83 	.word	0x08003c83
 8003c5c:	08003c93 	.word	0x08003c93
 8003c60:	08003c93 	.word	0x08003c93
 8003c64:	08003c93 	.word	0x08003c93
 8003c68:	08003c8b 	.word	0x08003c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c6c:	f7fe ff8c 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 8003c70:	6178      	str	r0, [r7, #20]
        break;
 8003c72:	e013      	b.n	8003c9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c74:	f7fe ff9e 	bl	8002bb4 <HAL_RCC_GetPCLK2Freq>
 8003c78:	6178      	str	r0, [r7, #20]
        break;
 8003c7a:	e00f      	b.n	8003c9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <UART_SetConfig+0x510>)
 8003c7e:	617b      	str	r3, [r7, #20]
        break;
 8003c80:	e00c      	b.n	8003c9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c82:	f7fe fee9 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8003c86:	6178      	str	r0, [r7, #20]
        break;
 8003c88:	e008      	b.n	8003c9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c8e:	617b      	str	r3, [r7, #20]
        break;
 8003c90:	e004      	b.n	8003c9c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	76bb      	strb	r3, [r7, #26]
        break;
 8003c9a:	bf00      	nop
    }

    if (pclk != 0U)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d018      	beq.n	8003cd4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	085a      	lsrs	r2, r3, #1
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	441a      	add	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b0f      	cmp	r3, #15
 8003cbc:	d908      	bls.n	8003cd0 <UART_SetConfig+0x4f4>
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc4:	d204      	bcs.n	8003cd0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	60da      	str	r2, [r3, #12]
 8003cce:	e001      	b.n	8003cd4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ce0:	7ebb      	ldrb	r3, [r7, #26]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8003cea:	bf00      	nop
 8003cec:	00f42400 	.word	0x00f42400

08003cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01a      	beq.n	8003e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dee:	d10a      	bne.n	8003e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	605a      	str	r2, [r3, #4]
  }
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e44:	f7fc ff8c 	bl	8000d60 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d10e      	bne.n	8003e76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f82d 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e023      	b.n	8003ebe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d10e      	bne.n	8003ea2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f817 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e00d      	b.n	8003ebe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed6:	e05e      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d05a      	beq.n	8003f96 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee0:	f7fc ff3e 	bl	8000d60 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d302      	bcc.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d11b      	bne.n	8003f2e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f04:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e043      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02c      	beq.n	8003f96 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4a:	d124      	bne.n	8003f96 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f54:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f64:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e00f      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	bf0c      	ite	eq
 8003fa6:	2301      	moveq	r3, #1
 8003fa8:	2300      	movne	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d091      	beq.n	8003ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <__errno>:
 8003fc0:	4b01      	ldr	r3, [pc, #4]	; (8003fc8 <__errno+0x8>)
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	2000000c 	.word	0x2000000c

08003fcc <__libc_init_array>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	4d0d      	ldr	r5, [pc, #52]	; (8004004 <__libc_init_array+0x38>)
 8003fd0:	4c0d      	ldr	r4, [pc, #52]	; (8004008 <__libc_init_array+0x3c>)
 8003fd2:	1b64      	subs	r4, r4, r5
 8003fd4:	10a4      	asrs	r4, r4, #2
 8003fd6:	2600      	movs	r6, #0
 8003fd8:	42a6      	cmp	r6, r4
 8003fda:	d109      	bne.n	8003ff0 <__libc_init_array+0x24>
 8003fdc:	4d0b      	ldr	r5, [pc, #44]	; (800400c <__libc_init_array+0x40>)
 8003fde:	4c0c      	ldr	r4, [pc, #48]	; (8004010 <__libc_init_array+0x44>)
 8003fe0:	f000 fc4e 	bl	8004880 <_init>
 8003fe4:	1b64      	subs	r4, r4, r5
 8003fe6:	10a4      	asrs	r4, r4, #2
 8003fe8:	2600      	movs	r6, #0
 8003fea:	42a6      	cmp	r6, r4
 8003fec:	d105      	bne.n	8003ffa <__libc_init_array+0x2e>
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff4:	4798      	blx	r3
 8003ff6:	3601      	adds	r6, #1
 8003ff8:	e7ee      	b.n	8003fd8 <__libc_init_array+0xc>
 8003ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffe:	4798      	blx	r3
 8004000:	3601      	adds	r6, #1
 8004002:	e7f2      	b.n	8003fea <__libc_init_array+0x1e>
 8004004:	08004940 	.word	0x08004940
 8004008:	08004940 	.word	0x08004940
 800400c:	08004940 	.word	0x08004940
 8004010:	08004944 	.word	0x08004944

08004014 <memset>:
 8004014:	4402      	add	r2, r0
 8004016:	4603      	mov	r3, r0
 8004018:	4293      	cmp	r3, r2
 800401a:	d100      	bne.n	800401e <memset+0xa>
 800401c:	4770      	bx	lr
 800401e:	f803 1b01 	strb.w	r1, [r3], #1
 8004022:	e7f9      	b.n	8004018 <memset+0x4>

08004024 <siprintf>:
 8004024:	b40e      	push	{r1, r2, r3}
 8004026:	b500      	push	{lr}
 8004028:	b09c      	sub	sp, #112	; 0x70
 800402a:	ab1d      	add	r3, sp, #116	; 0x74
 800402c:	9002      	str	r0, [sp, #8]
 800402e:	9006      	str	r0, [sp, #24]
 8004030:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004034:	4809      	ldr	r0, [pc, #36]	; (800405c <siprintf+0x38>)
 8004036:	9107      	str	r1, [sp, #28]
 8004038:	9104      	str	r1, [sp, #16]
 800403a:	4909      	ldr	r1, [pc, #36]	; (8004060 <siprintf+0x3c>)
 800403c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004040:	9105      	str	r1, [sp, #20]
 8004042:	6800      	ldr	r0, [r0, #0]
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	a902      	add	r1, sp, #8
 8004048:	f000 f868 	bl	800411c <_svfiprintf_r>
 800404c:	9b02      	ldr	r3, [sp, #8]
 800404e:	2200      	movs	r2, #0
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	b01c      	add	sp, #112	; 0x70
 8004054:	f85d eb04 	ldr.w	lr, [sp], #4
 8004058:	b003      	add	sp, #12
 800405a:	4770      	bx	lr
 800405c:	2000000c 	.word	0x2000000c
 8004060:	ffff0208 	.word	0xffff0208

08004064 <__ssputs_r>:
 8004064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	688e      	ldr	r6, [r1, #8]
 800406a:	429e      	cmp	r6, r3
 800406c:	4682      	mov	sl, r0
 800406e:	460c      	mov	r4, r1
 8004070:	4690      	mov	r8, r2
 8004072:	461f      	mov	r7, r3
 8004074:	d838      	bhi.n	80040e8 <__ssputs_r+0x84>
 8004076:	898a      	ldrh	r2, [r1, #12]
 8004078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800407c:	d032      	beq.n	80040e4 <__ssputs_r+0x80>
 800407e:	6825      	ldr	r5, [r4, #0]
 8004080:	6909      	ldr	r1, [r1, #16]
 8004082:	eba5 0901 	sub.w	r9, r5, r1
 8004086:	6965      	ldr	r5, [r4, #20]
 8004088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800408c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004090:	3301      	adds	r3, #1
 8004092:	444b      	add	r3, r9
 8004094:	106d      	asrs	r5, r5, #1
 8004096:	429d      	cmp	r5, r3
 8004098:	bf38      	it	cc
 800409a:	461d      	movcc	r5, r3
 800409c:	0553      	lsls	r3, r2, #21
 800409e:	d531      	bpl.n	8004104 <__ssputs_r+0xa0>
 80040a0:	4629      	mov	r1, r5
 80040a2:	f000 fb47 	bl	8004734 <_malloc_r>
 80040a6:	4606      	mov	r6, r0
 80040a8:	b950      	cbnz	r0, 80040c0 <__ssputs_r+0x5c>
 80040aa:	230c      	movs	r3, #12
 80040ac:	f8ca 3000 	str.w	r3, [sl]
 80040b0:	89a3      	ldrh	r3, [r4, #12]
 80040b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b6:	81a3      	strh	r3, [r4, #12]
 80040b8:	f04f 30ff 	mov.w	r0, #4294967295
 80040bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c0:	6921      	ldr	r1, [r4, #16]
 80040c2:	464a      	mov	r2, r9
 80040c4:	f000 fabe 	bl	8004644 <memcpy>
 80040c8:	89a3      	ldrh	r3, [r4, #12]
 80040ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d2:	81a3      	strh	r3, [r4, #12]
 80040d4:	6126      	str	r6, [r4, #16]
 80040d6:	6165      	str	r5, [r4, #20]
 80040d8:	444e      	add	r6, r9
 80040da:	eba5 0509 	sub.w	r5, r5, r9
 80040de:	6026      	str	r6, [r4, #0]
 80040e0:	60a5      	str	r5, [r4, #8]
 80040e2:	463e      	mov	r6, r7
 80040e4:	42be      	cmp	r6, r7
 80040e6:	d900      	bls.n	80040ea <__ssputs_r+0x86>
 80040e8:	463e      	mov	r6, r7
 80040ea:	4632      	mov	r2, r6
 80040ec:	6820      	ldr	r0, [r4, #0]
 80040ee:	4641      	mov	r1, r8
 80040f0:	f000 fab6 	bl	8004660 <memmove>
 80040f4:	68a3      	ldr	r3, [r4, #8]
 80040f6:	6822      	ldr	r2, [r4, #0]
 80040f8:	1b9b      	subs	r3, r3, r6
 80040fa:	4432      	add	r2, r6
 80040fc:	60a3      	str	r3, [r4, #8]
 80040fe:	6022      	str	r2, [r4, #0]
 8004100:	2000      	movs	r0, #0
 8004102:	e7db      	b.n	80040bc <__ssputs_r+0x58>
 8004104:	462a      	mov	r2, r5
 8004106:	f000 fb6f 	bl	80047e8 <_realloc_r>
 800410a:	4606      	mov	r6, r0
 800410c:	2800      	cmp	r0, #0
 800410e:	d1e1      	bne.n	80040d4 <__ssputs_r+0x70>
 8004110:	6921      	ldr	r1, [r4, #16]
 8004112:	4650      	mov	r0, sl
 8004114:	f000 fabe 	bl	8004694 <_free_r>
 8004118:	e7c7      	b.n	80040aa <__ssputs_r+0x46>
	...

0800411c <_svfiprintf_r>:
 800411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004120:	4698      	mov	r8, r3
 8004122:	898b      	ldrh	r3, [r1, #12]
 8004124:	061b      	lsls	r3, r3, #24
 8004126:	b09d      	sub	sp, #116	; 0x74
 8004128:	4607      	mov	r7, r0
 800412a:	460d      	mov	r5, r1
 800412c:	4614      	mov	r4, r2
 800412e:	d50e      	bpl.n	800414e <_svfiprintf_r+0x32>
 8004130:	690b      	ldr	r3, [r1, #16]
 8004132:	b963      	cbnz	r3, 800414e <_svfiprintf_r+0x32>
 8004134:	2140      	movs	r1, #64	; 0x40
 8004136:	f000 fafd 	bl	8004734 <_malloc_r>
 800413a:	6028      	str	r0, [r5, #0]
 800413c:	6128      	str	r0, [r5, #16]
 800413e:	b920      	cbnz	r0, 800414a <_svfiprintf_r+0x2e>
 8004140:	230c      	movs	r3, #12
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	f04f 30ff 	mov.w	r0, #4294967295
 8004148:	e0d1      	b.n	80042ee <_svfiprintf_r+0x1d2>
 800414a:	2340      	movs	r3, #64	; 0x40
 800414c:	616b      	str	r3, [r5, #20]
 800414e:	2300      	movs	r3, #0
 8004150:	9309      	str	r3, [sp, #36]	; 0x24
 8004152:	2320      	movs	r3, #32
 8004154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004158:	f8cd 800c 	str.w	r8, [sp, #12]
 800415c:	2330      	movs	r3, #48	; 0x30
 800415e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004308 <_svfiprintf_r+0x1ec>
 8004162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004166:	f04f 0901 	mov.w	r9, #1
 800416a:	4623      	mov	r3, r4
 800416c:	469a      	mov	sl, r3
 800416e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004172:	b10a      	cbz	r2, 8004178 <_svfiprintf_r+0x5c>
 8004174:	2a25      	cmp	r2, #37	; 0x25
 8004176:	d1f9      	bne.n	800416c <_svfiprintf_r+0x50>
 8004178:	ebba 0b04 	subs.w	fp, sl, r4
 800417c:	d00b      	beq.n	8004196 <_svfiprintf_r+0x7a>
 800417e:	465b      	mov	r3, fp
 8004180:	4622      	mov	r2, r4
 8004182:	4629      	mov	r1, r5
 8004184:	4638      	mov	r0, r7
 8004186:	f7ff ff6d 	bl	8004064 <__ssputs_r>
 800418a:	3001      	adds	r0, #1
 800418c:	f000 80aa 	beq.w	80042e4 <_svfiprintf_r+0x1c8>
 8004190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004192:	445a      	add	r2, fp
 8004194:	9209      	str	r2, [sp, #36]	; 0x24
 8004196:	f89a 3000 	ldrb.w	r3, [sl]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 80a2 	beq.w	80042e4 <_svfiprintf_r+0x1c8>
 80041a0:	2300      	movs	r3, #0
 80041a2:	f04f 32ff 	mov.w	r2, #4294967295
 80041a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041aa:	f10a 0a01 	add.w	sl, sl, #1
 80041ae:	9304      	str	r3, [sp, #16]
 80041b0:	9307      	str	r3, [sp, #28]
 80041b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041b6:	931a      	str	r3, [sp, #104]	; 0x68
 80041b8:	4654      	mov	r4, sl
 80041ba:	2205      	movs	r2, #5
 80041bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c0:	4851      	ldr	r0, [pc, #324]	; (8004308 <_svfiprintf_r+0x1ec>)
 80041c2:	f7fc f805 	bl	80001d0 <memchr>
 80041c6:	9a04      	ldr	r2, [sp, #16]
 80041c8:	b9d8      	cbnz	r0, 8004202 <_svfiprintf_r+0xe6>
 80041ca:	06d0      	lsls	r0, r2, #27
 80041cc:	bf44      	itt	mi
 80041ce:	2320      	movmi	r3, #32
 80041d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041d4:	0711      	lsls	r1, r2, #28
 80041d6:	bf44      	itt	mi
 80041d8:	232b      	movmi	r3, #43	; 0x2b
 80041da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041de:	f89a 3000 	ldrb.w	r3, [sl]
 80041e2:	2b2a      	cmp	r3, #42	; 0x2a
 80041e4:	d015      	beq.n	8004212 <_svfiprintf_r+0xf6>
 80041e6:	9a07      	ldr	r2, [sp, #28]
 80041e8:	4654      	mov	r4, sl
 80041ea:	2000      	movs	r0, #0
 80041ec:	f04f 0c0a 	mov.w	ip, #10
 80041f0:	4621      	mov	r1, r4
 80041f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041f6:	3b30      	subs	r3, #48	; 0x30
 80041f8:	2b09      	cmp	r3, #9
 80041fa:	d94e      	bls.n	800429a <_svfiprintf_r+0x17e>
 80041fc:	b1b0      	cbz	r0, 800422c <_svfiprintf_r+0x110>
 80041fe:	9207      	str	r2, [sp, #28]
 8004200:	e014      	b.n	800422c <_svfiprintf_r+0x110>
 8004202:	eba0 0308 	sub.w	r3, r0, r8
 8004206:	fa09 f303 	lsl.w	r3, r9, r3
 800420a:	4313      	orrs	r3, r2
 800420c:	9304      	str	r3, [sp, #16]
 800420e:	46a2      	mov	sl, r4
 8004210:	e7d2      	b.n	80041b8 <_svfiprintf_r+0x9c>
 8004212:	9b03      	ldr	r3, [sp, #12]
 8004214:	1d19      	adds	r1, r3, #4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	9103      	str	r1, [sp, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	bfbb      	ittet	lt
 800421e:	425b      	neglt	r3, r3
 8004220:	f042 0202 	orrlt.w	r2, r2, #2
 8004224:	9307      	strge	r3, [sp, #28]
 8004226:	9307      	strlt	r3, [sp, #28]
 8004228:	bfb8      	it	lt
 800422a:	9204      	strlt	r2, [sp, #16]
 800422c:	7823      	ldrb	r3, [r4, #0]
 800422e:	2b2e      	cmp	r3, #46	; 0x2e
 8004230:	d10c      	bne.n	800424c <_svfiprintf_r+0x130>
 8004232:	7863      	ldrb	r3, [r4, #1]
 8004234:	2b2a      	cmp	r3, #42	; 0x2a
 8004236:	d135      	bne.n	80042a4 <_svfiprintf_r+0x188>
 8004238:	9b03      	ldr	r3, [sp, #12]
 800423a:	1d1a      	adds	r2, r3, #4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	9203      	str	r2, [sp, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	bfb8      	it	lt
 8004244:	f04f 33ff 	movlt.w	r3, #4294967295
 8004248:	3402      	adds	r4, #2
 800424a:	9305      	str	r3, [sp, #20]
 800424c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004318 <_svfiprintf_r+0x1fc>
 8004250:	7821      	ldrb	r1, [r4, #0]
 8004252:	2203      	movs	r2, #3
 8004254:	4650      	mov	r0, sl
 8004256:	f7fb ffbb 	bl	80001d0 <memchr>
 800425a:	b140      	cbz	r0, 800426e <_svfiprintf_r+0x152>
 800425c:	2340      	movs	r3, #64	; 0x40
 800425e:	eba0 000a 	sub.w	r0, r0, sl
 8004262:	fa03 f000 	lsl.w	r0, r3, r0
 8004266:	9b04      	ldr	r3, [sp, #16]
 8004268:	4303      	orrs	r3, r0
 800426a:	3401      	adds	r4, #1
 800426c:	9304      	str	r3, [sp, #16]
 800426e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004272:	4826      	ldr	r0, [pc, #152]	; (800430c <_svfiprintf_r+0x1f0>)
 8004274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004278:	2206      	movs	r2, #6
 800427a:	f7fb ffa9 	bl	80001d0 <memchr>
 800427e:	2800      	cmp	r0, #0
 8004280:	d038      	beq.n	80042f4 <_svfiprintf_r+0x1d8>
 8004282:	4b23      	ldr	r3, [pc, #140]	; (8004310 <_svfiprintf_r+0x1f4>)
 8004284:	bb1b      	cbnz	r3, 80042ce <_svfiprintf_r+0x1b2>
 8004286:	9b03      	ldr	r3, [sp, #12]
 8004288:	3307      	adds	r3, #7
 800428a:	f023 0307 	bic.w	r3, r3, #7
 800428e:	3308      	adds	r3, #8
 8004290:	9303      	str	r3, [sp, #12]
 8004292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004294:	4433      	add	r3, r6
 8004296:	9309      	str	r3, [sp, #36]	; 0x24
 8004298:	e767      	b.n	800416a <_svfiprintf_r+0x4e>
 800429a:	fb0c 3202 	mla	r2, ip, r2, r3
 800429e:	460c      	mov	r4, r1
 80042a0:	2001      	movs	r0, #1
 80042a2:	e7a5      	b.n	80041f0 <_svfiprintf_r+0xd4>
 80042a4:	2300      	movs	r3, #0
 80042a6:	3401      	adds	r4, #1
 80042a8:	9305      	str	r3, [sp, #20]
 80042aa:	4619      	mov	r1, r3
 80042ac:	f04f 0c0a 	mov.w	ip, #10
 80042b0:	4620      	mov	r0, r4
 80042b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042b6:	3a30      	subs	r2, #48	; 0x30
 80042b8:	2a09      	cmp	r2, #9
 80042ba:	d903      	bls.n	80042c4 <_svfiprintf_r+0x1a8>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0c5      	beq.n	800424c <_svfiprintf_r+0x130>
 80042c0:	9105      	str	r1, [sp, #20]
 80042c2:	e7c3      	b.n	800424c <_svfiprintf_r+0x130>
 80042c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80042c8:	4604      	mov	r4, r0
 80042ca:	2301      	movs	r3, #1
 80042cc:	e7f0      	b.n	80042b0 <_svfiprintf_r+0x194>
 80042ce:	ab03      	add	r3, sp, #12
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	462a      	mov	r2, r5
 80042d4:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <_svfiprintf_r+0x1f8>)
 80042d6:	a904      	add	r1, sp, #16
 80042d8:	4638      	mov	r0, r7
 80042da:	f3af 8000 	nop.w
 80042de:	1c42      	adds	r2, r0, #1
 80042e0:	4606      	mov	r6, r0
 80042e2:	d1d6      	bne.n	8004292 <_svfiprintf_r+0x176>
 80042e4:	89ab      	ldrh	r3, [r5, #12]
 80042e6:	065b      	lsls	r3, r3, #25
 80042e8:	f53f af2c 	bmi.w	8004144 <_svfiprintf_r+0x28>
 80042ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042ee:	b01d      	add	sp, #116	; 0x74
 80042f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f4:	ab03      	add	r3, sp, #12
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	462a      	mov	r2, r5
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <_svfiprintf_r+0x1f8>)
 80042fc:	a904      	add	r1, sp, #16
 80042fe:	4638      	mov	r0, r7
 8004300:	f000 f87a 	bl	80043f8 <_printf_i>
 8004304:	e7eb      	b.n	80042de <_svfiprintf_r+0x1c2>
 8004306:	bf00      	nop
 8004308:	08004904 	.word	0x08004904
 800430c:	0800490e 	.word	0x0800490e
 8004310:	00000000 	.word	0x00000000
 8004314:	08004065 	.word	0x08004065
 8004318:	0800490a 	.word	0x0800490a

0800431c <_printf_common>:
 800431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004320:	4616      	mov	r6, r2
 8004322:	4699      	mov	r9, r3
 8004324:	688a      	ldr	r2, [r1, #8]
 8004326:	690b      	ldr	r3, [r1, #16]
 8004328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800432c:	4293      	cmp	r3, r2
 800432e:	bfb8      	it	lt
 8004330:	4613      	movlt	r3, r2
 8004332:	6033      	str	r3, [r6, #0]
 8004334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004338:	4607      	mov	r7, r0
 800433a:	460c      	mov	r4, r1
 800433c:	b10a      	cbz	r2, 8004342 <_printf_common+0x26>
 800433e:	3301      	adds	r3, #1
 8004340:	6033      	str	r3, [r6, #0]
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	0699      	lsls	r1, r3, #26
 8004346:	bf42      	ittt	mi
 8004348:	6833      	ldrmi	r3, [r6, #0]
 800434a:	3302      	addmi	r3, #2
 800434c:	6033      	strmi	r3, [r6, #0]
 800434e:	6825      	ldr	r5, [r4, #0]
 8004350:	f015 0506 	ands.w	r5, r5, #6
 8004354:	d106      	bne.n	8004364 <_printf_common+0x48>
 8004356:	f104 0a19 	add.w	sl, r4, #25
 800435a:	68e3      	ldr	r3, [r4, #12]
 800435c:	6832      	ldr	r2, [r6, #0]
 800435e:	1a9b      	subs	r3, r3, r2
 8004360:	42ab      	cmp	r3, r5
 8004362:	dc26      	bgt.n	80043b2 <_printf_common+0x96>
 8004364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004368:	1e13      	subs	r3, r2, #0
 800436a:	6822      	ldr	r2, [r4, #0]
 800436c:	bf18      	it	ne
 800436e:	2301      	movne	r3, #1
 8004370:	0692      	lsls	r2, r2, #26
 8004372:	d42b      	bmi.n	80043cc <_printf_common+0xb0>
 8004374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004378:	4649      	mov	r1, r9
 800437a:	4638      	mov	r0, r7
 800437c:	47c0      	blx	r8
 800437e:	3001      	adds	r0, #1
 8004380:	d01e      	beq.n	80043c0 <_printf_common+0xa4>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	68e5      	ldr	r5, [r4, #12]
 8004386:	6832      	ldr	r2, [r6, #0]
 8004388:	f003 0306 	and.w	r3, r3, #6
 800438c:	2b04      	cmp	r3, #4
 800438e:	bf08      	it	eq
 8004390:	1aad      	subeq	r5, r5, r2
 8004392:	68a3      	ldr	r3, [r4, #8]
 8004394:	6922      	ldr	r2, [r4, #16]
 8004396:	bf0c      	ite	eq
 8004398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800439c:	2500      	movne	r5, #0
 800439e:	4293      	cmp	r3, r2
 80043a0:	bfc4      	itt	gt
 80043a2:	1a9b      	subgt	r3, r3, r2
 80043a4:	18ed      	addgt	r5, r5, r3
 80043a6:	2600      	movs	r6, #0
 80043a8:	341a      	adds	r4, #26
 80043aa:	42b5      	cmp	r5, r6
 80043ac:	d11a      	bne.n	80043e4 <_printf_common+0xc8>
 80043ae:	2000      	movs	r0, #0
 80043b0:	e008      	b.n	80043c4 <_printf_common+0xa8>
 80043b2:	2301      	movs	r3, #1
 80043b4:	4652      	mov	r2, sl
 80043b6:	4649      	mov	r1, r9
 80043b8:	4638      	mov	r0, r7
 80043ba:	47c0      	blx	r8
 80043bc:	3001      	adds	r0, #1
 80043be:	d103      	bne.n	80043c8 <_printf_common+0xac>
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295
 80043c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c8:	3501      	adds	r5, #1
 80043ca:	e7c6      	b.n	800435a <_printf_common+0x3e>
 80043cc:	18e1      	adds	r1, r4, r3
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	2030      	movs	r0, #48	; 0x30
 80043d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043d6:	4422      	add	r2, r4
 80043d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043e0:	3302      	adds	r3, #2
 80043e2:	e7c7      	b.n	8004374 <_printf_common+0x58>
 80043e4:	2301      	movs	r3, #1
 80043e6:	4622      	mov	r2, r4
 80043e8:	4649      	mov	r1, r9
 80043ea:	4638      	mov	r0, r7
 80043ec:	47c0      	blx	r8
 80043ee:	3001      	adds	r0, #1
 80043f0:	d0e6      	beq.n	80043c0 <_printf_common+0xa4>
 80043f2:	3601      	adds	r6, #1
 80043f4:	e7d9      	b.n	80043aa <_printf_common+0x8e>
	...

080043f8 <_printf_i>:
 80043f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043fc:	460c      	mov	r4, r1
 80043fe:	4691      	mov	r9, r2
 8004400:	7e27      	ldrb	r7, [r4, #24]
 8004402:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004404:	2f78      	cmp	r7, #120	; 0x78
 8004406:	4680      	mov	r8, r0
 8004408:	469a      	mov	sl, r3
 800440a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800440e:	d807      	bhi.n	8004420 <_printf_i+0x28>
 8004410:	2f62      	cmp	r7, #98	; 0x62
 8004412:	d80a      	bhi.n	800442a <_printf_i+0x32>
 8004414:	2f00      	cmp	r7, #0
 8004416:	f000 80d8 	beq.w	80045ca <_printf_i+0x1d2>
 800441a:	2f58      	cmp	r7, #88	; 0x58
 800441c:	f000 80a3 	beq.w	8004566 <_printf_i+0x16e>
 8004420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004428:	e03a      	b.n	80044a0 <_printf_i+0xa8>
 800442a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800442e:	2b15      	cmp	r3, #21
 8004430:	d8f6      	bhi.n	8004420 <_printf_i+0x28>
 8004432:	a001      	add	r0, pc, #4	; (adr r0, 8004438 <_printf_i+0x40>)
 8004434:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004438:	08004491 	.word	0x08004491
 800443c:	080044a5 	.word	0x080044a5
 8004440:	08004421 	.word	0x08004421
 8004444:	08004421 	.word	0x08004421
 8004448:	08004421 	.word	0x08004421
 800444c:	08004421 	.word	0x08004421
 8004450:	080044a5 	.word	0x080044a5
 8004454:	08004421 	.word	0x08004421
 8004458:	08004421 	.word	0x08004421
 800445c:	08004421 	.word	0x08004421
 8004460:	08004421 	.word	0x08004421
 8004464:	080045b1 	.word	0x080045b1
 8004468:	080044d5 	.word	0x080044d5
 800446c:	08004593 	.word	0x08004593
 8004470:	08004421 	.word	0x08004421
 8004474:	08004421 	.word	0x08004421
 8004478:	080045d3 	.word	0x080045d3
 800447c:	08004421 	.word	0x08004421
 8004480:	080044d5 	.word	0x080044d5
 8004484:	08004421 	.word	0x08004421
 8004488:	08004421 	.word	0x08004421
 800448c:	0800459b 	.word	0x0800459b
 8004490:	680b      	ldr	r3, [r1, #0]
 8004492:	1d1a      	adds	r2, r3, #4
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	600a      	str	r2, [r1, #0]
 8004498:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800449c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0a3      	b.n	80045ec <_printf_i+0x1f4>
 80044a4:	6825      	ldr	r5, [r4, #0]
 80044a6:	6808      	ldr	r0, [r1, #0]
 80044a8:	062e      	lsls	r6, r5, #24
 80044aa:	f100 0304 	add.w	r3, r0, #4
 80044ae:	d50a      	bpl.n	80044c6 <_printf_i+0xce>
 80044b0:	6805      	ldr	r5, [r0, #0]
 80044b2:	600b      	str	r3, [r1, #0]
 80044b4:	2d00      	cmp	r5, #0
 80044b6:	da03      	bge.n	80044c0 <_printf_i+0xc8>
 80044b8:	232d      	movs	r3, #45	; 0x2d
 80044ba:	426d      	negs	r5, r5
 80044bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c0:	485e      	ldr	r0, [pc, #376]	; (800463c <_printf_i+0x244>)
 80044c2:	230a      	movs	r3, #10
 80044c4:	e019      	b.n	80044fa <_printf_i+0x102>
 80044c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80044ca:	6805      	ldr	r5, [r0, #0]
 80044cc:	600b      	str	r3, [r1, #0]
 80044ce:	bf18      	it	ne
 80044d0:	b22d      	sxthne	r5, r5
 80044d2:	e7ef      	b.n	80044b4 <_printf_i+0xbc>
 80044d4:	680b      	ldr	r3, [r1, #0]
 80044d6:	6825      	ldr	r5, [r4, #0]
 80044d8:	1d18      	adds	r0, r3, #4
 80044da:	6008      	str	r0, [r1, #0]
 80044dc:	0628      	lsls	r0, r5, #24
 80044de:	d501      	bpl.n	80044e4 <_printf_i+0xec>
 80044e0:	681d      	ldr	r5, [r3, #0]
 80044e2:	e002      	b.n	80044ea <_printf_i+0xf2>
 80044e4:	0669      	lsls	r1, r5, #25
 80044e6:	d5fb      	bpl.n	80044e0 <_printf_i+0xe8>
 80044e8:	881d      	ldrh	r5, [r3, #0]
 80044ea:	4854      	ldr	r0, [pc, #336]	; (800463c <_printf_i+0x244>)
 80044ec:	2f6f      	cmp	r7, #111	; 0x6f
 80044ee:	bf0c      	ite	eq
 80044f0:	2308      	moveq	r3, #8
 80044f2:	230a      	movne	r3, #10
 80044f4:	2100      	movs	r1, #0
 80044f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044fa:	6866      	ldr	r6, [r4, #4]
 80044fc:	60a6      	str	r6, [r4, #8]
 80044fe:	2e00      	cmp	r6, #0
 8004500:	bfa2      	ittt	ge
 8004502:	6821      	ldrge	r1, [r4, #0]
 8004504:	f021 0104 	bicge.w	r1, r1, #4
 8004508:	6021      	strge	r1, [r4, #0]
 800450a:	b90d      	cbnz	r5, 8004510 <_printf_i+0x118>
 800450c:	2e00      	cmp	r6, #0
 800450e:	d04d      	beq.n	80045ac <_printf_i+0x1b4>
 8004510:	4616      	mov	r6, r2
 8004512:	fbb5 f1f3 	udiv	r1, r5, r3
 8004516:	fb03 5711 	mls	r7, r3, r1, r5
 800451a:	5dc7      	ldrb	r7, [r0, r7]
 800451c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004520:	462f      	mov	r7, r5
 8004522:	42bb      	cmp	r3, r7
 8004524:	460d      	mov	r5, r1
 8004526:	d9f4      	bls.n	8004512 <_printf_i+0x11a>
 8004528:	2b08      	cmp	r3, #8
 800452a:	d10b      	bne.n	8004544 <_printf_i+0x14c>
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	07df      	lsls	r7, r3, #31
 8004530:	d508      	bpl.n	8004544 <_printf_i+0x14c>
 8004532:	6923      	ldr	r3, [r4, #16]
 8004534:	6861      	ldr	r1, [r4, #4]
 8004536:	4299      	cmp	r1, r3
 8004538:	bfde      	ittt	le
 800453a:	2330      	movle	r3, #48	; 0x30
 800453c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004540:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004544:	1b92      	subs	r2, r2, r6
 8004546:	6122      	str	r2, [r4, #16]
 8004548:	f8cd a000 	str.w	sl, [sp]
 800454c:	464b      	mov	r3, r9
 800454e:	aa03      	add	r2, sp, #12
 8004550:	4621      	mov	r1, r4
 8004552:	4640      	mov	r0, r8
 8004554:	f7ff fee2 	bl	800431c <_printf_common>
 8004558:	3001      	adds	r0, #1
 800455a:	d14c      	bne.n	80045f6 <_printf_i+0x1fe>
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	b004      	add	sp, #16
 8004562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004566:	4835      	ldr	r0, [pc, #212]	; (800463c <_printf_i+0x244>)
 8004568:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	680e      	ldr	r6, [r1, #0]
 8004570:	061f      	lsls	r7, r3, #24
 8004572:	f856 5b04 	ldr.w	r5, [r6], #4
 8004576:	600e      	str	r6, [r1, #0]
 8004578:	d514      	bpl.n	80045a4 <_printf_i+0x1ac>
 800457a:	07d9      	lsls	r1, r3, #31
 800457c:	bf44      	itt	mi
 800457e:	f043 0320 	orrmi.w	r3, r3, #32
 8004582:	6023      	strmi	r3, [r4, #0]
 8004584:	b91d      	cbnz	r5, 800458e <_printf_i+0x196>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	f023 0320 	bic.w	r3, r3, #32
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	2310      	movs	r3, #16
 8004590:	e7b0      	b.n	80044f4 <_printf_i+0xfc>
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	f043 0320 	orr.w	r3, r3, #32
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	2378      	movs	r3, #120	; 0x78
 800459c:	4828      	ldr	r0, [pc, #160]	; (8004640 <_printf_i+0x248>)
 800459e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045a2:	e7e3      	b.n	800456c <_printf_i+0x174>
 80045a4:	065e      	lsls	r6, r3, #25
 80045a6:	bf48      	it	mi
 80045a8:	b2ad      	uxthmi	r5, r5
 80045aa:	e7e6      	b.n	800457a <_printf_i+0x182>
 80045ac:	4616      	mov	r6, r2
 80045ae:	e7bb      	b.n	8004528 <_printf_i+0x130>
 80045b0:	680b      	ldr	r3, [r1, #0]
 80045b2:	6826      	ldr	r6, [r4, #0]
 80045b4:	6960      	ldr	r0, [r4, #20]
 80045b6:	1d1d      	adds	r5, r3, #4
 80045b8:	600d      	str	r5, [r1, #0]
 80045ba:	0635      	lsls	r5, r6, #24
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	d501      	bpl.n	80045c4 <_printf_i+0x1cc>
 80045c0:	6018      	str	r0, [r3, #0]
 80045c2:	e002      	b.n	80045ca <_printf_i+0x1d2>
 80045c4:	0671      	lsls	r1, r6, #25
 80045c6:	d5fb      	bpl.n	80045c0 <_printf_i+0x1c8>
 80045c8:	8018      	strh	r0, [r3, #0]
 80045ca:	2300      	movs	r3, #0
 80045cc:	6123      	str	r3, [r4, #16]
 80045ce:	4616      	mov	r6, r2
 80045d0:	e7ba      	b.n	8004548 <_printf_i+0x150>
 80045d2:	680b      	ldr	r3, [r1, #0]
 80045d4:	1d1a      	adds	r2, r3, #4
 80045d6:	600a      	str	r2, [r1, #0]
 80045d8:	681e      	ldr	r6, [r3, #0]
 80045da:	6862      	ldr	r2, [r4, #4]
 80045dc:	2100      	movs	r1, #0
 80045de:	4630      	mov	r0, r6
 80045e0:	f7fb fdf6 	bl	80001d0 <memchr>
 80045e4:	b108      	cbz	r0, 80045ea <_printf_i+0x1f2>
 80045e6:	1b80      	subs	r0, r0, r6
 80045e8:	6060      	str	r0, [r4, #4]
 80045ea:	6863      	ldr	r3, [r4, #4]
 80045ec:	6123      	str	r3, [r4, #16]
 80045ee:	2300      	movs	r3, #0
 80045f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045f4:	e7a8      	b.n	8004548 <_printf_i+0x150>
 80045f6:	6923      	ldr	r3, [r4, #16]
 80045f8:	4632      	mov	r2, r6
 80045fa:	4649      	mov	r1, r9
 80045fc:	4640      	mov	r0, r8
 80045fe:	47d0      	blx	sl
 8004600:	3001      	adds	r0, #1
 8004602:	d0ab      	beq.n	800455c <_printf_i+0x164>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	079b      	lsls	r3, r3, #30
 8004608:	d413      	bmi.n	8004632 <_printf_i+0x23a>
 800460a:	68e0      	ldr	r0, [r4, #12]
 800460c:	9b03      	ldr	r3, [sp, #12]
 800460e:	4298      	cmp	r0, r3
 8004610:	bfb8      	it	lt
 8004612:	4618      	movlt	r0, r3
 8004614:	e7a4      	b.n	8004560 <_printf_i+0x168>
 8004616:	2301      	movs	r3, #1
 8004618:	4632      	mov	r2, r6
 800461a:	4649      	mov	r1, r9
 800461c:	4640      	mov	r0, r8
 800461e:	47d0      	blx	sl
 8004620:	3001      	adds	r0, #1
 8004622:	d09b      	beq.n	800455c <_printf_i+0x164>
 8004624:	3501      	adds	r5, #1
 8004626:	68e3      	ldr	r3, [r4, #12]
 8004628:	9903      	ldr	r1, [sp, #12]
 800462a:	1a5b      	subs	r3, r3, r1
 800462c:	42ab      	cmp	r3, r5
 800462e:	dcf2      	bgt.n	8004616 <_printf_i+0x21e>
 8004630:	e7eb      	b.n	800460a <_printf_i+0x212>
 8004632:	2500      	movs	r5, #0
 8004634:	f104 0619 	add.w	r6, r4, #25
 8004638:	e7f5      	b.n	8004626 <_printf_i+0x22e>
 800463a:	bf00      	nop
 800463c:	08004915 	.word	0x08004915
 8004640:	08004926 	.word	0x08004926

08004644 <memcpy>:
 8004644:	440a      	add	r2, r1
 8004646:	4291      	cmp	r1, r2
 8004648:	f100 33ff 	add.w	r3, r0, #4294967295
 800464c:	d100      	bne.n	8004650 <memcpy+0xc>
 800464e:	4770      	bx	lr
 8004650:	b510      	push	{r4, lr}
 8004652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800465a:	4291      	cmp	r1, r2
 800465c:	d1f9      	bne.n	8004652 <memcpy+0xe>
 800465e:	bd10      	pop	{r4, pc}

08004660 <memmove>:
 8004660:	4288      	cmp	r0, r1
 8004662:	b510      	push	{r4, lr}
 8004664:	eb01 0402 	add.w	r4, r1, r2
 8004668:	d902      	bls.n	8004670 <memmove+0x10>
 800466a:	4284      	cmp	r4, r0
 800466c:	4623      	mov	r3, r4
 800466e:	d807      	bhi.n	8004680 <memmove+0x20>
 8004670:	1e43      	subs	r3, r0, #1
 8004672:	42a1      	cmp	r1, r4
 8004674:	d008      	beq.n	8004688 <memmove+0x28>
 8004676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800467a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800467e:	e7f8      	b.n	8004672 <memmove+0x12>
 8004680:	4402      	add	r2, r0
 8004682:	4601      	mov	r1, r0
 8004684:	428a      	cmp	r2, r1
 8004686:	d100      	bne.n	800468a <memmove+0x2a>
 8004688:	bd10      	pop	{r4, pc}
 800468a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800468e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004692:	e7f7      	b.n	8004684 <memmove+0x24>

08004694 <_free_r>:
 8004694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004696:	2900      	cmp	r1, #0
 8004698:	d048      	beq.n	800472c <_free_r+0x98>
 800469a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800469e:	9001      	str	r0, [sp, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f1a1 0404 	sub.w	r4, r1, #4
 80046a6:	bfb8      	it	lt
 80046a8:	18e4      	addlt	r4, r4, r3
 80046aa:	f000 f8d3 	bl	8004854 <__malloc_lock>
 80046ae:	4a20      	ldr	r2, [pc, #128]	; (8004730 <_free_r+0x9c>)
 80046b0:	9801      	ldr	r0, [sp, #4]
 80046b2:	6813      	ldr	r3, [r2, #0]
 80046b4:	4615      	mov	r5, r2
 80046b6:	b933      	cbnz	r3, 80046c6 <_free_r+0x32>
 80046b8:	6063      	str	r3, [r4, #4]
 80046ba:	6014      	str	r4, [r2, #0]
 80046bc:	b003      	add	sp, #12
 80046be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046c2:	f000 b8cd 	b.w	8004860 <__malloc_unlock>
 80046c6:	42a3      	cmp	r3, r4
 80046c8:	d90b      	bls.n	80046e2 <_free_r+0x4e>
 80046ca:	6821      	ldr	r1, [r4, #0]
 80046cc:	1862      	adds	r2, r4, r1
 80046ce:	4293      	cmp	r3, r2
 80046d0:	bf04      	itt	eq
 80046d2:	681a      	ldreq	r2, [r3, #0]
 80046d4:	685b      	ldreq	r3, [r3, #4]
 80046d6:	6063      	str	r3, [r4, #4]
 80046d8:	bf04      	itt	eq
 80046da:	1852      	addeq	r2, r2, r1
 80046dc:	6022      	streq	r2, [r4, #0]
 80046de:	602c      	str	r4, [r5, #0]
 80046e0:	e7ec      	b.n	80046bc <_free_r+0x28>
 80046e2:	461a      	mov	r2, r3
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	b10b      	cbz	r3, 80046ec <_free_r+0x58>
 80046e8:	42a3      	cmp	r3, r4
 80046ea:	d9fa      	bls.n	80046e2 <_free_r+0x4e>
 80046ec:	6811      	ldr	r1, [r2, #0]
 80046ee:	1855      	adds	r5, r2, r1
 80046f0:	42a5      	cmp	r5, r4
 80046f2:	d10b      	bne.n	800470c <_free_r+0x78>
 80046f4:	6824      	ldr	r4, [r4, #0]
 80046f6:	4421      	add	r1, r4
 80046f8:	1854      	adds	r4, r2, r1
 80046fa:	42a3      	cmp	r3, r4
 80046fc:	6011      	str	r1, [r2, #0]
 80046fe:	d1dd      	bne.n	80046bc <_free_r+0x28>
 8004700:	681c      	ldr	r4, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	6053      	str	r3, [r2, #4]
 8004706:	4421      	add	r1, r4
 8004708:	6011      	str	r1, [r2, #0]
 800470a:	e7d7      	b.n	80046bc <_free_r+0x28>
 800470c:	d902      	bls.n	8004714 <_free_r+0x80>
 800470e:	230c      	movs	r3, #12
 8004710:	6003      	str	r3, [r0, #0]
 8004712:	e7d3      	b.n	80046bc <_free_r+0x28>
 8004714:	6825      	ldr	r5, [r4, #0]
 8004716:	1961      	adds	r1, r4, r5
 8004718:	428b      	cmp	r3, r1
 800471a:	bf04      	itt	eq
 800471c:	6819      	ldreq	r1, [r3, #0]
 800471e:	685b      	ldreq	r3, [r3, #4]
 8004720:	6063      	str	r3, [r4, #4]
 8004722:	bf04      	itt	eq
 8004724:	1949      	addeq	r1, r1, r5
 8004726:	6021      	streq	r1, [r4, #0]
 8004728:	6054      	str	r4, [r2, #4]
 800472a:	e7c7      	b.n	80046bc <_free_r+0x28>
 800472c:	b003      	add	sp, #12
 800472e:	bd30      	pop	{r4, r5, pc}
 8004730:	20000094 	.word	0x20000094

08004734 <_malloc_r>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	1ccd      	adds	r5, r1, #3
 8004738:	f025 0503 	bic.w	r5, r5, #3
 800473c:	3508      	adds	r5, #8
 800473e:	2d0c      	cmp	r5, #12
 8004740:	bf38      	it	cc
 8004742:	250c      	movcc	r5, #12
 8004744:	2d00      	cmp	r5, #0
 8004746:	4606      	mov	r6, r0
 8004748:	db01      	blt.n	800474e <_malloc_r+0x1a>
 800474a:	42a9      	cmp	r1, r5
 800474c:	d903      	bls.n	8004756 <_malloc_r+0x22>
 800474e:	230c      	movs	r3, #12
 8004750:	6033      	str	r3, [r6, #0]
 8004752:	2000      	movs	r0, #0
 8004754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004756:	f000 f87d 	bl	8004854 <__malloc_lock>
 800475a:	4921      	ldr	r1, [pc, #132]	; (80047e0 <_malloc_r+0xac>)
 800475c:	680a      	ldr	r2, [r1, #0]
 800475e:	4614      	mov	r4, r2
 8004760:	b99c      	cbnz	r4, 800478a <_malloc_r+0x56>
 8004762:	4f20      	ldr	r7, [pc, #128]	; (80047e4 <_malloc_r+0xb0>)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	b923      	cbnz	r3, 8004772 <_malloc_r+0x3e>
 8004768:	4621      	mov	r1, r4
 800476a:	4630      	mov	r0, r6
 800476c:	f000 f862 	bl	8004834 <_sbrk_r>
 8004770:	6038      	str	r0, [r7, #0]
 8004772:	4629      	mov	r1, r5
 8004774:	4630      	mov	r0, r6
 8004776:	f000 f85d 	bl	8004834 <_sbrk_r>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	d123      	bne.n	80047c6 <_malloc_r+0x92>
 800477e:	230c      	movs	r3, #12
 8004780:	6033      	str	r3, [r6, #0]
 8004782:	4630      	mov	r0, r6
 8004784:	f000 f86c 	bl	8004860 <__malloc_unlock>
 8004788:	e7e3      	b.n	8004752 <_malloc_r+0x1e>
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	1b5b      	subs	r3, r3, r5
 800478e:	d417      	bmi.n	80047c0 <_malloc_r+0x8c>
 8004790:	2b0b      	cmp	r3, #11
 8004792:	d903      	bls.n	800479c <_malloc_r+0x68>
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	441c      	add	r4, r3
 8004798:	6025      	str	r5, [r4, #0]
 800479a:	e004      	b.n	80047a6 <_malloc_r+0x72>
 800479c:	6863      	ldr	r3, [r4, #4]
 800479e:	42a2      	cmp	r2, r4
 80047a0:	bf0c      	ite	eq
 80047a2:	600b      	streq	r3, [r1, #0]
 80047a4:	6053      	strne	r3, [r2, #4]
 80047a6:	4630      	mov	r0, r6
 80047a8:	f000 f85a 	bl	8004860 <__malloc_unlock>
 80047ac:	f104 000b 	add.w	r0, r4, #11
 80047b0:	1d23      	adds	r3, r4, #4
 80047b2:	f020 0007 	bic.w	r0, r0, #7
 80047b6:	1ac2      	subs	r2, r0, r3
 80047b8:	d0cc      	beq.n	8004754 <_malloc_r+0x20>
 80047ba:	1a1b      	subs	r3, r3, r0
 80047bc:	50a3      	str	r3, [r4, r2]
 80047be:	e7c9      	b.n	8004754 <_malloc_r+0x20>
 80047c0:	4622      	mov	r2, r4
 80047c2:	6864      	ldr	r4, [r4, #4]
 80047c4:	e7cc      	b.n	8004760 <_malloc_r+0x2c>
 80047c6:	1cc4      	adds	r4, r0, #3
 80047c8:	f024 0403 	bic.w	r4, r4, #3
 80047cc:	42a0      	cmp	r0, r4
 80047ce:	d0e3      	beq.n	8004798 <_malloc_r+0x64>
 80047d0:	1a21      	subs	r1, r4, r0
 80047d2:	4630      	mov	r0, r6
 80047d4:	f000 f82e 	bl	8004834 <_sbrk_r>
 80047d8:	3001      	adds	r0, #1
 80047da:	d1dd      	bne.n	8004798 <_malloc_r+0x64>
 80047dc:	e7cf      	b.n	800477e <_malloc_r+0x4a>
 80047de:	bf00      	nop
 80047e0:	20000094 	.word	0x20000094
 80047e4:	20000098 	.word	0x20000098

080047e8 <_realloc_r>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	4607      	mov	r7, r0
 80047ec:	4614      	mov	r4, r2
 80047ee:	460e      	mov	r6, r1
 80047f0:	b921      	cbnz	r1, 80047fc <_realloc_r+0x14>
 80047f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047f6:	4611      	mov	r1, r2
 80047f8:	f7ff bf9c 	b.w	8004734 <_malloc_r>
 80047fc:	b922      	cbnz	r2, 8004808 <_realloc_r+0x20>
 80047fe:	f7ff ff49 	bl	8004694 <_free_r>
 8004802:	4625      	mov	r5, r4
 8004804:	4628      	mov	r0, r5
 8004806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004808:	f000 f830 	bl	800486c <_malloc_usable_size_r>
 800480c:	42a0      	cmp	r0, r4
 800480e:	d20f      	bcs.n	8004830 <_realloc_r+0x48>
 8004810:	4621      	mov	r1, r4
 8004812:	4638      	mov	r0, r7
 8004814:	f7ff ff8e 	bl	8004734 <_malloc_r>
 8004818:	4605      	mov	r5, r0
 800481a:	2800      	cmp	r0, #0
 800481c:	d0f2      	beq.n	8004804 <_realloc_r+0x1c>
 800481e:	4631      	mov	r1, r6
 8004820:	4622      	mov	r2, r4
 8004822:	f7ff ff0f 	bl	8004644 <memcpy>
 8004826:	4631      	mov	r1, r6
 8004828:	4638      	mov	r0, r7
 800482a:	f7ff ff33 	bl	8004694 <_free_r>
 800482e:	e7e9      	b.n	8004804 <_realloc_r+0x1c>
 8004830:	4635      	mov	r5, r6
 8004832:	e7e7      	b.n	8004804 <_realloc_r+0x1c>

08004834 <_sbrk_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4d06      	ldr	r5, [pc, #24]	; (8004850 <_sbrk_r+0x1c>)
 8004838:	2300      	movs	r3, #0
 800483a:	4604      	mov	r4, r0
 800483c:	4608      	mov	r0, r1
 800483e:	602b      	str	r3, [r5, #0]
 8004840:	f7fc f98c 	bl	8000b5c <_sbrk>
 8004844:	1c43      	adds	r3, r0, #1
 8004846:	d102      	bne.n	800484e <_sbrk_r+0x1a>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	b103      	cbz	r3, 800484e <_sbrk_r+0x1a>
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	bd38      	pop	{r3, r4, r5, pc}
 8004850:	20000194 	.word	0x20000194

08004854 <__malloc_lock>:
 8004854:	4801      	ldr	r0, [pc, #4]	; (800485c <__malloc_lock+0x8>)
 8004856:	f000 b811 	b.w	800487c <__retarget_lock_acquire_recursive>
 800485a:	bf00      	nop
 800485c:	2000019c 	.word	0x2000019c

08004860 <__malloc_unlock>:
 8004860:	4801      	ldr	r0, [pc, #4]	; (8004868 <__malloc_unlock+0x8>)
 8004862:	f000 b80c 	b.w	800487e <__retarget_lock_release_recursive>
 8004866:	bf00      	nop
 8004868:	2000019c 	.word	0x2000019c

0800486c <_malloc_usable_size_r>:
 800486c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004870:	1f18      	subs	r0, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	bfbc      	itt	lt
 8004876:	580b      	ldrlt	r3, [r1, r0]
 8004878:	18c0      	addlt	r0, r0, r3
 800487a:	4770      	bx	lr

0800487c <__retarget_lock_acquire_recursive>:
 800487c:	4770      	bx	lr

0800487e <__retarget_lock_release_recursive>:
 800487e:	4770      	bx	lr

08004880 <_init>:
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	bf00      	nop
 8004884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004886:	bc08      	pop	{r3}
 8004888:	469e      	mov	lr, r3
 800488a:	4770      	bx	lr

0800488c <_fini>:
 800488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488e:	bf00      	nop
 8004890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004892:	bc08      	pop	{r3}
 8004894:	469e      	mov	lr, r3
 8004896:	4770      	bx	lr
