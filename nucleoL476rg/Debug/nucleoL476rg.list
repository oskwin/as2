
nucleoL476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004910  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b34  08004b34  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b3c  08004b3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b3c  08004b3c  00014b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08004bb4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004bb4  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c719  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fb  00000000  00000000  0002c7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002ec60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265d8  00000000  00000000  0002f660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc2f  00000000  00000000  00055c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebe3d  00000000  00000000  00062867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e6a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f50  00000000  00000000  0014e6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a88 	.word	0x08004a88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004a88 	.word	0x08004a88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fb3f 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f893 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f951 	bl	8000838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f91f 	bl	80007d8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800059a:	f000 f8df 	bl	800075c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // Check that everything is setup OK. When the chip is asked for its identity, it should reply 0xEA
  do {
	   buf[0] = readMask |ICM20648_REG_WHO_AM_I; // Prepare the instruction " read register 0x00 so you send 0x80
 800059e:	2380      	movs	r3, #128	; 0x80
 80005a0:	713b      	strb	r3, [r7, #4]
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Pull the chip select line low
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	483e      	ldr	r0, [pc, #248]	; (80006a0 <main+0x11c>)
 80005a8:	f000 fe3c 	bl	8001224 <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(&hspi1, buf, 1, 100); // Tell the ICM20948 what you want
 80005ac:	1d39      	adds	r1, r7, #4
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	2201      	movs	r2, #1
 80005b2:	483c      	ldr	r0, [pc, #240]	; (80006a4 <main+0x120>)
 80005b4:	f002 fa11 	bl	80029da <HAL_SPI_Transmit>
	   HAL_SPI_Receive(&hspi1, buf, 1, 100); // Get the answer
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	2364      	movs	r3, #100	; 0x64
 80005bc:	2201      	movs	r2, #1
 80005be:	4839      	ldr	r0, [pc, #228]	; (80006a4 <main+0x120>)
 80005c0:	f002 fb79 	bl	8002cb6 <HAL_SPI_Receive>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Release the slave chip by bringing the line back up
 80005c4:	2201      	movs	r2, #1
 80005c6:	2140      	movs	r1, #64	; 0x40
 80005c8:	4835      	ldr	r0, [pc, #212]	; (80006a0 <main+0x11c>)
 80005ca:	f000 fe2b 	bl	8001224 <HAL_GPIO_WritePin>
	   buf[1] = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	717b      	strb	r3, [r7, #5]
	   sprintf(msg, "I am 0x%02X\r\n", buf[0]);
 80005d2:	793b      	ldrb	r3, [r7, #4]
 80005d4:	461a      	mov	r2, r3
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4933      	ldr	r1, [pc, #204]	; (80006a8 <main+0x124>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fde5 	bl	80041ac <siprintf>
       HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fdf2 	bl	80001d0 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	f107 010c 	add.w	r1, r7, #12
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	482c      	ldr	r0, [pc, #176]	; (80006ac <main+0x128>)
 80005fa:	f003 f8a9 	bl	8003750 <HAL_UART_Transmit>
   } while (buf[0] != 0xEA);
 80005fe:	793b      	ldrb	r3, [r7, #4]
 8000600:	2bea      	cmp	r3, #234	; 0xea
 8000602:	d1cc      	bne.n	800059e <main+0x1a>

   buf[0] = writeMask | ICM20648_REG_PWR_MGMT_1; // Here you want to turn on the sensors by going out of sleep mode.
 8000604:	2306      	movs	r3, #6
 8000606:	713b      	strb	r3, [r7, #4]
   buf[1] = 0x01; // This is done by writing a 0 on bit 6 of the power management register in the ICM 20948
 8000608:	2301      	movs	r3, #1
 800060a:	717b      	strb	r3, [r7, #5]
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	4823      	ldr	r0, [pc, #140]	; (80006a0 <main+0x11c>)
 8000612:	f000 fe07 	bl	8001224 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(&hspi1, buf, 2, 100); // Send the regiter address and its content (2 bytes)
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	2202      	movs	r2, #2
 800061c:	4821      	ldr	r0, [pc, #132]	; (80006a4 <main+0x120>)
 800061e:	f002 f9dc 	bl	80029da <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2140      	movs	r1, #64	; 0x40
 8000626:	481e      	ldr	r0, [pc, #120]	; (80006a0 <main+0x11c>)
 8000628:	f000 fdfc 	bl	8001224 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  buf[0] = readMask | ICM20648_REG_ACCEL_XOUT_H_SH; // Prepare the request to read the accelerometer data in X direction
 800062c:	23ad      	movs	r3, #173	; 0xad
 800062e:	713b      	strb	r3, [r7, #4]
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2140      	movs	r1, #64	; 0x40
 8000634:	481a      	ldr	r0, [pc, #104]	; (80006a0 <main+0x11c>)
 8000636:	f000 fdf5 	bl	8001224 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi1, buf, 1, 100); // Send request
 800063a:	1d39      	adds	r1, r7, #4
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	2201      	movs	r2, #1
 8000640:	4818      	ldr	r0, [pc, #96]	; (80006a4 <main+0x120>)
 8000642:	f002 f9ca 	bl	80029da <HAL_SPI_Transmit>
	    HAL_SPI_Receive(&hspi1, buf, 2, 100); // Get the accel X high and low bytes (2 bytes)
 8000646:	1d39      	adds	r1, r7, #4
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	2202      	movs	r2, #2
 800064c:	4815      	ldr	r0, [pc, #84]	; (80006a4 <main+0x120>)
 800064e:	f002 fb32 	bl	8002cb6 <HAL_SPI_Receive>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	2140      	movs	r1, #64	; 0x40
 8000656:	4812      	ldr	r0, [pc, #72]	; (80006a0 <main+0x11c>)
 8000658:	f000 fde4 	bl	8001224 <HAL_GPIO_WritePin>
	    probeX = (buf[0] << 8 | buf[1]); // Combine the two bytes into a signed 16 bit int
 800065c:	793b      	ldrb	r3, [r7, #4]
 800065e:	021b      	lsls	r3, r3, #8
 8000660:	b21a      	sxth	r2, r3
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	b21b      	sxth	r3, r3
 8000666:	4313      	orrs	r3, r2
 8000668:	b21a      	sxth	r2, r3
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <main+0x12c>)
 800066c:	801a      	strh	r2, [r3, #0]
	    sprintf(msg, "%hd\r\n", probeX);
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <main+0x12c>)
 8000670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000674:	461a      	mov	r2, r3
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	490e      	ldr	r1, [pc, #56]	; (80006b4 <main+0x130>)
 800067c:	4618      	mov	r0, r3
 800067e:	f003 fd95 	bl	80041ac <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fda2 	bl	80001d0 <strlen>
 800068c:	4603      	mov	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	f107 010c 	add.w	r1, r7, #12
 8000694:	f04f 33ff 	mov.w	r3, #4294967295
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <main+0x128>)
 800069a:	f003 f859 	bl	8003750 <HAL_UART_Transmit>
	  buf[0] = readMask | ICM20648_REG_ACCEL_XOUT_H_SH; // Prepare the request to read the accelerometer data in X direction
 800069e:	e7c5      	b.n	800062c <main+0xa8>
 80006a0:	48000400 	.word	0x48000400
 80006a4:	2000008c 	.word	0x2000008c
 80006a8:	08004aa0 	.word	0x08004aa0
 80006ac:	200000f0 	.word	0x200000f0
 80006b0:	20000174 	.word	0x20000174
 80006b4:	08004ab0 	.word	0x08004ab0

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b096      	sub	sp, #88	; 0x58
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2244      	movs	r2, #68	; 0x44
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fd68 	bl	800419c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	463b      	mov	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006de:	f000 fdc7 	bl	8001270 <HAL_PWREx_ControlVoltageScaling>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e8:	f000 f90c 	bl	8000904 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2310      	movs	r3, #16
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fe:	2302      	movs	r3, #2
 8000700:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000702:	2301      	movs	r3, #1
 8000704:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000706:	230a      	movs	r3, #10
 8000708:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800070a:	2307      	movs	r3, #7
 800070c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fdfe 	bl	800131c <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000726:	f000 f8ed 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2303      	movs	r3, #3
 8000730:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	2104      	movs	r1, #4
 8000742:	4618      	mov	r0, r3
 8000744:	f001 f9c6 	bl	8001ad4 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800074e:	f000 f8d9 	bl	8000904 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3758      	adds	r7, #88	; 0x58
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_SPI1_Init+0x78>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000776:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800077a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_SPI1_Init+0x74>)
 800077e:	2202      	movs	r2, #2
 8000780:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000784:	2201      	movs	r2, #1
 8000786:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_SPI1_Init+0x74>)
 800078a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000792:	2210      	movs	r2, #16
 8000794:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_SPI1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_SPI1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_SPI1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_SPI1_Init+0x74>)
 80007aa:	2207      	movs	r2, #7
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_SPI1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_SPI1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_SPI1_Init+0x74>)
 80007bc:	f002 f86a 	bl	8002894 <HAL_SPI_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007c6:	f000 f89d 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000008c 	.word	0x2000008c
 80007d4:	40013000 	.word	0x40013000

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART2_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800081c:	f002 ff4a 	bl	80036b4 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f86d 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000f0 	.word	0x200000f0
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a29      	ldr	r2, [pc, #164]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_GPIO_Init+0xc0>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <MX_GPIO_Init+0xc0>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_GPIO_Init+0xc0>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <MX_GPIO_Init+0xc0>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_GPIO_Init+0xc0>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ChipSelect_GPIO_Port, ChipSelect_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2140      	movs	r1, #64	; 0x40
 80008b2:	4812      	ldr	r0, [pc, #72]	; (80008fc <MX_GPIO_Init+0xc4>)
 80008b4:	f000 fcb6 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <MX_GPIO_Init+0xc8>)
 80008d0:	f000 fafe 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ChipSelect_Pin */
  GPIO_InitStruct.Pin = ChipSelect_Pin;
 80008d4:	2340      	movs	r3, #64	; 0x40
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ChipSelect_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_GPIO_Init+0xc4>)
 80008ec:	f000 faf0 	bl	8000ed0 <HAL_GPIO_Init>

}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000400 	.word	0x48000400
 8000900:	48000800 	.word	0x48000800

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_MspInit+0x44>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <HAL_MspInit+0x44>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6613      	str	r3, [r2, #96]	; 0x60
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_MspInit+0x44>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_MspInit+0x44>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6593      	str	r3, [r2, #88]	; 0x58
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_SPI_MspInit+0x7c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d128      	bne.n	80009cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000984:	6613      	str	r3, [r2, #96]	; 0x60
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009aa:	23e0      	movs	r3, #224	; 0xe0
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ba:	2305      	movs	r3, #5
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f000 fa82 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40013000 	.word	0x40013000
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0ac      	sub	sp, #176	; 0xb0
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2288      	movs	r2, #136	; 0x88
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 fbcd 	bl	800419c <memset>
  if(huart->Instance==USART2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <HAL_UART_MspInit+0xb0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d13b      	bne.n	8000a84 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fa7f 	bl	8001f1c <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a24:	f7ff ff6e 	bl	8000904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2c:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a32:	6593      	str	r3, [r2, #88]	; 0x58
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a44:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_UART_MspInit+0xb4>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a70:	2307      	movs	r3, #7
 8000a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f000 fa26 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	37b0      	adds	r7, #176	; 0xb0
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f8f0 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f003 fb16 	bl	8004148 <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20018000 	.word	0x20018000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	20000178 	.word	0x20000178
 8000b50:	20000190 	.word	0x20000190

08000b54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <SystemInit+0x5c>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <SystemInit+0x5c>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <SystemInit+0x60>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <SystemInit+0x60>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <SystemInit+0x60>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <SystemInit+0x60>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <SystemInit+0x60>)
 8000b80:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b84:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <SystemInit+0x60>)
 8000b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <SystemInit+0x60>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <SystemInit+0x60>)
 8000b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <SystemInit+0x60>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bbc:	f7ff ffca 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bc2:	e003      	b.n	8000bcc <LoopCopyDataInit>

08000bc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bca:	3104      	adds	r1, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bcc:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bd4:	d3f6      	bcc.n	8000bc4 <CopyDataInit>
	ldr	r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bd8:	e002      	b.n	8000be0 <LoopFillZerobss>

08000bda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bdc:	f842 3b04 	str.w	r3, [r2], #4

08000be0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <LoopForever+0x16>)
	cmp	r2, r3
 8000be2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000be4:	d3f9      	bcc.n	8000bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be6:	f003 fab5 	bl	8004154 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bea:	f7ff fccb 	bl	8000584 <main>

08000bee <LoopForever>:

LoopForever:
    b LoopForever
 8000bee:	e7fe      	b.n	8000bee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000bf4:	08004b44 	.word	0x08004b44
	ldr	r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bfc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000c00:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000c04:	20000190 	.word	0x20000190

08000c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_2_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_Init+0x3c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <HAL_Init+0x3c>)
 8000c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c22:	2003      	movs	r0, #3
 8000c24:	f000 f920 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 f80f 	bl	8000c4c <HAL_InitTick>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	e001      	b.n	8000c3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c3a:	f7ff fe69 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_InitTick+0x6c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d023      	beq.n	8000ca8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_InitTick+0x70>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_InitTick+0x6c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f91d 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10f      	bne.n	8000ca2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d809      	bhi.n	8000c9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 f8f5 	bl	8000e7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_InitTick+0x74>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e007      	b.n	8000cac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e004      	b.n	8000cac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e001      	b.n	8000cac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	2000017c 	.word	0x2000017c

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	2000017c 	.word	0x2000017c

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff47 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff5c 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff8e 	bl	8000dbc <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffb0 	bl	8000e24 <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ede:	e17f      	b.n	80011e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 8171 	beq.w	80011da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d005      	beq.n	8000f10 <HAL_GPIO_Init+0x40>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d130      	bne.n	8000f72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	f003 0201 	and.w	r2, r3, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d118      	bne.n	8000fb0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f84:	2201      	movs	r2, #1
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	f003 0201 	and.w	r2, r3, #1
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d017      	beq.n	8000fec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d123      	bne.n	8001040 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	6939      	ldr	r1, [r7, #16]
 800103c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0203 	and.w	r2, r3, #3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80ac 	beq.w	80011da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	4b5f      	ldr	r3, [pc, #380]	; (8001200 <HAL_GPIO_Init+0x330>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	4a5e      	ldr	r2, [pc, #376]	; (8001200 <HAL_GPIO_Init+0x330>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6613      	str	r3, [r2, #96]	; 0x60
 800108e:	4b5c      	ldr	r3, [pc, #368]	; (8001200 <HAL_GPIO_Init+0x330>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800109a:	4a5a      	ldr	r2, [pc, #360]	; (8001204 <HAL_GPIO_Init+0x334>)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010c4:	d025      	beq.n	8001112 <HAL_GPIO_Init+0x242>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4f      	ldr	r2, [pc, #316]	; (8001208 <HAL_GPIO_Init+0x338>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01f      	beq.n	800110e <HAL_GPIO_Init+0x23e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4e      	ldr	r2, [pc, #312]	; (800120c <HAL_GPIO_Init+0x33c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x23a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4d      	ldr	r2, [pc, #308]	; (8001210 <HAL_GPIO_Init+0x340>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x236>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4c      	ldr	r2, [pc, #304]	; (8001214 <HAL_GPIO_Init+0x344>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x232>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <HAL_GPIO_Init+0x348>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x22e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4a      	ldr	r2, [pc, #296]	; (800121c <HAL_GPIO_Init+0x34c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x22a>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e00c      	b.n	8001114 <HAL_GPIO_Init+0x244>
 80010fa:	2307      	movs	r3, #7
 80010fc:	e00a      	b.n	8001114 <HAL_GPIO_Init+0x244>
 80010fe:	2305      	movs	r3, #5
 8001100:	e008      	b.n	8001114 <HAL_GPIO_Init+0x244>
 8001102:	2304      	movs	r3, #4
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x244>
 8001106:	2303      	movs	r3, #3
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x244>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x244>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x244>
 8001112:	2300      	movs	r3, #0
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001124:	4937      	ldr	r1, [pc, #220]	; (8001204 <HAL_GPIO_Init+0x334>)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001132:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <HAL_GPIO_Init+0x350>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001156:	4a32      	ldr	r2, [pc, #200]	; (8001220 <HAL_GPIO_Init+0x350>)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800115c:	4b30      	ldr	r3, [pc, #192]	; (8001220 <HAL_GPIO_Init+0x350>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001180:	4a27      	ldr	r2, [pc, #156]	; (8001220 <HAL_GPIO_Init+0x350>)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <HAL_GPIO_Init+0x350>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011aa:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_GPIO_Init+0x350>)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_GPIO_Init+0x350>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011d4:	4a12      	ldr	r2, [pc, #72]	; (8001220 <HAL_GPIO_Init+0x350>)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3301      	adds	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f47f ae78 	bne.w	8000ee0 <HAL_GPIO_Init+0x10>
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	371c      	adds	r7, #28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	40010000 	.word	0x40010000
 8001208:	48000400 	.word	0x48000400
 800120c:	48000800 	.word	0x48000800
 8001210:	48000c00 	.word	0x48000c00
 8001214:	48001000 	.word	0x48001000
 8001218:	48001400 	.word	0x48001400
 800121c:	48001800 	.word	0x48001800
 8001220:	40010400 	.word	0x40010400

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001240:	e002      	b.n	8001248 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <HAL_PWREx_GetVoltageRange+0x18>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40007000 	.word	0x40007000

08001270 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800127e:	d130      	bne.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001280:	4b23      	ldr	r3, [pc, #140]	; (8001310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800128c:	d038      	beq.n	8001300 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001296:	4a1e      	ldr	r2, [pc, #120]	; (8001310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001298:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2232      	movs	r2, #50	; 0x32
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
 80012a8:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	0c9b      	lsrs	r3, r3, #18
 80012b0:	3301      	adds	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012b4:	e002      	b.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c8:	d102      	bne.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f2      	bne.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012dc:	d110      	bne.n	8001300 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e00f      	b.n	8001302 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ee:	d007      	beq.n	8001300 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f8:	4a05      	ldr	r2, [pc, #20]	; (8001310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40007000 	.word	0x40007000
 8001314:	20000000 	.word	0x20000000
 8001318:	431bde83 	.word	0x431bde83

0800131c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e3ca      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800132e:	4b97      	ldr	r3, [pc, #604]	; (800158c <HAL_RCC_OscConfig+0x270>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001338:	4b94      	ldr	r3, [pc, #592]	; (800158c <HAL_RCC_OscConfig+0x270>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 80e4 	beq.w	8001518 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d007      	beq.n	8001366 <HAL_RCC_OscConfig+0x4a>
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b0c      	cmp	r3, #12
 800135a:	f040 808b 	bne.w	8001474 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2b01      	cmp	r3, #1
 8001362:	f040 8087 	bne.w	8001474 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001366:	4b89      	ldr	r3, [pc, #548]	; (800158c <HAL_RCC_OscConfig+0x270>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_RCC_OscConfig+0x62>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e3a2      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1a      	ldr	r2, [r3, #32]
 8001382:	4b82      	ldr	r3, [pc, #520]	; (800158c <HAL_RCC_OscConfig+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <HAL_RCC_OscConfig+0x7c>
 800138e:	4b7f      	ldr	r3, [pc, #508]	; (800158c <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001396:	e005      	b.n	80013a4 <HAL_RCC_OscConfig+0x88>
 8001398:	4b7c      	ldr	r3, [pc, #496]	; (800158c <HAL_RCC_OscConfig+0x270>)
 800139a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d223      	bcs.n	80013f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fd55 	bl	8001e5c <RCC_SetFlashLatencyFromMSIRange>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e383      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013bc:	4b73      	ldr	r3, [pc, #460]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a72      	ldr	r2, [pc, #456]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b70      	ldr	r3, [pc, #448]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	496d      	ldr	r1, [pc, #436]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013da:	4b6c      	ldr	r3, [pc, #432]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	4968      	ldr	r1, [pc, #416]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]
 80013ee:	e025      	b.n	800143c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f0:	4b66      	ldr	r3, [pc, #408]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a65      	ldr	r2, [pc, #404]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80013f6:	f043 0308 	orr.w	r3, r3, #8
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4960      	ldr	r1, [pc, #384]	; (800158c <HAL_RCC_OscConfig+0x270>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <HAL_RCC_OscConfig+0x270>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	495b      	ldr	r1, [pc, #364]	; (800158c <HAL_RCC_OscConfig+0x270>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fd15 	bl	8001e5c <RCC_SetFlashLatencyFromMSIRange>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e343      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800143c:	f000 fc4a 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8001440:	4602      	mov	r2, r0
 8001442:	4b52      	ldr	r3, [pc, #328]	; (800158c <HAL_RCC_OscConfig+0x270>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	4950      	ldr	r1, [pc, #320]	; (8001590 <HAL_RCC_OscConfig+0x274>)
 800144e:	5ccb      	ldrb	r3, [r1, r3]
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
 8001458:	4a4e      	ldr	r2, [pc, #312]	; (8001594 <HAL_RCC_OscConfig+0x278>)
 800145a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800145c:	4b4e      	ldr	r3, [pc, #312]	; (8001598 <HAL_RCC_OscConfig+0x27c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fbf3 	bl	8000c4c <HAL_InitTick>
 8001466:	4603      	mov	r3, r0
 8001468:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d052      	beq.n	8001516 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	e327      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d032      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <HAL_RCC_OscConfig+0x270>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a42      	ldr	r2, [pc, #264]	; (800158c <HAL_RCC_OscConfig+0x270>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001488:	f7ff fc30 	bl	8000cec <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001490:	f7ff fc2c 	bl	8000cec <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e310      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014a2:	4b3a      	ldr	r3, [pc, #232]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a36      	ldr	r2, [pc, #216]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80014b4:	f043 0308 	orr.w	r3, r3, #8
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b34      	ldr	r3, [pc, #208]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4931      	ldr	r1, [pc, #196]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	492c      	ldr	r1, [pc, #176]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
 80014e0:	e01a      	b.n	8001518 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a29      	ldr	r2, [pc, #164]	; (800158c <HAL_RCC_OscConfig+0x270>)
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ee:	f7ff fbfd 	bl	8000cec <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f6:	f7ff fbf9 	bl	8000cec <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e2dd      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f0      	bne.n	80014f6 <HAL_RCC_OscConfig+0x1da>
 8001514:	e000      	b.n	8001518 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001516:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d074      	beq.n	800160e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2b08      	cmp	r3, #8
 8001528:	d005      	beq.n	8001536 <HAL_RCC_OscConfig+0x21a>
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	d10e      	bne.n	800154e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d10b      	bne.n	800154e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d064      	beq.n	800160c <HAL_RCC_OscConfig+0x2f0>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d160      	bne.n	800160c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e2ba      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x24a>
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_RCC_OscConfig+0x270>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0b      	ldr	r2, [pc, #44]	; (800158c <HAL_RCC_OscConfig+0x270>)
 800155e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e026      	b.n	80015b4 <HAL_RCC_OscConfig+0x298>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800156e:	d115      	bne.n	800159c <HAL_RCC_OscConfig+0x280>
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_RCC_OscConfig+0x270>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a05      	ldr	r2, [pc, #20]	; (800158c <HAL_RCC_OscConfig+0x270>)
 8001576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <HAL_RCC_OscConfig+0x270>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a02      	ldr	r2, [pc, #8]	; (800158c <HAL_RCC_OscConfig+0x270>)
 8001582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e014      	b.n	80015b4 <HAL_RCC_OscConfig+0x298>
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	08004ab8 	.word	0x08004ab8
 8001594:	20000000 	.word	0x20000000
 8001598:	20000004 	.word	0x20000004
 800159c:	4ba0      	ldr	r3, [pc, #640]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a9f      	ldr	r2, [pc, #636]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b9d      	ldr	r3, [pc, #628]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a9c      	ldr	r2, [pc, #624]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d013      	beq.n	80015e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fb96 	bl	8000cec <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fb92 	bl	8000cec <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	; 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e276      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d6:	4b92      	ldr	r3, [pc, #584]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x2a8>
 80015e2:	e014      	b.n	800160e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb82 	bl	8000cec <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fb7e 	bl	8000cec <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e262      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015fe:	4b88      	ldr	r3, [pc, #544]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x2d0>
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d060      	beq.n	80016dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	2b04      	cmp	r3, #4
 800161e:	d005      	beq.n	800162c <HAL_RCC_OscConfig+0x310>
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2b0c      	cmp	r3, #12
 8001624:	d119      	bne.n	800165a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d116      	bne.n	800165a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162c:	4b7c      	ldr	r3, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_OscConfig+0x328>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e23f      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001644:	4b76      	ldr	r3, [pc, #472]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	061b      	lsls	r3, r3, #24
 8001652:	4973      	ldr	r1, [pc, #460]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001658:	e040      	b.n	80016dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d023      	beq.n	80016aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001662:	4b6f      	ldr	r3, [pc, #444]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a6e      	ldr	r2, [pc, #440]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7ff fb3d 	bl	8000cec <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff fb39 	bl	8000cec <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e21d      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001688:	4b65      	ldr	r3, [pc, #404]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b62      	ldr	r3, [pc, #392]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	061b      	lsls	r3, r3, #24
 80016a2:	495f      	ldr	r1, [pc, #380]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
 80016a8:	e018      	b.n	80016dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016aa:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a5c      	ldr	r2, [pc, #368]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 80016b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b6:	f7ff fb19 	bl	8000cec <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016be:	f7ff fb15 	bl	8000cec <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e1f9      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d0:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f0      	bne.n	80016be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d03c      	beq.n	8001762 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01c      	beq.n	800172a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f0:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f6:	4a4a      	ldr	r2, [pc, #296]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff faf4 	bl	8000cec <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff faf0 	bl	8000cec <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e1d4      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 800171c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ef      	beq.n	8001708 <HAL_RCC_OscConfig+0x3ec>
 8001728:	e01b      	b.n	8001762 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800172a:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 800172c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001730:	4a3b      	ldr	r2, [pc, #236]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173a:	f7ff fad7 	bl	8000cec <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001742:	f7ff fad3 	bl	8000cec <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e1b7      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001754:	4b32      	ldr	r3, [pc, #200]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 8001756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ef      	bne.n	8001742 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80a6 	beq.w	80018bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10d      	bne.n	800179c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	4a26      	ldr	r2, [pc, #152]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178a:	6593      	str	r3, [r2, #88]	; 0x58
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001798:	2301      	movs	r3, #1
 800179a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_RCC_OscConfig+0x508>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d118      	bne.n	80017da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <HAL_RCC_OscConfig+0x508>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a1d      	ldr	r2, [pc, #116]	; (8001824 <HAL_RCC_OscConfig+0x508>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b4:	f7ff fa9a 	bl	8000cec <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017bc:	f7ff fa96 	bl	8000cec <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e17a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_RCC_OscConfig+0x508>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d108      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4d8>
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f2:	e029      	b.n	8001848 <HAL_RCC_OscConfig+0x52c>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d115      	bne.n	8001828 <HAL_RCC_OscConfig+0x50c>
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001812:	4a03      	ldr	r2, [pc, #12]	; (8001820 <HAL_RCC_OscConfig+0x504>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800181c:	e014      	b.n	8001848 <HAL_RCC_OscConfig+0x52c>
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	40007000 	.word	0x40007000
 8001828:	4b9c      	ldr	r3, [pc, #624]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182e:	4a9b      	ldr	r2, [pc, #620]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001838:	4b98      	ldr	r3, [pc, #608]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183e:	4a97      	ldr	r2, [pc, #604]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 8001840:	f023 0304 	bic.w	r3, r3, #4
 8001844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d016      	beq.n	800187e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff fa4c 	bl	8000cec <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001856:	e00a      	b.n	800186e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff fa48 	bl	8000cec <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e12a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186e:	4b8b      	ldr	r3, [pc, #556]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 8001870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0ed      	beq.n	8001858 <HAL_RCC_OscConfig+0x53c>
 800187c:	e015      	b.n	80018aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187e:	f7ff fa35 	bl	8000cec <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff fa31 	bl	8000cec <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	; 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e113      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800189c:	4b7f      	ldr	r3, [pc, #508]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ed      	bne.n	8001886 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018aa:	7ffb      	ldrb	r3, [r7, #31]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b0:	4b7a      	ldr	r3, [pc, #488]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	4a79      	ldr	r2, [pc, #484]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 80018b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80fe 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	f040 80d0 	bne.w	8001a70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018d0:	4b72      	ldr	r3, [pc, #456]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0203 	and.w	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d130      	bne.n	8001946 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	3b01      	subs	r3, #1
 80018f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d127      	bne.n	8001946 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001900:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d11f      	bne.n	8001946 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001910:	2a07      	cmp	r2, #7
 8001912:	bf14      	ite	ne
 8001914:	2201      	movne	r2, #1
 8001916:	2200      	moveq	r2, #0
 8001918:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800191a:	4293      	cmp	r3, r2
 800191c:	d113      	bne.n	8001946 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	3b01      	subs	r3, #1
 800192c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d109      	bne.n	8001946 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	3b01      	subs	r3, #1
 8001940:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d06e      	beq.n	8001a24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b0c      	cmp	r3, #12
 800194a:	d069      	beq.n	8001a20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d105      	bne.n	8001964 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001958:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0ad      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001968:	4b4c      	ldr	r3, [pc, #304]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a4b      	ldr	r2, [pc, #300]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 800196e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001974:	f7ff f9ba 	bl	8000cec <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f9b6 	bl	8000cec <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e09a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198e:	4b43      	ldr	r3, [pc, #268]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199a:	4b40      	ldr	r3, [pc, #256]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	4b40      	ldr	r3, [pc, #256]	; (8001aa0 <HAL_RCC_OscConfig+0x784>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019aa:	3a01      	subs	r2, #1
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	4311      	orrs	r1, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019b4:	0212      	lsls	r2, r2, #8
 80019b6:	4311      	orrs	r1, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019bc:	0852      	lsrs	r2, r2, #1
 80019be:	3a01      	subs	r2, #1
 80019c0:	0552      	lsls	r2, r2, #21
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019c8:	0852      	lsrs	r2, r2, #1
 80019ca:	3a01      	subs	r2, #1
 80019cc:	0652      	lsls	r2, r2, #25
 80019ce:	4311      	orrs	r1, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019d4:	0912      	lsrs	r2, r2, #4
 80019d6:	0452      	lsls	r2, r2, #17
 80019d8:	430a      	orrs	r2, r1
 80019da:	4930      	ldr	r1, [pc, #192]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019e0:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a2d      	ldr	r2, [pc, #180]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 80019e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ec:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4a2a      	ldr	r2, [pc, #168]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 80019f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019f8:	f7ff f978 	bl	8000cec <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f974 	bl	8000cec <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e058      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a1e:	e050      	b.n	8001ac2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e04f      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d148      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 8001a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 8001a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a48:	f7ff f950 	bl	8000cec <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff f94c 	bl	8000cec <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e030      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x734>
 8001a6e:	e028      	b.n	8001ac2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b0c      	cmp	r3, #12
 8001a74:	d023      	beq.n	8001abe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_RCC_OscConfig+0x780>)
 8001a7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7ff f933 	bl	8000cec <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a88:	e00c      	b.n	8001aa4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff f92f 	bl	8000cec <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d905      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e013      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_OscConfig+0x7b0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ec      	bne.n	8001a8a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_RCC_OscConfig+0x7b0>)
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	4905      	ldr	r1, [pc, #20]	; (8001acc <HAL_RCC_OscConfig+0x7b0>)
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_RCC_OscConfig+0x7b4>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60cb      	str	r3, [r1, #12]
 8001abc:	e001      	b.n	8001ac2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	feeefffc 	.word	0xfeeefffc

08001ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0e7      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d910      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b72      	ldr	r3, [pc, #456]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 0207 	bic.w	r2, r3, #7
 8001afe:	4970      	ldr	r1, [pc, #448]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b6e      	ldr	r3, [pc, #440]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0cf      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d010      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	4b66      	ldr	r3, [pc, #408]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d908      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4960      	ldr	r1, [pc, #384]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d04c      	beq.n	8001bec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5a:	4b5a      	ldr	r3, [pc, #360]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d121      	bne.n	8001baa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0a6      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b72:	4b54      	ldr	r3, [pc, #336]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d115      	bne.n	8001baa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e09a      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b8a:	4b4e      	ldr	r3, [pc, #312]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e08e      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e086      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001baa:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f023 0203 	bic.w	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4943      	ldr	r1, [pc, #268]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bbc:	f7ff f896 	bl	8000cec <HAL_GetTick>
 8001bc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc4:	f7ff f892 	bl	8000cec <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e06e      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 020c 	and.w	r2, r3, #12
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d1eb      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d010      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d208      	bcs.n	8001c1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	492b      	ldr	r1, [pc, #172]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d210      	bcs.n	8001c4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c28:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 0207 	bic.w	r2, r3, #7
 8001c30:	4923      	ldr	r1, [pc, #140]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e036      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d008      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	4918      	ldr	r1, [pc, #96]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4910      	ldr	r1, [pc, #64]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c88:	f000 f824 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	490b      	ldr	r1, [pc, #44]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f4>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca4:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1f8>)
 8001ca6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_RCC_ClockConfig+0x1fc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe ffcd 	bl	8000c4c <HAL_InitTick>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cb6:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	08004ab8 	.word	0x08004ab8
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000004 	.word	0x20000004

08001cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cec:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x34>
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d121      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d11e      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d08:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d14:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e005      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d24:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d30:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10d      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d102      	bne.n	8001d52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	e004      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d58:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d134      	bne.n	8001dcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d62:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d003      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0xac>
 8001d78:	e005      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d7c:	617b      	str	r3, [r7, #20]
      break;
 8001d7e:	e005      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d82:	617b      	str	r3, [r7, #20]
      break;
 8001d84:	e002      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	617b      	str	r3, [r7, #20]
      break;
 8001d8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	3301      	adds	r3, #1
 8001d98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	fb03 f202 	mul.w	r2, r3, r2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	0e5b      	lsrs	r3, r3, #25
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08004ad0 	.word	0x08004ad0
 8001de4:	00f42400 	.word	0x00f42400
 8001de8:	007a1200 	.word	0x007a1200

08001dec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000000 	.word	0x20000000

08001e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e08:	f7ff fff0 	bl	8001dec <HAL_RCC_GetHCLKFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	4904      	ldr	r1, [pc, #16]	; (8001e2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	08004ac8 	.word	0x08004ac8

08001e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e34:	f7ff ffda 	bl	8001dec <HAL_RCC_GetHCLKFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	0adb      	lsrs	r3, r3, #11
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4904      	ldr	r1, [pc, #16]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08004ac8 	.word	0x08004ac8

08001e5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e68:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e74:	f7ff f9ee 	bl	8001254 <HAL_PWREx_GetVoltageRange>
 8001e78:	6178      	str	r0, [r7, #20]
 8001e7a:	e014      	b.n	8001ea6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e80:	4a24      	ldr	r2, [pc, #144]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e86:	6593      	str	r3, [r2, #88]	; 0x58
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e94:	f7ff f9de 	bl	8001254 <HAL_PWREx_GetVoltageRange>
 8001e98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eac:	d10b      	bne.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b80      	cmp	r3, #128	; 0x80
 8001eb2:	d919      	bls.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2ba0      	cmp	r3, #160	; 0xa0
 8001eb8:	d902      	bls.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eba:	2302      	movs	r3, #2
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e013      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e010      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b80      	cmp	r3, #128	; 0x80
 8001eca:	d902      	bls.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ecc:	2303      	movs	r3, #3
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e00a      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b80      	cmp	r3, #128	; 0x80
 8001ed6:	d102      	bne.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed8:	2302      	movs	r3, #2
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e004      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b70      	cmp	r3, #112	; 0x70
 8001ee2:	d101      	bne.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 0207 	bic.w	r2, r3, #7
 8001ef0:	4909      	ldr	r1, [pc, #36]	; (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d001      	beq.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40022000 	.word	0x40022000

08001f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f24:	2300      	movs	r3, #0
 8001f26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f28:	2300      	movs	r3, #0
 8001f2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d041      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f40:	d02a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f46:	d824      	bhi.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f4c:	d008      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f52:	d81e      	bhi.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f5c:	d010      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f5e:	e018      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f60:	4b86      	ldr	r3, [pc, #536]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a85      	ldr	r2, [pc, #532]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f6c:	e015      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 fabb 	bl	80024f0 <RCCEx_PLLSAI1_Config>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f7e:	e00c      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3320      	adds	r3, #32
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fba6 	bl	80026d8 <RCCEx_PLLSAI2_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f90:	e003      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	74fb      	strb	r3, [r7, #19]
      break;
 8001f96:	e000      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f9a:	7cfb      	ldrb	r3, [r7, #19]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fa0:	4b76      	ldr	r3, [pc, #472]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fae:	4973      	ldr	r1, [pc, #460]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fb6:	e001      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d041      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fcc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fd0:	d02a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fd6:	d824      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fdc:	d008      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fe2:	d81e      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fec:	d010      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fee:	e018      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ff0:	4b62      	ldr	r3, [pc, #392]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a61      	ldr	r2, [pc, #388]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ffc:	e015      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fa73 	bl	80024f0 <RCCEx_PLLSAI1_Config>
 800200a:	4603      	mov	r3, r0
 800200c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800200e:	e00c      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3320      	adds	r3, #32
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fb5e 	bl	80026d8 <RCCEx_PLLSAI2_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002020:	e003      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	74fb      	strb	r3, [r7, #19]
      break;
 8002026:	e000      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002030:	4b52      	ldr	r3, [pc, #328]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800203e:	494f      	ldr	r1, [pc, #316]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002046:	e001      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80a0 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800205e:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800206e:	2300      	movs	r3, #0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4b41      	ldr	r3, [pc, #260]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	4a40      	ldr	r2, [pc, #256]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207e:	6593      	str	r3, [r2, #88]	; 0x58
 8002080:	4b3e      	ldr	r3, [pc, #248]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208c:	2301      	movs	r3, #1
 800208e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002090:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a3a      	ldr	r2, [pc, #232]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800209c:	f7fe fe26 	bl	8000cec <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020a2:	e009      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a4:	f7fe fe22 	bl	8000cec <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d902      	bls.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	74fb      	strb	r3, [r7, #19]
        break;
 80020b6:	e005      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020b8:	4b31      	ldr	r3, [pc, #196]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ef      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d15c      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ca:	4b2c      	ldr	r3, [pc, #176]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01f      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d019      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020f4:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	4a20      	ldr	r2, [pc, #128]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002114:	4a19      	ldr	r2, [pc, #100]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d016      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe fde1 	bl	8000cec <HAL_GetTick>
 800212a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212c:	e00b      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fddd 	bl	8000cec <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d902      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	74fb      	strb	r3, [r7, #19]
            break;
 8002144:	e006      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002146:	4b0d      	ldr	r3, [pc, #52]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ec      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800216a:	4904      	ldr	r1, [pc, #16]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002172:	e009      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	74bb      	strb	r3, [r7, #18]
 8002178:	e006      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002188:	7c7b      	ldrb	r3, [r7, #17]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d105      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218e:	4b9e      	ldr	r3, [pc, #632]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	4a9d      	ldr	r2, [pc, #628]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002198:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a6:	4b98      	ldr	r3, [pc, #608]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ac:	f023 0203 	bic.w	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b4:	4994      	ldr	r1, [pc, #592]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c8:	4b8f      	ldr	r3, [pc, #572]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	f023 020c 	bic.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	498c      	ldr	r1, [pc, #560]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ea:	4b87      	ldr	r3, [pc, #540]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	4983      	ldr	r1, [pc, #524]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800220c:	4b7e      	ldr	r3, [pc, #504]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	497b      	ldr	r1, [pc, #492]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800222e:	4b76      	ldr	r3, [pc, #472]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223c:	4972      	ldr	r1, [pc, #456]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002250:	4b6d      	ldr	r3, [pc, #436]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	496a      	ldr	r1, [pc, #424]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002272:	4b65      	ldr	r3, [pc, #404]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	4961      	ldr	r1, [pc, #388]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002294:	4b5c      	ldr	r3, [pc, #368]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a2:	4959      	ldr	r1, [pc, #356]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b6:	4b54      	ldr	r3, [pc, #336]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c4:	4950      	ldr	r1, [pc, #320]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022d8:	4b4b      	ldr	r3, [pc, #300]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	4948      	ldr	r1, [pc, #288]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022fa:	4b43      	ldr	r3, [pc, #268]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	493f      	ldr	r1, [pc, #252]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d028      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800231c:	4b3a      	ldr	r3, [pc, #232]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800232a:	4937      	ldr	r1, [pc, #220]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800233a:	d106      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800233c:	4b32      	ldr	r3, [pc, #200]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a31      	ldr	r2, [pc, #196]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002346:	60d3      	str	r3, [r2, #12]
 8002348:	e011      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800234e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002352:	d10c      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	2101      	movs	r1, #1
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f8c8 	bl	80024f0 <RCCEx_PLLSAI1_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d028      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800237a:	4b23      	ldr	r3, [pc, #140]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	491f      	ldr	r1, [pc, #124]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002398:	d106      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023a4:	60d3      	str	r3, [r2, #12]
 80023a6:	e011      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2101      	movs	r1, #1
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 f899 	bl	80024f0 <RCCEx_PLLSAI1_Config>
 80023be:	4603      	mov	r3, r0
 80023c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d02b      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e6:	4908      	ldr	r1, [pc, #32]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023f6:	d109      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a02      	ldr	r2, [pc, #8]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002402:	60d3      	str	r3, [r2, #12]
 8002404:	e014      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002414:	d10c      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3304      	adds	r3, #4
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f867 	bl	80024f0 <RCCEx_PLLSAI1_Config>
 8002422:	4603      	mov	r3, r0
 8002424:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d02f      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800244a:	4928      	ldr	r1, [pc, #160]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800245a:	d10d      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	2102      	movs	r1, #2
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f844 	bl	80024f0 <RCCEx_PLLSAI1_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d014      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	74bb      	strb	r3, [r7, #18]
 8002476:	e011      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800247c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002480:	d10c      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3320      	adds	r3, #32
 8002486:	2102      	movs	r1, #2
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f925 	bl	80026d8 <RCCEx_PLLSAI2_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024b6:	490d      	ldr	r1, [pc, #52]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024da:	4904      	ldr	r1, [pc, #16]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000

080024f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024fe:	4b75      	ldr	r3, [pc, #468]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d018      	beq.n	800253c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800250a:	4b72      	ldr	r3, [pc, #456]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0203 	and.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d10d      	bne.n	8002536 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
       ||
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002522:	4b6c      	ldr	r3, [pc, #432]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
       ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d047      	beq.n	80025c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	e044      	b.n	80025c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d018      	beq.n	8002576 <RCCEx_PLLSAI1_Config+0x86>
 8002544:	2b03      	cmp	r3, #3
 8002546:	d825      	bhi.n	8002594 <RCCEx_PLLSAI1_Config+0xa4>
 8002548:	2b01      	cmp	r3, #1
 800254a:	d002      	beq.n	8002552 <RCCEx_PLLSAI1_Config+0x62>
 800254c:	2b02      	cmp	r3, #2
 800254e:	d009      	beq.n	8002564 <RCCEx_PLLSAI1_Config+0x74>
 8002550:	e020      	b.n	8002594 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002552:	4b60      	ldr	r3, [pc, #384]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d11d      	bne.n	800259a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002562:	e01a      	b.n	800259a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002564:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d116      	bne.n	800259e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002574:	e013      	b.n	800259e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002576:	4b57      	ldr	r3, [pc, #348]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10f      	bne.n	80025a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002582:	4b54      	ldr	r3, [pc, #336]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002592:	e006      	b.n	80025a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      break;
 8002598:	e004      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800259a:	bf00      	nop
 800259c:	e002      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800259e:	bf00      	nop
 80025a0:	e000      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025aa:	4b4a      	ldr	r3, [pc, #296]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	430b      	orrs	r3, r1
 80025c0:	4944      	ldr	r1, [pc, #272]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d17d      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025cc:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a40      	ldr	r2, [pc, #256]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d8:	f7fe fb88 	bl	8000cec <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025de:	e009      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025e0:	f7fe fb84 	bl	8000cec <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d902      	bls.n	80025f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	73fb      	strb	r3, [r7, #15]
        break;
 80025f2:	e005      	b.n	8002600 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025f4:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ef      	bne.n	80025e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d160      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d111      	bne.n	8002630 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800260c:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6892      	ldr	r2, [r2, #8]
 800261c:	0211      	lsls	r1, r2, #8
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68d2      	ldr	r2, [r2, #12]
 8002622:	0912      	lsrs	r2, r2, #4
 8002624:	0452      	lsls	r2, r2, #17
 8002626:	430a      	orrs	r2, r1
 8002628:	492a      	ldr	r1, [pc, #168]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262a:	4313      	orrs	r3, r2
 800262c:	610b      	str	r3, [r1, #16]
 800262e:	e027      	b.n	8002680 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d112      	bne.n	800265c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002636:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800263e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6892      	ldr	r2, [r2, #8]
 8002646:	0211      	lsls	r1, r2, #8
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6912      	ldr	r2, [r2, #16]
 800264c:	0852      	lsrs	r2, r2, #1
 800264e:	3a01      	subs	r2, #1
 8002650:	0552      	lsls	r2, r2, #21
 8002652:	430a      	orrs	r2, r1
 8002654:	491f      	ldr	r1, [pc, #124]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	610b      	str	r3, [r1, #16]
 800265a:	e011      	b.n	8002680 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002664:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6892      	ldr	r2, [r2, #8]
 800266c:	0211      	lsls	r1, r2, #8
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6952      	ldr	r2, [r2, #20]
 8002672:	0852      	lsrs	r2, r2, #1
 8002674:	3a01      	subs	r2, #1
 8002676:	0652      	lsls	r2, r2, #25
 8002678:	430a      	orrs	r2, r1
 800267a:	4916      	ldr	r1, [pc, #88]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002680:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002686:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800268a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fb2e 	bl	8000cec <HAL_GetTick>
 8002690:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002692:	e009      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002694:	f7fe fb2a 	bl	8000cec <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d902      	bls.n	80026a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	73fb      	strb	r3, [r7, #15]
          break;
 80026a6:	e005      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ef      	beq.n	8002694 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	4904      	ldr	r1, [pc, #16]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000

080026d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026e6:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d018      	beq.n	8002724 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026f2:	4b67      	ldr	r3, [pc, #412]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 0203 	and.w	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d10d      	bne.n	800271e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
       ||
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800270a:	4b61      	ldr	r3, [pc, #388]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
       ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d047      	beq.n	80027ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	e044      	b.n	80027ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d018      	beq.n	800275e <RCCEx_PLLSAI2_Config+0x86>
 800272c:	2b03      	cmp	r3, #3
 800272e:	d825      	bhi.n	800277c <RCCEx_PLLSAI2_Config+0xa4>
 8002730:	2b01      	cmp	r3, #1
 8002732:	d002      	beq.n	800273a <RCCEx_PLLSAI2_Config+0x62>
 8002734:	2b02      	cmp	r3, #2
 8002736:	d009      	beq.n	800274c <RCCEx_PLLSAI2_Config+0x74>
 8002738:	e020      	b.n	800277c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800273a:	4b55      	ldr	r3, [pc, #340]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d11d      	bne.n	8002782 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274a:	e01a      	b.n	8002782 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800274c:	4b50      	ldr	r3, [pc, #320]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d116      	bne.n	8002786 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275c:	e013      	b.n	8002786 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800275e:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10f      	bne.n	800278a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800276a:	4b49      	ldr	r3, [pc, #292]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800277a:	e006      	b.n	800278a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      break;
 8002780:	e004      	b.n	800278c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002782:	bf00      	nop
 8002784:	e002      	b.n	800278c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002786:	bf00      	nop
 8002788:	e000      	b.n	800278c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800278a:	bf00      	nop
    }

    if(status == HAL_OK)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10d      	bne.n	80027ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002792:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6819      	ldr	r1, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	430b      	orrs	r3, r1
 80027a8:	4939      	ldr	r1, [pc, #228]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d167      	bne.n	8002884 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027b4:	4b36      	ldr	r3, [pc, #216]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a35      	ldr	r2, [pc, #212]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c0:	f7fe fa94 	bl	8000cec <HAL_GetTick>
 80027c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027c6:	e009      	b.n	80027dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027c8:	f7fe fa90 	bl	8000cec <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d902      	bls.n	80027dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	73fb      	strb	r3, [r7, #15]
        break;
 80027da:	e005      	b.n	80027e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027dc:	4b2c      	ldr	r3, [pc, #176]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ef      	bne.n	80027c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d14a      	bne.n	8002884 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d111      	bne.n	8002818 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6892      	ldr	r2, [r2, #8]
 8002804:	0211      	lsls	r1, r2, #8
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68d2      	ldr	r2, [r2, #12]
 800280a:	0912      	lsrs	r2, r2, #4
 800280c:	0452      	lsls	r2, r2, #17
 800280e:	430a      	orrs	r2, r1
 8002810:	491f      	ldr	r1, [pc, #124]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002812:	4313      	orrs	r3, r2
 8002814:	614b      	str	r3, [r1, #20]
 8002816:	e011      	b.n	800283c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002818:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002820:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6892      	ldr	r2, [r2, #8]
 8002828:	0211      	lsls	r1, r2, #8
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6912      	ldr	r2, [r2, #16]
 800282e:	0852      	lsrs	r2, r2, #1
 8002830:	3a01      	subs	r2, #1
 8002832:	0652      	lsls	r2, r2, #25
 8002834:	430a      	orrs	r2, r1
 8002836:	4916      	ldr	r1, [pc, #88]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002838:	4313      	orrs	r3, r2
 800283a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a13      	ldr	r2, [pc, #76]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002846:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe fa50 	bl	8000cec <HAL_GetTick>
 800284c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800284e:	e009      	b.n	8002864 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002850:	f7fe fa4c 	bl	8000cec <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d902      	bls.n	8002864 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	73fb      	strb	r3, [r7, #15]
          break;
 8002862:	e005      	b.n	8002870 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ef      	beq.n	8002850 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	4904      	ldr	r1, [pc, #16]	; (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002880:	4313      	orrs	r3, r2
 8002882:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000

08002894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e095      	b.n	80029d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d108      	bne.n	80028c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028b6:	d009      	beq.n	80028cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
 80028be:	e005      	b.n	80028cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe f836 	bl	8000958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002902:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800290c:	d902      	bls.n	8002914 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	e002      	b.n	800291a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002918:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002922:	d007      	beq.n	8002934 <HAL_SPI_Init+0xa0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800292c:	d002      	beq.n	8002934 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002976:	ea42 0103 	orr.w	r1, r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	0c1b      	lsrs	r3, r3, #16
 8002990:	f003 0204 	and.w	r2, r3, #4
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029b0:	ea42 0103 	orr.w	r1, r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b088      	sub	sp, #32
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_SPI_Transmit+0x22>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e158      	b.n	8002cae <HAL_SPI_Transmit+0x2d4>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a04:	f7fe f972 	bl	8000cec <HAL_GetTick>
 8002a08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d002      	beq.n	8002a20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a1e:	e13d      	b.n	8002c9c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_SPI_Transmit+0x52>
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a30:	e134      	b.n	8002c9c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2203      	movs	r2, #3
 8002a36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a7c:	d10f      	bne.n	8002a9e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d007      	beq.n	8002abc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ac4:	d94b      	bls.n	8002b5e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_SPI_Transmit+0xfa>
 8002ace:	8afb      	ldrh	r3, [r7, #22]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d13e      	bne.n	8002b52 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	881a      	ldrh	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	1c9a      	adds	r2, r3, #2
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002af8:	e02b      	b.n	8002b52 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d112      	bne.n	8002b2e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0c:	881a      	ldrh	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	1c9a      	adds	r2, r3, #2
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b2c:	e011      	b.n	8002b52 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b2e:	f7fe f8dd 	bl	8000cec <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d803      	bhi.n	8002b46 <HAL_SPI_Transmit+0x16c>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d102      	bne.n	8002b4c <HAL_SPI_Transmit+0x172>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b50:	e0a4      	b.n	8002c9c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ce      	bne.n	8002afa <HAL_SPI_Transmit+0x120>
 8002b5c:	e07c      	b.n	8002c58 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_SPI_Transmit+0x192>
 8002b66:	8afb      	ldrh	r3, [r7, #22]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d170      	bne.n	8002c4e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d912      	bls.n	8002b9c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	881a      	ldrh	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	1c9a      	adds	r2, r3, #2
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b02      	subs	r3, #2
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b9a:	e058      	b.n	8002c4e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	7812      	ldrb	r2, [r2, #0]
 8002ba8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002bc2:	e044      	b.n	8002c4e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d12b      	bne.n	8002c2a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d912      	bls.n	8002c02 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be0:	881a      	ldrh	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	1c9a      	adds	r2, r3, #2
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b02      	subs	r3, #2
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c00:	e025      	b.n	8002c4e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c28:	e011      	b.n	8002c4e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c2a:	f7fe f85f 	bl	8000cec <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d803      	bhi.n	8002c42 <HAL_SPI_Transmit+0x268>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d102      	bne.n	8002c48 <HAL_SPI_Transmit+0x26e>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c4c:	e026      	b.n	8002c9c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1b5      	bne.n	8002bc4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	6839      	ldr	r1, [r7, #0]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fce3 	bl	8003628 <SPI_EndRxTxTransaction>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e000      	b.n	8002c9c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002c9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002cac:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b088      	sub	sp, #32
 8002cba:	af02      	add	r7, sp, #8
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cd2:	d112      	bne.n	8002cfa <HAL_SPI_Receive+0x44>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10e      	bne.n	8002cfa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2204      	movs	r2, #4
 8002ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ce4:	88fa      	ldrh	r2, [r7, #6]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	4613      	mov	r3, r2
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f910 	bl	8002f16 <HAL_SPI_TransmitReceive>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	e109      	b.n	8002f0e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_SPI_Receive+0x52>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e102      	b.n	8002f0e <HAL_SPI_Receive+0x258>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d10:	f7fd ffec 	bl	8000cec <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d002      	beq.n	8002d28 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
 8002d24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d26:	e0e9      	b.n	8002efc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_SPI_Receive+0x7e>
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d38:	e0e0      	b.n	8002efc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	88fa      	ldrh	r2, [r7, #6]
 8002d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d84:	d908      	bls.n	8002d98 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	e007      	b.n	8002da8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002da6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db0:	d10f      	bne.n	8002dd2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dd0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d007      	beq.n	8002df0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002df8:	d867      	bhi.n	8002eca <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002dfa:	e030      	b.n	8002e5e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d117      	bne.n	8002e3a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f103 020c 	add.w	r2, r3, #12
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	7812      	ldrb	r2, [r2, #0]
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002e38:	e011      	b.n	8002e5e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e3a:	f7fd ff57 	bl	8000cec <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d803      	bhi.n	8002e52 <HAL_SPI_Receive+0x19c>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e50:	d102      	bne.n	8002e58 <HAL_SPI_Receive+0x1a2>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e5c:	e04e      	b.n	8002efc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1c8      	bne.n	8002dfc <HAL_SPI_Receive+0x146>
 8002e6a:	e034      	b.n	8002ed6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d115      	bne.n	8002ea6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	b292      	uxth	r2, r2
 8002e86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	1c9a      	adds	r2, r3, #2
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002ea4:	e011      	b.n	8002eca <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ea6:	f7fd ff21 	bl	8000cec <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d803      	bhi.n	8002ebe <HAL_SPI_Receive+0x208>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d102      	bne.n	8002ec4 <HAL_SPI_Receive+0x20e>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d102      	bne.n	8002eca <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ec8:	e018      	b.n	8002efc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1ca      	bne.n	8002e6c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	6839      	ldr	r1, [r7, #0]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fb4c 	bl	8003578 <SPI_EndRxTransaction>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	75fb      	strb	r3, [r7, #23]
 8002ef8:	e000      	b.n	8002efc <HAL_SPI_Receive+0x246>
  }

error :
 8002efa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b08a      	sub	sp, #40	; 0x28
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f24:	2301      	movs	r3, #1
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_SPI_TransmitReceive+0x26>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e1fb      	b.n	8003334 <HAL_SPI_TransmitReceive+0x41e>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f44:	f7fd fed2 	bl	8000cec <HAL_GetTick>
 8002f48:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f50:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f58:	887b      	ldrh	r3, [r7, #2]
 8002f5a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f60:	7efb      	ldrb	r3, [r7, #27]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d00e      	beq.n	8002f84 <HAL_SPI_TransmitReceive+0x6e>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f6c:	d106      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d102      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x66>
 8002f76:	7efb      	ldrb	r3, [r7, #27]
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d003      	beq.n	8002f84 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f82:	e1cd      	b.n	8003320 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_SPI_TransmitReceive+0x80>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_SPI_TransmitReceive+0x80>
 8002f90:	887b      	ldrh	r3, [r7, #2]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f9c:	e1c0      	b.n	8003320 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d003      	beq.n	8002fb2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2205      	movs	r2, #5
 8002fae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	887a      	ldrh	r2, [r7, #2]
 8002fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	887a      	ldrh	r2, [r7, #2]
 8002fca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	887a      	ldrh	r2, [r7, #2]
 8002fde:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ff4:	d802      	bhi.n	8002ffc <HAL_SPI_TransmitReceive+0xe6>
 8002ff6:	8a3b      	ldrh	r3, [r7, #16]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d908      	bls.n	800300e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	e007      	b.n	800301e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800301c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d007      	beq.n	800303c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800303a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003044:	d97c      	bls.n	8003140 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_SPI_TransmitReceive+0x13e>
 800304e:	8a7b      	ldrh	r3, [r7, #18]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d169      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	881a      	ldrh	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	1c9a      	adds	r2, r3, #2
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003078:	e056      	b.n	8003128 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b02      	cmp	r3, #2
 8003086:	d11b      	bne.n	80030c0 <HAL_SPI_TransmitReceive+0x1aa>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d016      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0x1aa>
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	2b01      	cmp	r3, #1
 8003096:	d113      	bne.n	80030c0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	881a      	ldrh	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	1c9a      	adds	r2, r3, #2
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d11c      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x1f2>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d016      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	b292      	uxth	r2, r2
 80030e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	1c9a      	adds	r2, r3, #2
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003104:	2301      	movs	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003108:	f7fd fdf0 	bl	8000cec <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003114:	429a      	cmp	r2, r3
 8003116:	d807      	bhi.n	8003128 <HAL_SPI_TransmitReceive+0x212>
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d003      	beq.n	8003128 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003126:	e0fb      	b.n	8003320 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1a3      	bne.n	800307a <HAL_SPI_TransmitReceive+0x164>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d19d      	bne.n	800307a <HAL_SPI_TransmitReceive+0x164>
 800313e:	e0df      	b.n	8003300 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_SPI_TransmitReceive+0x23a>
 8003148:	8a7b      	ldrh	r3, [r7, #18]
 800314a:	2b01      	cmp	r3, #1
 800314c:	f040 80cb 	bne.w	80032e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d912      	bls.n	8003180 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	881a      	ldrh	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	1c9a      	adds	r2, r3, #2
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b02      	subs	r3, #2
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800317e:	e0b2      	b.n	80032e6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	330c      	adds	r3, #12
 800318a:	7812      	ldrb	r2, [r2, #0]
 800318c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a6:	e09e      	b.n	80032e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d134      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x30a>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d02f      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x30a>
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d12c      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d912      	bls.n	80031f6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	881a      	ldrh	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	1c9a      	adds	r2, r3, #2
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b02      	subs	r3, #2
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031f4:	e012      	b.n	800321c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	330c      	adds	r3, #12
 8003200:	7812      	ldrb	r2, [r2, #0]
 8003202:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d148      	bne.n	80032c0 <HAL_SPI_TransmitReceive+0x3aa>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d042      	beq.n	80032c0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d923      	bls.n	800328e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	b292      	uxth	r2, r2
 8003252:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	1c9a      	adds	r2, r3, #2
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b02      	subs	r3, #2
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d81f      	bhi.n	80032bc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	e016      	b.n	80032bc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f103 020c 	add.w	r2, r3, #12
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	7812      	ldrb	r2, [r2, #0]
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032bc:	2301      	movs	r3, #1
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032c0:	f7fd fd14 	bl	8000cec <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d803      	bhi.n	80032d8 <HAL_SPI_TransmitReceive+0x3c2>
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d102      	bne.n	80032de <HAL_SPI_TransmitReceive+0x3c8>
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d103      	bne.n	80032e6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80032e4:	e01c      	b.n	8003320 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f47f af5b 	bne.w	80031a8 <HAL_SPI_TransmitReceive+0x292>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f47f af54 	bne.w	80031a8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f98f 	bl	8003628 <SPI_EndRxTxTransaction>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	661a      	str	r2, [r3, #96]	; 0x60
 800331c:	e000      	b.n	8003320 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800331e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003330:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003334:	4618      	mov	r0, r3
 8003336:	3728      	adds	r7, #40	; 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800334c:	f7fd fcce 	bl	8000cec <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	4413      	add	r3, r2
 800335a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800335c:	f7fd fcc6 	bl	8000cec <HAL_GetTick>
 8003360:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003362:	4b39      	ldr	r3, [pc, #228]	; (8003448 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	015b      	lsls	r3, r3, #5
 8003368:	0d1b      	lsrs	r3, r3, #20
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	fb02 f303 	mul.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003372:	e054      	b.n	800341e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d050      	beq.n	800341e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800337c:	f7fd fcb6 	bl	8000cec <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	429a      	cmp	r2, r3
 800338a:	d902      	bls.n	8003392 <SPI_WaitFlagStateUntilTimeout+0x56>
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d13d      	bne.n	800340e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033aa:	d111      	bne.n	80033d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b4:	d004      	beq.n	80033c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033be:	d107      	bne.n	80033d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d8:	d10f      	bne.n	80033fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e017      	b.n	800343e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3b01      	subs	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4013      	ands	r3, r2
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	429a      	cmp	r2, r3
 800343a:	d19b      	bne.n	8003374 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000000 	.word	0x20000000

0800344c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800345e:	f7fd fc45 	bl	8000cec <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	4413      	add	r3, r2
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800346e:	f7fd fc3d 	bl	8000cec <HAL_GetTick>
 8003472:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800347c:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	00da      	lsls	r2, r3, #3
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	0d1b      	lsrs	r3, r3, #20
 800348c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003494:	e060      	b.n	8003558 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800349c:	d107      	bne.n	80034ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d104      	bne.n	80034ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d050      	beq.n	8003558 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034b6:	f7fd fc19 	bl	8000cec <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d902      	bls.n	80034cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d13d      	bne.n	8003548 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e4:	d111      	bne.n	800350a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ee:	d004      	beq.n	80034fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f8:	d107      	bne.n	800350a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003508:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003512:	d10f      	bne.n	8003534 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003532:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e010      	b.n	800356a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	3b01      	subs	r3, #1
 8003556:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d196      	bne.n	8003496 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3728      	adds	r7, #40	; 0x28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000000 	.word	0x20000000

08003578 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800358c:	d111      	bne.n	80035b2 <SPI_EndRxTransaction+0x3a>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003596:	d004      	beq.n	80035a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a0:	d107      	bne.n	80035b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2200      	movs	r2, #0
 80035ba:	2180      	movs	r1, #128	; 0x80
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff febd 	bl	800333c <SPI_WaitFlagStateUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e023      	b.n	8003620 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035e0:	d11d      	bne.n	800361e <SPI_EndRxTransaction+0xa6>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ea:	d004      	beq.n	80035f6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f4:	d113      	bne.n	800361e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7ff ff22 	bl	800344c <SPI_WaitFifoStateUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003612:	f043 0220 	orr.w	r2, r3, #32
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e000      	b.n	8003620 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2200      	movs	r2, #0
 800363c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f7ff ff03 	bl	800344c <SPI_WaitFifoStateUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003650:	f043 0220 	orr.w	r2, r3, #32
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e027      	b.n	80036ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2200      	movs	r2, #0
 8003664:	2180      	movs	r1, #128	; 0x80
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f7ff fe68 	bl	800333c <SPI_WaitFlagStateUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e014      	b.n	80036ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2200      	movs	r2, #0
 800368a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff fedc 	bl	800344c <SPI_WaitFifoStateUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369e:	f043 0220 	orr.w	r2, r3, #32
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e000      	b.n	80036ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e040      	b.n	8003748 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd f980 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	; 0x24
 80036e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8c0 	bl	8003878 <UART_SetConfig>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e022      	b.n	8003748 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fb6c 	bl	8003de8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800371e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800372e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fbf3 	bl	8003f2c <UART_CheckIdleState>
 8003746:	4603      	mov	r3, r0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	; 0x28
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003764:	2b20      	cmp	r3, #32
 8003766:	f040 8082 	bne.w	800386e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_UART_Transmit+0x26>
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e07a      	b.n	8003870 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_UART_Transmit+0x38>
 8003784:	2302      	movs	r3, #2
 8003786:	e073      	b.n	8003870 <HAL_UART_Transmit+0x120>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2221      	movs	r2, #33	; 0x21
 800379c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800379e:	f7fd faa5 	bl	8000cec <HAL_GetTick>
 80037a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	88fa      	ldrh	r2, [r7, #6]
 80037b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037bc:	d108      	bne.n	80037d0 <HAL_UART_Transmit+0x80>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d104      	bne.n	80037d0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	e003      	b.n	80037d8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80037e0:	e02d      	b.n	800383e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2200      	movs	r2, #0
 80037ea:	2180      	movs	r1, #128	; 0x80
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fbe6 	bl	8003fbe <UART_WaitOnFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e039      	b.n	8003870 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10b      	bne.n	800381a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	881a      	ldrh	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800380e:	b292      	uxth	r2, r2
 8003810:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	3302      	adds	r3, #2
 8003816:	61bb      	str	r3, [r7, #24]
 8003818:	e008      	b.n	800382c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	781a      	ldrb	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	b292      	uxth	r2, r2
 8003824:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3301      	adds	r3, #1
 800382a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1cb      	bne.n	80037e2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2200      	movs	r2, #0
 8003852:	2140      	movs	r1, #64	; 0x40
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fbb2 	bl	8003fbe <UART_WaitOnFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e005      	b.n	8003870 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	e000      	b.n	8003870 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800386e:	2302      	movs	r3, #2
  }
}
 8003870:	4618      	mov	r0, r3
 8003872:	3720      	adds	r7, #32
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800387c:	b08a      	sub	sp, #40	; 0x28
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	431a      	orrs	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	431a      	orrs	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	4313      	orrs	r3, r2
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4ba4      	ldr	r3, [pc, #656]	; (8003b38 <UART_SetConfig+0x2c0>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038b0:	430b      	orrs	r3, r1
 80038b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a99      	ldr	r2, [pc, #612]	; (8003b3c <UART_SetConfig+0x2c4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	4313      	orrs	r3, r2
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f4:	430a      	orrs	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a90      	ldr	r2, [pc, #576]	; (8003b40 <UART_SetConfig+0x2c8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d126      	bne.n	8003950 <UART_SetConfig+0xd8>
 8003902:	4b90      	ldr	r3, [pc, #576]	; (8003b44 <UART_SetConfig+0x2cc>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	2b03      	cmp	r3, #3
 800390e:	d81b      	bhi.n	8003948 <UART_SetConfig+0xd0>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <UART_SetConfig+0xa0>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	08003929 	.word	0x08003929
 800391c:	08003939 	.word	0x08003939
 8003920:	08003931 	.word	0x08003931
 8003924:	08003941 	.word	0x08003941
 8003928:	2301      	movs	r3, #1
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392e:	e116      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003930:	2302      	movs	r3, #2
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003936:	e112      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003938:	2304      	movs	r3, #4
 800393a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393e:	e10e      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003940:	2308      	movs	r3, #8
 8003942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003946:	e10a      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003948:	2310      	movs	r3, #16
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394e:	e106      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a7c      	ldr	r2, [pc, #496]	; (8003b48 <UART_SetConfig+0x2d0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d138      	bne.n	80039cc <UART_SetConfig+0x154>
 800395a:	4b7a      	ldr	r3, [pc, #488]	; (8003b44 <UART_SetConfig+0x2cc>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b0c      	cmp	r3, #12
 8003966:	d82d      	bhi.n	80039c4 <UART_SetConfig+0x14c>
 8003968:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <UART_SetConfig+0xf8>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	080039a5 	.word	0x080039a5
 8003974:	080039c5 	.word	0x080039c5
 8003978:	080039c5 	.word	0x080039c5
 800397c:	080039c5 	.word	0x080039c5
 8003980:	080039b5 	.word	0x080039b5
 8003984:	080039c5 	.word	0x080039c5
 8003988:	080039c5 	.word	0x080039c5
 800398c:	080039c5 	.word	0x080039c5
 8003990:	080039ad 	.word	0x080039ad
 8003994:	080039c5 	.word	0x080039c5
 8003998:	080039c5 	.word	0x080039c5
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	080039bd 	.word	0x080039bd
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039aa:	e0d8      	b.n	8003b5e <UART_SetConfig+0x2e6>
 80039ac:	2302      	movs	r3, #2
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b2:	e0d4      	b.n	8003b5e <UART_SetConfig+0x2e6>
 80039b4:	2304      	movs	r3, #4
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ba:	e0d0      	b.n	8003b5e <UART_SetConfig+0x2e6>
 80039bc:	2308      	movs	r3, #8
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c2:	e0cc      	b.n	8003b5e <UART_SetConfig+0x2e6>
 80039c4:	2310      	movs	r3, #16
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ca:	e0c8      	b.n	8003b5e <UART_SetConfig+0x2e6>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a5e      	ldr	r2, [pc, #376]	; (8003b4c <UART_SetConfig+0x2d4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d125      	bne.n	8003a22 <UART_SetConfig+0x1aa>
 80039d6:	4b5b      	ldr	r3, [pc, #364]	; (8003b44 <UART_SetConfig+0x2cc>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039e0:	2b30      	cmp	r3, #48	; 0x30
 80039e2:	d016      	beq.n	8003a12 <UART_SetConfig+0x19a>
 80039e4:	2b30      	cmp	r3, #48	; 0x30
 80039e6:	d818      	bhi.n	8003a1a <UART_SetConfig+0x1a2>
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d00a      	beq.n	8003a02 <UART_SetConfig+0x18a>
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d814      	bhi.n	8003a1a <UART_SetConfig+0x1a2>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <UART_SetConfig+0x182>
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d008      	beq.n	8003a0a <UART_SetConfig+0x192>
 80039f8:	e00f      	b.n	8003a1a <UART_SetConfig+0x1a2>
 80039fa:	2300      	movs	r3, #0
 80039fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a00:	e0ad      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003a02:	2302      	movs	r3, #2
 8003a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a08:	e0a9      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a10:	e0a5      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003a12:	2308      	movs	r3, #8
 8003a14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a18:	e0a1      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a20:	e09d      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a4a      	ldr	r2, [pc, #296]	; (8003b50 <UART_SetConfig+0x2d8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d125      	bne.n	8003a78 <UART_SetConfig+0x200>
 8003a2c:	4b45      	ldr	r3, [pc, #276]	; (8003b44 <UART_SetConfig+0x2cc>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a36:	2bc0      	cmp	r3, #192	; 0xc0
 8003a38:	d016      	beq.n	8003a68 <UART_SetConfig+0x1f0>
 8003a3a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a3c:	d818      	bhi.n	8003a70 <UART_SetConfig+0x1f8>
 8003a3e:	2b80      	cmp	r3, #128	; 0x80
 8003a40:	d00a      	beq.n	8003a58 <UART_SetConfig+0x1e0>
 8003a42:	2b80      	cmp	r3, #128	; 0x80
 8003a44:	d814      	bhi.n	8003a70 <UART_SetConfig+0x1f8>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <UART_SetConfig+0x1d8>
 8003a4a:	2b40      	cmp	r3, #64	; 0x40
 8003a4c:	d008      	beq.n	8003a60 <UART_SetConfig+0x1e8>
 8003a4e:	e00f      	b.n	8003a70 <UART_SetConfig+0x1f8>
 8003a50:	2300      	movs	r3, #0
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a56:	e082      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5e:	e07e      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003a60:	2304      	movs	r3, #4
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a66:	e07a      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003a68:	2308      	movs	r3, #8
 8003a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6e:	e076      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003a70:	2310      	movs	r3, #16
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a76:	e072      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a35      	ldr	r2, [pc, #212]	; (8003b54 <UART_SetConfig+0x2dc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d12a      	bne.n	8003ad8 <UART_SetConfig+0x260>
 8003a82:	4b30      	ldr	r3, [pc, #192]	; (8003b44 <UART_SetConfig+0x2cc>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a90:	d01a      	beq.n	8003ac8 <UART_SetConfig+0x250>
 8003a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a96:	d81b      	bhi.n	8003ad0 <UART_SetConfig+0x258>
 8003a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a9c:	d00c      	beq.n	8003ab8 <UART_SetConfig+0x240>
 8003a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa2:	d815      	bhi.n	8003ad0 <UART_SetConfig+0x258>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <UART_SetConfig+0x238>
 8003aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aac:	d008      	beq.n	8003ac0 <UART_SetConfig+0x248>
 8003aae:	e00f      	b.n	8003ad0 <UART_SetConfig+0x258>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab6:	e052      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003abe:	e04e      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac6:	e04a      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003ac8:	2308      	movs	r3, #8
 8003aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ace:	e046      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad6:	e042      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a17      	ldr	r2, [pc, #92]	; (8003b3c <UART_SetConfig+0x2c4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d13a      	bne.n	8003b58 <UART_SetConfig+0x2e0>
 8003ae2:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <UART_SetConfig+0x2cc>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003aec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003af0:	d01a      	beq.n	8003b28 <UART_SetConfig+0x2b0>
 8003af2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003af6:	d81b      	bhi.n	8003b30 <UART_SetConfig+0x2b8>
 8003af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003afc:	d00c      	beq.n	8003b18 <UART_SetConfig+0x2a0>
 8003afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b02:	d815      	bhi.n	8003b30 <UART_SetConfig+0x2b8>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <UART_SetConfig+0x298>
 8003b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0c:	d008      	beq.n	8003b20 <UART_SetConfig+0x2a8>
 8003b0e:	e00f      	b.n	8003b30 <UART_SetConfig+0x2b8>
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b16:	e022      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1e:	e01e      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003b20:	2304      	movs	r3, #4
 8003b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b26:	e01a      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003b28:	2308      	movs	r3, #8
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2e:	e016      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003b30:	2310      	movs	r3, #16
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b36:	e012      	b.n	8003b5e <UART_SetConfig+0x2e6>
 8003b38:	efff69f3 	.word	0xefff69f3
 8003b3c:	40008000 	.word	0x40008000
 8003b40:	40013800 	.word	0x40013800
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40004400 	.word	0x40004400
 8003b4c:	40004800 	.word	0x40004800
 8003b50:	40004c00 	.word	0x40004c00
 8003b54:	40005000 	.word	0x40005000
 8003b58:	2310      	movs	r3, #16
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a9f      	ldr	r2, [pc, #636]	; (8003de0 <UART_SetConfig+0x568>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d17a      	bne.n	8003c5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d824      	bhi.n	8003bba <UART_SetConfig+0x342>
 8003b70:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <UART_SetConfig+0x300>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003b9d 	.word	0x08003b9d
 8003b7c:	08003bbb 	.word	0x08003bbb
 8003b80:	08003ba5 	.word	0x08003ba5
 8003b84:	08003bbb 	.word	0x08003bbb
 8003b88:	08003bab 	.word	0x08003bab
 8003b8c:	08003bbb 	.word	0x08003bbb
 8003b90:	08003bbb 	.word	0x08003bbb
 8003b94:	08003bbb 	.word	0x08003bbb
 8003b98:	08003bb3 	.word	0x08003bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b9c:	f7fe f932 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8003ba0:	61f8      	str	r0, [r7, #28]
        break;
 8003ba2:	e010      	b.n	8003bc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ba4:	4b8f      	ldr	r3, [pc, #572]	; (8003de4 <UART_SetConfig+0x56c>)
 8003ba6:	61fb      	str	r3, [r7, #28]
        break;
 8003ba8:	e00d      	b.n	8003bc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003baa:	f7fe f893 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8003bae:	61f8      	str	r0, [r7, #28]
        break;
 8003bb0:	e009      	b.n	8003bc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bb6:	61fb      	str	r3, [r7, #28]
        break;
 8003bb8:	e005      	b.n	8003bc6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80fb 	beq.w	8003dc4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d305      	bcc.n	8003bea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d903      	bls.n	8003bf2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bf0:	e0e8      	b.n	8003dc4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	461c      	mov	r4, r3
 8003bf8:	4615      	mov	r5, r2
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	022b      	lsls	r3, r5, #8
 8003c04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c08:	0222      	lsls	r2, r4, #8
 8003c0a:	68f9      	ldr	r1, [r7, #12]
 8003c0c:	6849      	ldr	r1, [r1, #4]
 8003c0e:	0849      	lsrs	r1, r1, #1
 8003c10:	2000      	movs	r0, #0
 8003c12:	4688      	mov	r8, r1
 8003c14:	4681      	mov	r9, r0
 8003c16:	eb12 0a08 	adds.w	sl, r2, r8
 8003c1a:	eb43 0b09 	adc.w	fp, r3, r9
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c2c:	4650      	mov	r0, sl
 8003c2e:	4659      	mov	r1, fp
 8003c30:	f7fc fb26 	bl	8000280 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4613      	mov	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c42:	d308      	bcc.n	8003c56 <UART_SetConfig+0x3de>
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c4a:	d204      	bcs.n	8003c56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	60da      	str	r2, [r3, #12]
 8003c54:	e0b6      	b.n	8003dc4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c5c:	e0b2      	b.n	8003dc4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c66:	d15e      	bne.n	8003d26 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d828      	bhi.n	8003cc2 <UART_SetConfig+0x44a>
 8003c70:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <UART_SetConfig+0x400>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	08003ca5 	.word	0x08003ca5
 8003c80:	08003cad 	.word	0x08003cad
 8003c84:	08003cc3 	.word	0x08003cc3
 8003c88:	08003cb3 	.word	0x08003cb3
 8003c8c:	08003cc3 	.word	0x08003cc3
 8003c90:	08003cc3 	.word	0x08003cc3
 8003c94:	08003cc3 	.word	0x08003cc3
 8003c98:	08003cbb 	.word	0x08003cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f7fe f8b2 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8003ca0:	61f8      	str	r0, [r7, #28]
        break;
 8003ca2:	e014      	b.n	8003cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca4:	f7fe f8c4 	bl	8001e30 <HAL_RCC_GetPCLK2Freq>
 8003ca8:	61f8      	str	r0, [r7, #28]
        break;
 8003caa:	e010      	b.n	8003cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cac:	4b4d      	ldr	r3, [pc, #308]	; (8003de4 <UART_SetConfig+0x56c>)
 8003cae:	61fb      	str	r3, [r7, #28]
        break;
 8003cb0:	e00d      	b.n	8003cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb2:	f7fe f80f 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8003cb6:	61f8      	str	r0, [r7, #28]
        break;
 8003cb8:	e009      	b.n	8003cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cbe:	61fb      	str	r3, [r7, #28]
        break;
 8003cc0:	e005      	b.n	8003cce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d077      	beq.n	8003dc4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	005a      	lsls	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	441a      	add	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b0f      	cmp	r3, #15
 8003cee:	d916      	bls.n	8003d1e <UART_SetConfig+0x4a6>
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf6:	d212      	bcs.n	8003d1e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f023 030f 	bic.w	r3, r3, #15
 8003d00:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	8afb      	ldrh	r3, [r7, #22]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	8afa      	ldrh	r2, [r7, #22]
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	e052      	b.n	8003dc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d24:	e04e      	b.n	8003dc4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d827      	bhi.n	8003d7e <UART_SetConfig+0x506>
 8003d2e:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <UART_SetConfig+0x4bc>)
 8003d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d61 	.word	0x08003d61
 8003d3c:	08003d69 	.word	0x08003d69
 8003d40:	08003d7f 	.word	0x08003d7f
 8003d44:	08003d6f 	.word	0x08003d6f
 8003d48:	08003d7f 	.word	0x08003d7f
 8003d4c:	08003d7f 	.word	0x08003d7f
 8003d50:	08003d7f 	.word	0x08003d7f
 8003d54:	08003d77 	.word	0x08003d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d58:	f7fe f854 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8003d5c:	61f8      	str	r0, [r7, #28]
        break;
 8003d5e:	e014      	b.n	8003d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d60:	f7fe f866 	bl	8001e30 <HAL_RCC_GetPCLK2Freq>
 8003d64:	61f8      	str	r0, [r7, #28]
        break;
 8003d66:	e010      	b.n	8003d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d68:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <UART_SetConfig+0x56c>)
 8003d6a:	61fb      	str	r3, [r7, #28]
        break;
 8003d6c:	e00d      	b.n	8003d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6e:	f7fd ffb1 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8003d72:	61f8      	str	r0, [r7, #28]
        break;
 8003d74:	e009      	b.n	8003d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d7a:	61fb      	str	r3, [r7, #28]
        break;
 8003d7c:	e005      	b.n	8003d8a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d88:	bf00      	nop
    }

    if (pclk != 0U)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d019      	beq.n	8003dc4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	085a      	lsrs	r2, r3, #1
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	441a      	add	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b0f      	cmp	r3, #15
 8003da8:	d909      	bls.n	8003dbe <UART_SetConfig+0x546>
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db0:	d205      	bcs.n	8003dbe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60da      	str	r2, [r3, #12]
 8003dbc:	e002      	b.n	8003dc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003dd0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3728      	adds	r7, #40	; 0x28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dde:	bf00      	nop
 8003de0:	40008000 	.word	0x40008000
 8003de4:	00f42400 	.word	0x00f42400

08003de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01a      	beq.n	8003efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee6:	d10a      	bne.n	8003efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]
  }
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f3c:	f7fc fed6 	bl	8000cec <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d10e      	bne.n	8003f6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f82d 	bl	8003fbe <UART_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e023      	b.n	8003fb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d10e      	bne.n	8003f9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f817 	bl	8003fbe <UART_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e00d      	b.n	8003fb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b09c      	sub	sp, #112	; 0x70
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fce:	e0a5      	b.n	800411c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	f000 80a1 	beq.w	800411c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fda:	f7fc fe87 	bl	8000cec <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d302      	bcc.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d13e      	bne.n	800406e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004000:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004004:	667b      	str	r3, [r7, #100]	; 0x64
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800400e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004010:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004014:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800401c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e6      	bne.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	663b      	str	r3, [r7, #96]	; 0x60
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004042:	64ba      	str	r2, [r7, #72]	; 0x48
 8004044:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e5      	bne.n	8004022 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e067      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d04f      	beq.n	800411c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408a:	d147      	bne.n	800411c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004094:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
 80040b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e6      	bne.n	8004096 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3308      	adds	r3, #8
 80040ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	613b      	str	r3, [r7, #16]
   return(result);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	66bb      	str	r3, [r7, #104]	; 0x68
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3308      	adds	r3, #8
 80040e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040e8:	623a      	str	r2, [r7, #32]
 80040ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	69f9      	ldr	r1, [r7, #28]
 80040ee:	6a3a      	ldr	r2, [r7, #32]
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e5      	bne.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e010      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4013      	ands	r3, r2
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	429a      	cmp	r2, r3
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	429a      	cmp	r2, r3
 8004138:	f43f af4a 	beq.w	8003fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3770      	adds	r7, #112	; 0x70
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <__errno>:
 8004148:	4b01      	ldr	r3, [pc, #4]	; (8004150 <__errno+0x8>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	2000000c 	.word	0x2000000c

08004154 <__libc_init_array>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4d0d      	ldr	r5, [pc, #52]	; (800418c <__libc_init_array+0x38>)
 8004158:	4c0d      	ldr	r4, [pc, #52]	; (8004190 <__libc_init_array+0x3c>)
 800415a:	1b64      	subs	r4, r4, r5
 800415c:	10a4      	asrs	r4, r4, #2
 800415e:	2600      	movs	r6, #0
 8004160:	42a6      	cmp	r6, r4
 8004162:	d109      	bne.n	8004178 <__libc_init_array+0x24>
 8004164:	4d0b      	ldr	r5, [pc, #44]	; (8004194 <__libc_init_array+0x40>)
 8004166:	4c0c      	ldr	r4, [pc, #48]	; (8004198 <__libc_init_array+0x44>)
 8004168:	f000 fc8e 	bl	8004a88 <_init>
 800416c:	1b64      	subs	r4, r4, r5
 800416e:	10a4      	asrs	r4, r4, #2
 8004170:	2600      	movs	r6, #0
 8004172:	42a6      	cmp	r6, r4
 8004174:	d105      	bne.n	8004182 <__libc_init_array+0x2e>
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	f855 3b04 	ldr.w	r3, [r5], #4
 800417c:	4798      	blx	r3
 800417e:	3601      	adds	r6, #1
 8004180:	e7ee      	b.n	8004160 <__libc_init_array+0xc>
 8004182:	f855 3b04 	ldr.w	r3, [r5], #4
 8004186:	4798      	blx	r3
 8004188:	3601      	adds	r6, #1
 800418a:	e7f2      	b.n	8004172 <__libc_init_array+0x1e>
 800418c:	08004b3c 	.word	0x08004b3c
 8004190:	08004b3c 	.word	0x08004b3c
 8004194:	08004b3c 	.word	0x08004b3c
 8004198:	08004b40 	.word	0x08004b40

0800419c <memset>:
 800419c:	4402      	add	r2, r0
 800419e:	4603      	mov	r3, r0
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d100      	bne.n	80041a6 <memset+0xa>
 80041a4:	4770      	bx	lr
 80041a6:	f803 1b01 	strb.w	r1, [r3], #1
 80041aa:	e7f9      	b.n	80041a0 <memset+0x4>

080041ac <siprintf>:
 80041ac:	b40e      	push	{r1, r2, r3}
 80041ae:	b500      	push	{lr}
 80041b0:	b09c      	sub	sp, #112	; 0x70
 80041b2:	ab1d      	add	r3, sp, #116	; 0x74
 80041b4:	9002      	str	r0, [sp, #8]
 80041b6:	9006      	str	r0, [sp, #24]
 80041b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041bc:	4809      	ldr	r0, [pc, #36]	; (80041e4 <siprintf+0x38>)
 80041be:	9107      	str	r1, [sp, #28]
 80041c0:	9104      	str	r1, [sp, #16]
 80041c2:	4909      	ldr	r1, [pc, #36]	; (80041e8 <siprintf+0x3c>)
 80041c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041c8:	9105      	str	r1, [sp, #20]
 80041ca:	6800      	ldr	r0, [r0, #0]
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	a902      	add	r1, sp, #8
 80041d0:	f000 f868 	bl	80042a4 <_svfiprintf_r>
 80041d4:	9b02      	ldr	r3, [sp, #8]
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	b01c      	add	sp, #112	; 0x70
 80041dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80041e0:	b003      	add	sp, #12
 80041e2:	4770      	bx	lr
 80041e4:	2000000c 	.word	0x2000000c
 80041e8:	ffff0208 	.word	0xffff0208

080041ec <__ssputs_r>:
 80041ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f0:	688e      	ldr	r6, [r1, #8]
 80041f2:	429e      	cmp	r6, r3
 80041f4:	4682      	mov	sl, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	4690      	mov	r8, r2
 80041fa:	461f      	mov	r7, r3
 80041fc:	d838      	bhi.n	8004270 <__ssputs_r+0x84>
 80041fe:	898a      	ldrh	r2, [r1, #12]
 8004200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004204:	d032      	beq.n	800426c <__ssputs_r+0x80>
 8004206:	6825      	ldr	r5, [r4, #0]
 8004208:	6909      	ldr	r1, [r1, #16]
 800420a:	eba5 0901 	sub.w	r9, r5, r1
 800420e:	6965      	ldr	r5, [r4, #20]
 8004210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004218:	3301      	adds	r3, #1
 800421a:	444b      	add	r3, r9
 800421c:	106d      	asrs	r5, r5, #1
 800421e:	429d      	cmp	r5, r3
 8004220:	bf38      	it	cc
 8004222:	461d      	movcc	r5, r3
 8004224:	0553      	lsls	r3, r2, #21
 8004226:	d531      	bpl.n	800428c <__ssputs_r+0xa0>
 8004228:	4629      	mov	r1, r5
 800422a:	f000 fb63 	bl	80048f4 <_malloc_r>
 800422e:	4606      	mov	r6, r0
 8004230:	b950      	cbnz	r0, 8004248 <__ssputs_r+0x5c>
 8004232:	230c      	movs	r3, #12
 8004234:	f8ca 3000 	str.w	r3, [sl]
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423e:	81a3      	strh	r3, [r4, #12]
 8004240:	f04f 30ff 	mov.w	r0, #4294967295
 8004244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004248:	6921      	ldr	r1, [r4, #16]
 800424a:	464a      	mov	r2, r9
 800424c:	f000 fabe 	bl	80047cc <memcpy>
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425a:	81a3      	strh	r3, [r4, #12]
 800425c:	6126      	str	r6, [r4, #16]
 800425e:	6165      	str	r5, [r4, #20]
 8004260:	444e      	add	r6, r9
 8004262:	eba5 0509 	sub.w	r5, r5, r9
 8004266:	6026      	str	r6, [r4, #0]
 8004268:	60a5      	str	r5, [r4, #8]
 800426a:	463e      	mov	r6, r7
 800426c:	42be      	cmp	r6, r7
 800426e:	d900      	bls.n	8004272 <__ssputs_r+0x86>
 8004270:	463e      	mov	r6, r7
 8004272:	6820      	ldr	r0, [r4, #0]
 8004274:	4632      	mov	r2, r6
 8004276:	4641      	mov	r1, r8
 8004278:	f000 fab6 	bl	80047e8 <memmove>
 800427c:	68a3      	ldr	r3, [r4, #8]
 800427e:	1b9b      	subs	r3, r3, r6
 8004280:	60a3      	str	r3, [r4, #8]
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	4433      	add	r3, r6
 8004286:	6023      	str	r3, [r4, #0]
 8004288:	2000      	movs	r0, #0
 800428a:	e7db      	b.n	8004244 <__ssputs_r+0x58>
 800428c:	462a      	mov	r2, r5
 800428e:	f000 fba5 	bl	80049dc <_realloc_r>
 8004292:	4606      	mov	r6, r0
 8004294:	2800      	cmp	r0, #0
 8004296:	d1e1      	bne.n	800425c <__ssputs_r+0x70>
 8004298:	6921      	ldr	r1, [r4, #16]
 800429a:	4650      	mov	r0, sl
 800429c:	f000 fabe 	bl	800481c <_free_r>
 80042a0:	e7c7      	b.n	8004232 <__ssputs_r+0x46>
	...

080042a4 <_svfiprintf_r>:
 80042a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a8:	4698      	mov	r8, r3
 80042aa:	898b      	ldrh	r3, [r1, #12]
 80042ac:	061b      	lsls	r3, r3, #24
 80042ae:	b09d      	sub	sp, #116	; 0x74
 80042b0:	4607      	mov	r7, r0
 80042b2:	460d      	mov	r5, r1
 80042b4:	4614      	mov	r4, r2
 80042b6:	d50e      	bpl.n	80042d6 <_svfiprintf_r+0x32>
 80042b8:	690b      	ldr	r3, [r1, #16]
 80042ba:	b963      	cbnz	r3, 80042d6 <_svfiprintf_r+0x32>
 80042bc:	2140      	movs	r1, #64	; 0x40
 80042be:	f000 fb19 	bl	80048f4 <_malloc_r>
 80042c2:	6028      	str	r0, [r5, #0]
 80042c4:	6128      	str	r0, [r5, #16]
 80042c6:	b920      	cbnz	r0, 80042d2 <_svfiprintf_r+0x2e>
 80042c8:	230c      	movs	r3, #12
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	e0d1      	b.n	8004476 <_svfiprintf_r+0x1d2>
 80042d2:	2340      	movs	r3, #64	; 0x40
 80042d4:	616b      	str	r3, [r5, #20]
 80042d6:	2300      	movs	r3, #0
 80042d8:	9309      	str	r3, [sp, #36]	; 0x24
 80042da:	2320      	movs	r3, #32
 80042dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80042e4:	2330      	movs	r3, #48	; 0x30
 80042e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004490 <_svfiprintf_r+0x1ec>
 80042ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042ee:	f04f 0901 	mov.w	r9, #1
 80042f2:	4623      	mov	r3, r4
 80042f4:	469a      	mov	sl, r3
 80042f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042fa:	b10a      	cbz	r2, 8004300 <_svfiprintf_r+0x5c>
 80042fc:	2a25      	cmp	r2, #37	; 0x25
 80042fe:	d1f9      	bne.n	80042f4 <_svfiprintf_r+0x50>
 8004300:	ebba 0b04 	subs.w	fp, sl, r4
 8004304:	d00b      	beq.n	800431e <_svfiprintf_r+0x7a>
 8004306:	465b      	mov	r3, fp
 8004308:	4622      	mov	r2, r4
 800430a:	4629      	mov	r1, r5
 800430c:	4638      	mov	r0, r7
 800430e:	f7ff ff6d 	bl	80041ec <__ssputs_r>
 8004312:	3001      	adds	r0, #1
 8004314:	f000 80aa 	beq.w	800446c <_svfiprintf_r+0x1c8>
 8004318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800431a:	445a      	add	r2, fp
 800431c:	9209      	str	r2, [sp, #36]	; 0x24
 800431e:	f89a 3000 	ldrb.w	r3, [sl]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80a2 	beq.w	800446c <_svfiprintf_r+0x1c8>
 8004328:	2300      	movs	r3, #0
 800432a:	f04f 32ff 	mov.w	r2, #4294967295
 800432e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004332:	f10a 0a01 	add.w	sl, sl, #1
 8004336:	9304      	str	r3, [sp, #16]
 8004338:	9307      	str	r3, [sp, #28]
 800433a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800433e:	931a      	str	r3, [sp, #104]	; 0x68
 8004340:	4654      	mov	r4, sl
 8004342:	2205      	movs	r2, #5
 8004344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004348:	4851      	ldr	r0, [pc, #324]	; (8004490 <_svfiprintf_r+0x1ec>)
 800434a:	f7fb ff49 	bl	80001e0 <memchr>
 800434e:	9a04      	ldr	r2, [sp, #16]
 8004350:	b9d8      	cbnz	r0, 800438a <_svfiprintf_r+0xe6>
 8004352:	06d0      	lsls	r0, r2, #27
 8004354:	bf44      	itt	mi
 8004356:	2320      	movmi	r3, #32
 8004358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800435c:	0711      	lsls	r1, r2, #28
 800435e:	bf44      	itt	mi
 8004360:	232b      	movmi	r3, #43	; 0x2b
 8004362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004366:	f89a 3000 	ldrb.w	r3, [sl]
 800436a:	2b2a      	cmp	r3, #42	; 0x2a
 800436c:	d015      	beq.n	800439a <_svfiprintf_r+0xf6>
 800436e:	9a07      	ldr	r2, [sp, #28]
 8004370:	4654      	mov	r4, sl
 8004372:	2000      	movs	r0, #0
 8004374:	f04f 0c0a 	mov.w	ip, #10
 8004378:	4621      	mov	r1, r4
 800437a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800437e:	3b30      	subs	r3, #48	; 0x30
 8004380:	2b09      	cmp	r3, #9
 8004382:	d94e      	bls.n	8004422 <_svfiprintf_r+0x17e>
 8004384:	b1b0      	cbz	r0, 80043b4 <_svfiprintf_r+0x110>
 8004386:	9207      	str	r2, [sp, #28]
 8004388:	e014      	b.n	80043b4 <_svfiprintf_r+0x110>
 800438a:	eba0 0308 	sub.w	r3, r0, r8
 800438e:	fa09 f303 	lsl.w	r3, r9, r3
 8004392:	4313      	orrs	r3, r2
 8004394:	9304      	str	r3, [sp, #16]
 8004396:	46a2      	mov	sl, r4
 8004398:	e7d2      	b.n	8004340 <_svfiprintf_r+0x9c>
 800439a:	9b03      	ldr	r3, [sp, #12]
 800439c:	1d19      	adds	r1, r3, #4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	9103      	str	r1, [sp, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bfbb      	ittet	lt
 80043a6:	425b      	neglt	r3, r3
 80043a8:	f042 0202 	orrlt.w	r2, r2, #2
 80043ac:	9307      	strge	r3, [sp, #28]
 80043ae:	9307      	strlt	r3, [sp, #28]
 80043b0:	bfb8      	it	lt
 80043b2:	9204      	strlt	r2, [sp, #16]
 80043b4:	7823      	ldrb	r3, [r4, #0]
 80043b6:	2b2e      	cmp	r3, #46	; 0x2e
 80043b8:	d10c      	bne.n	80043d4 <_svfiprintf_r+0x130>
 80043ba:	7863      	ldrb	r3, [r4, #1]
 80043bc:	2b2a      	cmp	r3, #42	; 0x2a
 80043be:	d135      	bne.n	800442c <_svfiprintf_r+0x188>
 80043c0:	9b03      	ldr	r3, [sp, #12]
 80043c2:	1d1a      	adds	r2, r3, #4
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	9203      	str	r2, [sp, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bfb8      	it	lt
 80043cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80043d0:	3402      	adds	r4, #2
 80043d2:	9305      	str	r3, [sp, #20]
 80043d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044a0 <_svfiprintf_r+0x1fc>
 80043d8:	7821      	ldrb	r1, [r4, #0]
 80043da:	2203      	movs	r2, #3
 80043dc:	4650      	mov	r0, sl
 80043de:	f7fb feff 	bl	80001e0 <memchr>
 80043e2:	b140      	cbz	r0, 80043f6 <_svfiprintf_r+0x152>
 80043e4:	2340      	movs	r3, #64	; 0x40
 80043e6:	eba0 000a 	sub.w	r0, r0, sl
 80043ea:	fa03 f000 	lsl.w	r0, r3, r0
 80043ee:	9b04      	ldr	r3, [sp, #16]
 80043f0:	4303      	orrs	r3, r0
 80043f2:	3401      	adds	r4, #1
 80043f4:	9304      	str	r3, [sp, #16]
 80043f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043fa:	4826      	ldr	r0, [pc, #152]	; (8004494 <_svfiprintf_r+0x1f0>)
 80043fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004400:	2206      	movs	r2, #6
 8004402:	f7fb feed 	bl	80001e0 <memchr>
 8004406:	2800      	cmp	r0, #0
 8004408:	d038      	beq.n	800447c <_svfiprintf_r+0x1d8>
 800440a:	4b23      	ldr	r3, [pc, #140]	; (8004498 <_svfiprintf_r+0x1f4>)
 800440c:	bb1b      	cbnz	r3, 8004456 <_svfiprintf_r+0x1b2>
 800440e:	9b03      	ldr	r3, [sp, #12]
 8004410:	3307      	adds	r3, #7
 8004412:	f023 0307 	bic.w	r3, r3, #7
 8004416:	3308      	adds	r3, #8
 8004418:	9303      	str	r3, [sp, #12]
 800441a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800441c:	4433      	add	r3, r6
 800441e:	9309      	str	r3, [sp, #36]	; 0x24
 8004420:	e767      	b.n	80042f2 <_svfiprintf_r+0x4e>
 8004422:	fb0c 3202 	mla	r2, ip, r2, r3
 8004426:	460c      	mov	r4, r1
 8004428:	2001      	movs	r0, #1
 800442a:	e7a5      	b.n	8004378 <_svfiprintf_r+0xd4>
 800442c:	2300      	movs	r3, #0
 800442e:	3401      	adds	r4, #1
 8004430:	9305      	str	r3, [sp, #20]
 8004432:	4619      	mov	r1, r3
 8004434:	f04f 0c0a 	mov.w	ip, #10
 8004438:	4620      	mov	r0, r4
 800443a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800443e:	3a30      	subs	r2, #48	; 0x30
 8004440:	2a09      	cmp	r2, #9
 8004442:	d903      	bls.n	800444c <_svfiprintf_r+0x1a8>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0c5      	beq.n	80043d4 <_svfiprintf_r+0x130>
 8004448:	9105      	str	r1, [sp, #20]
 800444a:	e7c3      	b.n	80043d4 <_svfiprintf_r+0x130>
 800444c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004450:	4604      	mov	r4, r0
 8004452:	2301      	movs	r3, #1
 8004454:	e7f0      	b.n	8004438 <_svfiprintf_r+0x194>
 8004456:	ab03      	add	r3, sp, #12
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	462a      	mov	r2, r5
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <_svfiprintf_r+0x1f8>)
 800445e:	a904      	add	r1, sp, #16
 8004460:	4638      	mov	r0, r7
 8004462:	f3af 8000 	nop.w
 8004466:	1c42      	adds	r2, r0, #1
 8004468:	4606      	mov	r6, r0
 800446a:	d1d6      	bne.n	800441a <_svfiprintf_r+0x176>
 800446c:	89ab      	ldrh	r3, [r5, #12]
 800446e:	065b      	lsls	r3, r3, #25
 8004470:	f53f af2c 	bmi.w	80042cc <_svfiprintf_r+0x28>
 8004474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004476:	b01d      	add	sp, #116	; 0x74
 8004478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447c:	ab03      	add	r3, sp, #12
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	462a      	mov	r2, r5
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <_svfiprintf_r+0x1f8>)
 8004484:	a904      	add	r1, sp, #16
 8004486:	4638      	mov	r0, r7
 8004488:	f000 f87a 	bl	8004580 <_printf_i>
 800448c:	e7eb      	b.n	8004466 <_svfiprintf_r+0x1c2>
 800448e:	bf00      	nop
 8004490:	08004b00 	.word	0x08004b00
 8004494:	08004b0a 	.word	0x08004b0a
 8004498:	00000000 	.word	0x00000000
 800449c:	080041ed 	.word	0x080041ed
 80044a0:	08004b06 	.word	0x08004b06

080044a4 <_printf_common>:
 80044a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	4616      	mov	r6, r2
 80044aa:	4699      	mov	r9, r3
 80044ac:	688a      	ldr	r2, [r1, #8]
 80044ae:	690b      	ldr	r3, [r1, #16]
 80044b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044b4:	4293      	cmp	r3, r2
 80044b6:	bfb8      	it	lt
 80044b8:	4613      	movlt	r3, r2
 80044ba:	6033      	str	r3, [r6, #0]
 80044bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044c0:	4607      	mov	r7, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	b10a      	cbz	r2, 80044ca <_printf_common+0x26>
 80044c6:	3301      	adds	r3, #1
 80044c8:	6033      	str	r3, [r6, #0]
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	0699      	lsls	r1, r3, #26
 80044ce:	bf42      	ittt	mi
 80044d0:	6833      	ldrmi	r3, [r6, #0]
 80044d2:	3302      	addmi	r3, #2
 80044d4:	6033      	strmi	r3, [r6, #0]
 80044d6:	6825      	ldr	r5, [r4, #0]
 80044d8:	f015 0506 	ands.w	r5, r5, #6
 80044dc:	d106      	bne.n	80044ec <_printf_common+0x48>
 80044de:	f104 0a19 	add.w	sl, r4, #25
 80044e2:	68e3      	ldr	r3, [r4, #12]
 80044e4:	6832      	ldr	r2, [r6, #0]
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	42ab      	cmp	r3, r5
 80044ea:	dc26      	bgt.n	800453a <_printf_common+0x96>
 80044ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044f0:	1e13      	subs	r3, r2, #0
 80044f2:	6822      	ldr	r2, [r4, #0]
 80044f4:	bf18      	it	ne
 80044f6:	2301      	movne	r3, #1
 80044f8:	0692      	lsls	r2, r2, #26
 80044fa:	d42b      	bmi.n	8004554 <_printf_common+0xb0>
 80044fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004500:	4649      	mov	r1, r9
 8004502:	4638      	mov	r0, r7
 8004504:	47c0      	blx	r8
 8004506:	3001      	adds	r0, #1
 8004508:	d01e      	beq.n	8004548 <_printf_common+0xa4>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	68e5      	ldr	r5, [r4, #12]
 800450e:	6832      	ldr	r2, [r6, #0]
 8004510:	f003 0306 	and.w	r3, r3, #6
 8004514:	2b04      	cmp	r3, #4
 8004516:	bf08      	it	eq
 8004518:	1aad      	subeq	r5, r5, r2
 800451a:	68a3      	ldr	r3, [r4, #8]
 800451c:	6922      	ldr	r2, [r4, #16]
 800451e:	bf0c      	ite	eq
 8004520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004524:	2500      	movne	r5, #0
 8004526:	4293      	cmp	r3, r2
 8004528:	bfc4      	itt	gt
 800452a:	1a9b      	subgt	r3, r3, r2
 800452c:	18ed      	addgt	r5, r5, r3
 800452e:	2600      	movs	r6, #0
 8004530:	341a      	adds	r4, #26
 8004532:	42b5      	cmp	r5, r6
 8004534:	d11a      	bne.n	800456c <_printf_common+0xc8>
 8004536:	2000      	movs	r0, #0
 8004538:	e008      	b.n	800454c <_printf_common+0xa8>
 800453a:	2301      	movs	r3, #1
 800453c:	4652      	mov	r2, sl
 800453e:	4649      	mov	r1, r9
 8004540:	4638      	mov	r0, r7
 8004542:	47c0      	blx	r8
 8004544:	3001      	adds	r0, #1
 8004546:	d103      	bne.n	8004550 <_printf_common+0xac>
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004550:	3501      	adds	r5, #1
 8004552:	e7c6      	b.n	80044e2 <_printf_common+0x3e>
 8004554:	18e1      	adds	r1, r4, r3
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	2030      	movs	r0, #48	; 0x30
 800455a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800455e:	4422      	add	r2, r4
 8004560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004568:	3302      	adds	r3, #2
 800456a:	e7c7      	b.n	80044fc <_printf_common+0x58>
 800456c:	2301      	movs	r3, #1
 800456e:	4622      	mov	r2, r4
 8004570:	4649      	mov	r1, r9
 8004572:	4638      	mov	r0, r7
 8004574:	47c0      	blx	r8
 8004576:	3001      	adds	r0, #1
 8004578:	d0e6      	beq.n	8004548 <_printf_common+0xa4>
 800457a:	3601      	adds	r6, #1
 800457c:	e7d9      	b.n	8004532 <_printf_common+0x8e>
	...

08004580 <_printf_i>:
 8004580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004584:	7e0f      	ldrb	r7, [r1, #24]
 8004586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004588:	2f78      	cmp	r7, #120	; 0x78
 800458a:	4691      	mov	r9, r2
 800458c:	4680      	mov	r8, r0
 800458e:	460c      	mov	r4, r1
 8004590:	469a      	mov	sl, r3
 8004592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004596:	d807      	bhi.n	80045a8 <_printf_i+0x28>
 8004598:	2f62      	cmp	r7, #98	; 0x62
 800459a:	d80a      	bhi.n	80045b2 <_printf_i+0x32>
 800459c:	2f00      	cmp	r7, #0
 800459e:	f000 80d8 	beq.w	8004752 <_printf_i+0x1d2>
 80045a2:	2f58      	cmp	r7, #88	; 0x58
 80045a4:	f000 80a3 	beq.w	80046ee <_printf_i+0x16e>
 80045a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045b0:	e03a      	b.n	8004628 <_printf_i+0xa8>
 80045b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045b6:	2b15      	cmp	r3, #21
 80045b8:	d8f6      	bhi.n	80045a8 <_printf_i+0x28>
 80045ba:	a101      	add	r1, pc, #4	; (adr r1, 80045c0 <_printf_i+0x40>)
 80045bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045c0:	08004619 	.word	0x08004619
 80045c4:	0800462d 	.word	0x0800462d
 80045c8:	080045a9 	.word	0x080045a9
 80045cc:	080045a9 	.word	0x080045a9
 80045d0:	080045a9 	.word	0x080045a9
 80045d4:	080045a9 	.word	0x080045a9
 80045d8:	0800462d 	.word	0x0800462d
 80045dc:	080045a9 	.word	0x080045a9
 80045e0:	080045a9 	.word	0x080045a9
 80045e4:	080045a9 	.word	0x080045a9
 80045e8:	080045a9 	.word	0x080045a9
 80045ec:	08004739 	.word	0x08004739
 80045f0:	0800465d 	.word	0x0800465d
 80045f4:	0800471b 	.word	0x0800471b
 80045f8:	080045a9 	.word	0x080045a9
 80045fc:	080045a9 	.word	0x080045a9
 8004600:	0800475b 	.word	0x0800475b
 8004604:	080045a9 	.word	0x080045a9
 8004608:	0800465d 	.word	0x0800465d
 800460c:	080045a9 	.word	0x080045a9
 8004610:	080045a9 	.word	0x080045a9
 8004614:	08004723 	.word	0x08004723
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	1d1a      	adds	r2, r3, #4
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	602a      	str	r2, [r5, #0]
 8004620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004628:	2301      	movs	r3, #1
 800462a:	e0a3      	b.n	8004774 <_printf_i+0x1f4>
 800462c:	6820      	ldr	r0, [r4, #0]
 800462e:	6829      	ldr	r1, [r5, #0]
 8004630:	0606      	lsls	r6, r0, #24
 8004632:	f101 0304 	add.w	r3, r1, #4
 8004636:	d50a      	bpl.n	800464e <_printf_i+0xce>
 8004638:	680e      	ldr	r6, [r1, #0]
 800463a:	602b      	str	r3, [r5, #0]
 800463c:	2e00      	cmp	r6, #0
 800463e:	da03      	bge.n	8004648 <_printf_i+0xc8>
 8004640:	232d      	movs	r3, #45	; 0x2d
 8004642:	4276      	negs	r6, r6
 8004644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004648:	485e      	ldr	r0, [pc, #376]	; (80047c4 <_printf_i+0x244>)
 800464a:	230a      	movs	r3, #10
 800464c:	e019      	b.n	8004682 <_printf_i+0x102>
 800464e:	680e      	ldr	r6, [r1, #0]
 8004650:	602b      	str	r3, [r5, #0]
 8004652:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004656:	bf18      	it	ne
 8004658:	b236      	sxthne	r6, r6
 800465a:	e7ef      	b.n	800463c <_printf_i+0xbc>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	6820      	ldr	r0, [r4, #0]
 8004660:	1d19      	adds	r1, r3, #4
 8004662:	6029      	str	r1, [r5, #0]
 8004664:	0601      	lsls	r1, r0, #24
 8004666:	d501      	bpl.n	800466c <_printf_i+0xec>
 8004668:	681e      	ldr	r6, [r3, #0]
 800466a:	e002      	b.n	8004672 <_printf_i+0xf2>
 800466c:	0646      	lsls	r6, r0, #25
 800466e:	d5fb      	bpl.n	8004668 <_printf_i+0xe8>
 8004670:	881e      	ldrh	r6, [r3, #0]
 8004672:	4854      	ldr	r0, [pc, #336]	; (80047c4 <_printf_i+0x244>)
 8004674:	2f6f      	cmp	r7, #111	; 0x6f
 8004676:	bf0c      	ite	eq
 8004678:	2308      	moveq	r3, #8
 800467a:	230a      	movne	r3, #10
 800467c:	2100      	movs	r1, #0
 800467e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004682:	6865      	ldr	r5, [r4, #4]
 8004684:	60a5      	str	r5, [r4, #8]
 8004686:	2d00      	cmp	r5, #0
 8004688:	bfa2      	ittt	ge
 800468a:	6821      	ldrge	r1, [r4, #0]
 800468c:	f021 0104 	bicge.w	r1, r1, #4
 8004690:	6021      	strge	r1, [r4, #0]
 8004692:	b90e      	cbnz	r6, 8004698 <_printf_i+0x118>
 8004694:	2d00      	cmp	r5, #0
 8004696:	d04d      	beq.n	8004734 <_printf_i+0x1b4>
 8004698:	4615      	mov	r5, r2
 800469a:	fbb6 f1f3 	udiv	r1, r6, r3
 800469e:	fb03 6711 	mls	r7, r3, r1, r6
 80046a2:	5dc7      	ldrb	r7, [r0, r7]
 80046a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046a8:	4637      	mov	r7, r6
 80046aa:	42bb      	cmp	r3, r7
 80046ac:	460e      	mov	r6, r1
 80046ae:	d9f4      	bls.n	800469a <_printf_i+0x11a>
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d10b      	bne.n	80046cc <_printf_i+0x14c>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	07de      	lsls	r6, r3, #31
 80046b8:	d508      	bpl.n	80046cc <_printf_i+0x14c>
 80046ba:	6923      	ldr	r3, [r4, #16]
 80046bc:	6861      	ldr	r1, [r4, #4]
 80046be:	4299      	cmp	r1, r3
 80046c0:	bfde      	ittt	le
 80046c2:	2330      	movle	r3, #48	; 0x30
 80046c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046cc:	1b52      	subs	r2, r2, r5
 80046ce:	6122      	str	r2, [r4, #16]
 80046d0:	f8cd a000 	str.w	sl, [sp]
 80046d4:	464b      	mov	r3, r9
 80046d6:	aa03      	add	r2, sp, #12
 80046d8:	4621      	mov	r1, r4
 80046da:	4640      	mov	r0, r8
 80046dc:	f7ff fee2 	bl	80044a4 <_printf_common>
 80046e0:	3001      	adds	r0, #1
 80046e2:	d14c      	bne.n	800477e <_printf_i+0x1fe>
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	b004      	add	sp, #16
 80046ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ee:	4835      	ldr	r0, [pc, #212]	; (80047c4 <_printf_i+0x244>)
 80046f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046f4:	6829      	ldr	r1, [r5, #0]
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80046fc:	6029      	str	r1, [r5, #0]
 80046fe:	061d      	lsls	r5, r3, #24
 8004700:	d514      	bpl.n	800472c <_printf_i+0x1ac>
 8004702:	07df      	lsls	r7, r3, #31
 8004704:	bf44      	itt	mi
 8004706:	f043 0320 	orrmi.w	r3, r3, #32
 800470a:	6023      	strmi	r3, [r4, #0]
 800470c:	b91e      	cbnz	r6, 8004716 <_printf_i+0x196>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	f023 0320 	bic.w	r3, r3, #32
 8004714:	6023      	str	r3, [r4, #0]
 8004716:	2310      	movs	r3, #16
 8004718:	e7b0      	b.n	800467c <_printf_i+0xfc>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	f043 0320 	orr.w	r3, r3, #32
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	2378      	movs	r3, #120	; 0x78
 8004724:	4828      	ldr	r0, [pc, #160]	; (80047c8 <_printf_i+0x248>)
 8004726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800472a:	e7e3      	b.n	80046f4 <_printf_i+0x174>
 800472c:	0659      	lsls	r1, r3, #25
 800472e:	bf48      	it	mi
 8004730:	b2b6      	uxthmi	r6, r6
 8004732:	e7e6      	b.n	8004702 <_printf_i+0x182>
 8004734:	4615      	mov	r5, r2
 8004736:	e7bb      	b.n	80046b0 <_printf_i+0x130>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	6826      	ldr	r6, [r4, #0]
 800473c:	6961      	ldr	r1, [r4, #20]
 800473e:	1d18      	adds	r0, r3, #4
 8004740:	6028      	str	r0, [r5, #0]
 8004742:	0635      	lsls	r5, r6, #24
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	d501      	bpl.n	800474c <_printf_i+0x1cc>
 8004748:	6019      	str	r1, [r3, #0]
 800474a:	e002      	b.n	8004752 <_printf_i+0x1d2>
 800474c:	0670      	lsls	r0, r6, #25
 800474e:	d5fb      	bpl.n	8004748 <_printf_i+0x1c8>
 8004750:	8019      	strh	r1, [r3, #0]
 8004752:	2300      	movs	r3, #0
 8004754:	6123      	str	r3, [r4, #16]
 8004756:	4615      	mov	r5, r2
 8004758:	e7ba      	b.n	80046d0 <_printf_i+0x150>
 800475a:	682b      	ldr	r3, [r5, #0]
 800475c:	1d1a      	adds	r2, r3, #4
 800475e:	602a      	str	r2, [r5, #0]
 8004760:	681d      	ldr	r5, [r3, #0]
 8004762:	6862      	ldr	r2, [r4, #4]
 8004764:	2100      	movs	r1, #0
 8004766:	4628      	mov	r0, r5
 8004768:	f7fb fd3a 	bl	80001e0 <memchr>
 800476c:	b108      	cbz	r0, 8004772 <_printf_i+0x1f2>
 800476e:	1b40      	subs	r0, r0, r5
 8004770:	6060      	str	r0, [r4, #4]
 8004772:	6863      	ldr	r3, [r4, #4]
 8004774:	6123      	str	r3, [r4, #16]
 8004776:	2300      	movs	r3, #0
 8004778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800477c:	e7a8      	b.n	80046d0 <_printf_i+0x150>
 800477e:	6923      	ldr	r3, [r4, #16]
 8004780:	462a      	mov	r2, r5
 8004782:	4649      	mov	r1, r9
 8004784:	4640      	mov	r0, r8
 8004786:	47d0      	blx	sl
 8004788:	3001      	adds	r0, #1
 800478a:	d0ab      	beq.n	80046e4 <_printf_i+0x164>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	079b      	lsls	r3, r3, #30
 8004790:	d413      	bmi.n	80047ba <_printf_i+0x23a>
 8004792:	68e0      	ldr	r0, [r4, #12]
 8004794:	9b03      	ldr	r3, [sp, #12]
 8004796:	4298      	cmp	r0, r3
 8004798:	bfb8      	it	lt
 800479a:	4618      	movlt	r0, r3
 800479c:	e7a4      	b.n	80046e8 <_printf_i+0x168>
 800479e:	2301      	movs	r3, #1
 80047a0:	4632      	mov	r2, r6
 80047a2:	4649      	mov	r1, r9
 80047a4:	4640      	mov	r0, r8
 80047a6:	47d0      	blx	sl
 80047a8:	3001      	adds	r0, #1
 80047aa:	d09b      	beq.n	80046e4 <_printf_i+0x164>
 80047ac:	3501      	adds	r5, #1
 80047ae:	68e3      	ldr	r3, [r4, #12]
 80047b0:	9903      	ldr	r1, [sp, #12]
 80047b2:	1a5b      	subs	r3, r3, r1
 80047b4:	42ab      	cmp	r3, r5
 80047b6:	dcf2      	bgt.n	800479e <_printf_i+0x21e>
 80047b8:	e7eb      	b.n	8004792 <_printf_i+0x212>
 80047ba:	2500      	movs	r5, #0
 80047bc:	f104 0619 	add.w	r6, r4, #25
 80047c0:	e7f5      	b.n	80047ae <_printf_i+0x22e>
 80047c2:	bf00      	nop
 80047c4:	08004b11 	.word	0x08004b11
 80047c8:	08004b22 	.word	0x08004b22

080047cc <memcpy>:
 80047cc:	440a      	add	r2, r1
 80047ce:	4291      	cmp	r1, r2
 80047d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80047d4:	d100      	bne.n	80047d8 <memcpy+0xc>
 80047d6:	4770      	bx	lr
 80047d8:	b510      	push	{r4, lr}
 80047da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047e2:	4291      	cmp	r1, r2
 80047e4:	d1f9      	bne.n	80047da <memcpy+0xe>
 80047e6:	bd10      	pop	{r4, pc}

080047e8 <memmove>:
 80047e8:	4288      	cmp	r0, r1
 80047ea:	b510      	push	{r4, lr}
 80047ec:	eb01 0402 	add.w	r4, r1, r2
 80047f0:	d902      	bls.n	80047f8 <memmove+0x10>
 80047f2:	4284      	cmp	r4, r0
 80047f4:	4623      	mov	r3, r4
 80047f6:	d807      	bhi.n	8004808 <memmove+0x20>
 80047f8:	1e43      	subs	r3, r0, #1
 80047fa:	42a1      	cmp	r1, r4
 80047fc:	d008      	beq.n	8004810 <memmove+0x28>
 80047fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004806:	e7f8      	b.n	80047fa <memmove+0x12>
 8004808:	4402      	add	r2, r0
 800480a:	4601      	mov	r1, r0
 800480c:	428a      	cmp	r2, r1
 800480e:	d100      	bne.n	8004812 <memmove+0x2a>
 8004810:	bd10      	pop	{r4, pc}
 8004812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800481a:	e7f7      	b.n	800480c <memmove+0x24>

0800481c <_free_r>:
 800481c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800481e:	2900      	cmp	r1, #0
 8004820:	d044      	beq.n	80048ac <_free_r+0x90>
 8004822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004826:	9001      	str	r0, [sp, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f1a1 0404 	sub.w	r4, r1, #4
 800482e:	bfb8      	it	lt
 8004830:	18e4      	addlt	r4, r4, r3
 8004832:	f000 f913 	bl	8004a5c <__malloc_lock>
 8004836:	4a1e      	ldr	r2, [pc, #120]	; (80048b0 <_free_r+0x94>)
 8004838:	9801      	ldr	r0, [sp, #4]
 800483a:	6813      	ldr	r3, [r2, #0]
 800483c:	b933      	cbnz	r3, 800484c <_free_r+0x30>
 800483e:	6063      	str	r3, [r4, #4]
 8004840:	6014      	str	r4, [r2, #0]
 8004842:	b003      	add	sp, #12
 8004844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004848:	f000 b90e 	b.w	8004a68 <__malloc_unlock>
 800484c:	42a3      	cmp	r3, r4
 800484e:	d908      	bls.n	8004862 <_free_r+0x46>
 8004850:	6825      	ldr	r5, [r4, #0]
 8004852:	1961      	adds	r1, r4, r5
 8004854:	428b      	cmp	r3, r1
 8004856:	bf01      	itttt	eq
 8004858:	6819      	ldreq	r1, [r3, #0]
 800485a:	685b      	ldreq	r3, [r3, #4]
 800485c:	1949      	addeq	r1, r1, r5
 800485e:	6021      	streq	r1, [r4, #0]
 8004860:	e7ed      	b.n	800483e <_free_r+0x22>
 8004862:	461a      	mov	r2, r3
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	b10b      	cbz	r3, 800486c <_free_r+0x50>
 8004868:	42a3      	cmp	r3, r4
 800486a:	d9fa      	bls.n	8004862 <_free_r+0x46>
 800486c:	6811      	ldr	r1, [r2, #0]
 800486e:	1855      	adds	r5, r2, r1
 8004870:	42a5      	cmp	r5, r4
 8004872:	d10b      	bne.n	800488c <_free_r+0x70>
 8004874:	6824      	ldr	r4, [r4, #0]
 8004876:	4421      	add	r1, r4
 8004878:	1854      	adds	r4, r2, r1
 800487a:	42a3      	cmp	r3, r4
 800487c:	6011      	str	r1, [r2, #0]
 800487e:	d1e0      	bne.n	8004842 <_free_r+0x26>
 8004880:	681c      	ldr	r4, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	6053      	str	r3, [r2, #4]
 8004886:	4421      	add	r1, r4
 8004888:	6011      	str	r1, [r2, #0]
 800488a:	e7da      	b.n	8004842 <_free_r+0x26>
 800488c:	d902      	bls.n	8004894 <_free_r+0x78>
 800488e:	230c      	movs	r3, #12
 8004890:	6003      	str	r3, [r0, #0]
 8004892:	e7d6      	b.n	8004842 <_free_r+0x26>
 8004894:	6825      	ldr	r5, [r4, #0]
 8004896:	1961      	adds	r1, r4, r5
 8004898:	428b      	cmp	r3, r1
 800489a:	bf04      	itt	eq
 800489c:	6819      	ldreq	r1, [r3, #0]
 800489e:	685b      	ldreq	r3, [r3, #4]
 80048a0:	6063      	str	r3, [r4, #4]
 80048a2:	bf04      	itt	eq
 80048a4:	1949      	addeq	r1, r1, r5
 80048a6:	6021      	streq	r1, [r4, #0]
 80048a8:	6054      	str	r4, [r2, #4]
 80048aa:	e7ca      	b.n	8004842 <_free_r+0x26>
 80048ac:	b003      	add	sp, #12
 80048ae:	bd30      	pop	{r4, r5, pc}
 80048b0:	20000180 	.word	0x20000180

080048b4 <sbrk_aligned>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	4e0e      	ldr	r6, [pc, #56]	; (80048f0 <sbrk_aligned+0x3c>)
 80048b8:	460c      	mov	r4, r1
 80048ba:	6831      	ldr	r1, [r6, #0]
 80048bc:	4605      	mov	r5, r0
 80048be:	b911      	cbnz	r1, 80048c6 <sbrk_aligned+0x12>
 80048c0:	f000 f8bc 	bl	8004a3c <_sbrk_r>
 80048c4:	6030      	str	r0, [r6, #0]
 80048c6:	4621      	mov	r1, r4
 80048c8:	4628      	mov	r0, r5
 80048ca:	f000 f8b7 	bl	8004a3c <_sbrk_r>
 80048ce:	1c43      	adds	r3, r0, #1
 80048d0:	d00a      	beq.n	80048e8 <sbrk_aligned+0x34>
 80048d2:	1cc4      	adds	r4, r0, #3
 80048d4:	f024 0403 	bic.w	r4, r4, #3
 80048d8:	42a0      	cmp	r0, r4
 80048da:	d007      	beq.n	80048ec <sbrk_aligned+0x38>
 80048dc:	1a21      	subs	r1, r4, r0
 80048de:	4628      	mov	r0, r5
 80048e0:	f000 f8ac 	bl	8004a3c <_sbrk_r>
 80048e4:	3001      	adds	r0, #1
 80048e6:	d101      	bne.n	80048ec <sbrk_aligned+0x38>
 80048e8:	f04f 34ff 	mov.w	r4, #4294967295
 80048ec:	4620      	mov	r0, r4
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	20000184 	.word	0x20000184

080048f4 <_malloc_r>:
 80048f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f8:	1ccd      	adds	r5, r1, #3
 80048fa:	f025 0503 	bic.w	r5, r5, #3
 80048fe:	3508      	adds	r5, #8
 8004900:	2d0c      	cmp	r5, #12
 8004902:	bf38      	it	cc
 8004904:	250c      	movcc	r5, #12
 8004906:	2d00      	cmp	r5, #0
 8004908:	4607      	mov	r7, r0
 800490a:	db01      	blt.n	8004910 <_malloc_r+0x1c>
 800490c:	42a9      	cmp	r1, r5
 800490e:	d905      	bls.n	800491c <_malloc_r+0x28>
 8004910:	230c      	movs	r3, #12
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	2600      	movs	r6, #0
 8004916:	4630      	mov	r0, r6
 8004918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800491c:	4e2e      	ldr	r6, [pc, #184]	; (80049d8 <_malloc_r+0xe4>)
 800491e:	f000 f89d 	bl	8004a5c <__malloc_lock>
 8004922:	6833      	ldr	r3, [r6, #0]
 8004924:	461c      	mov	r4, r3
 8004926:	bb34      	cbnz	r4, 8004976 <_malloc_r+0x82>
 8004928:	4629      	mov	r1, r5
 800492a:	4638      	mov	r0, r7
 800492c:	f7ff ffc2 	bl	80048b4 <sbrk_aligned>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	4604      	mov	r4, r0
 8004934:	d14d      	bne.n	80049d2 <_malloc_r+0xde>
 8004936:	6834      	ldr	r4, [r6, #0]
 8004938:	4626      	mov	r6, r4
 800493a:	2e00      	cmp	r6, #0
 800493c:	d140      	bne.n	80049c0 <_malloc_r+0xcc>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	4631      	mov	r1, r6
 8004942:	4638      	mov	r0, r7
 8004944:	eb04 0803 	add.w	r8, r4, r3
 8004948:	f000 f878 	bl	8004a3c <_sbrk_r>
 800494c:	4580      	cmp	r8, r0
 800494e:	d13a      	bne.n	80049c6 <_malloc_r+0xd2>
 8004950:	6821      	ldr	r1, [r4, #0]
 8004952:	3503      	adds	r5, #3
 8004954:	1a6d      	subs	r5, r5, r1
 8004956:	f025 0503 	bic.w	r5, r5, #3
 800495a:	3508      	adds	r5, #8
 800495c:	2d0c      	cmp	r5, #12
 800495e:	bf38      	it	cc
 8004960:	250c      	movcc	r5, #12
 8004962:	4629      	mov	r1, r5
 8004964:	4638      	mov	r0, r7
 8004966:	f7ff ffa5 	bl	80048b4 <sbrk_aligned>
 800496a:	3001      	adds	r0, #1
 800496c:	d02b      	beq.n	80049c6 <_malloc_r+0xd2>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	442b      	add	r3, r5
 8004972:	6023      	str	r3, [r4, #0]
 8004974:	e00e      	b.n	8004994 <_malloc_r+0xa0>
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	1b52      	subs	r2, r2, r5
 800497a:	d41e      	bmi.n	80049ba <_malloc_r+0xc6>
 800497c:	2a0b      	cmp	r2, #11
 800497e:	d916      	bls.n	80049ae <_malloc_r+0xba>
 8004980:	1961      	adds	r1, r4, r5
 8004982:	42a3      	cmp	r3, r4
 8004984:	6025      	str	r5, [r4, #0]
 8004986:	bf18      	it	ne
 8004988:	6059      	strne	r1, [r3, #4]
 800498a:	6863      	ldr	r3, [r4, #4]
 800498c:	bf08      	it	eq
 800498e:	6031      	streq	r1, [r6, #0]
 8004990:	5162      	str	r2, [r4, r5]
 8004992:	604b      	str	r3, [r1, #4]
 8004994:	4638      	mov	r0, r7
 8004996:	f104 060b 	add.w	r6, r4, #11
 800499a:	f000 f865 	bl	8004a68 <__malloc_unlock>
 800499e:	f026 0607 	bic.w	r6, r6, #7
 80049a2:	1d23      	adds	r3, r4, #4
 80049a4:	1af2      	subs	r2, r6, r3
 80049a6:	d0b6      	beq.n	8004916 <_malloc_r+0x22>
 80049a8:	1b9b      	subs	r3, r3, r6
 80049aa:	50a3      	str	r3, [r4, r2]
 80049ac:	e7b3      	b.n	8004916 <_malloc_r+0x22>
 80049ae:	6862      	ldr	r2, [r4, #4]
 80049b0:	42a3      	cmp	r3, r4
 80049b2:	bf0c      	ite	eq
 80049b4:	6032      	streq	r2, [r6, #0]
 80049b6:	605a      	strne	r2, [r3, #4]
 80049b8:	e7ec      	b.n	8004994 <_malloc_r+0xa0>
 80049ba:	4623      	mov	r3, r4
 80049bc:	6864      	ldr	r4, [r4, #4]
 80049be:	e7b2      	b.n	8004926 <_malloc_r+0x32>
 80049c0:	4634      	mov	r4, r6
 80049c2:	6876      	ldr	r6, [r6, #4]
 80049c4:	e7b9      	b.n	800493a <_malloc_r+0x46>
 80049c6:	230c      	movs	r3, #12
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	4638      	mov	r0, r7
 80049cc:	f000 f84c 	bl	8004a68 <__malloc_unlock>
 80049d0:	e7a1      	b.n	8004916 <_malloc_r+0x22>
 80049d2:	6025      	str	r5, [r4, #0]
 80049d4:	e7de      	b.n	8004994 <_malloc_r+0xa0>
 80049d6:	bf00      	nop
 80049d8:	20000180 	.word	0x20000180

080049dc <_realloc_r>:
 80049dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e0:	4680      	mov	r8, r0
 80049e2:	4614      	mov	r4, r2
 80049e4:	460e      	mov	r6, r1
 80049e6:	b921      	cbnz	r1, 80049f2 <_realloc_r+0x16>
 80049e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ec:	4611      	mov	r1, r2
 80049ee:	f7ff bf81 	b.w	80048f4 <_malloc_r>
 80049f2:	b92a      	cbnz	r2, 8004a00 <_realloc_r+0x24>
 80049f4:	f7ff ff12 	bl	800481c <_free_r>
 80049f8:	4625      	mov	r5, r4
 80049fa:	4628      	mov	r0, r5
 80049fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a00:	f000 f838 	bl	8004a74 <_malloc_usable_size_r>
 8004a04:	4284      	cmp	r4, r0
 8004a06:	4607      	mov	r7, r0
 8004a08:	d802      	bhi.n	8004a10 <_realloc_r+0x34>
 8004a0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a0e:	d812      	bhi.n	8004a36 <_realloc_r+0x5a>
 8004a10:	4621      	mov	r1, r4
 8004a12:	4640      	mov	r0, r8
 8004a14:	f7ff ff6e 	bl	80048f4 <_malloc_r>
 8004a18:	4605      	mov	r5, r0
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	d0ed      	beq.n	80049fa <_realloc_r+0x1e>
 8004a1e:	42bc      	cmp	r4, r7
 8004a20:	4622      	mov	r2, r4
 8004a22:	4631      	mov	r1, r6
 8004a24:	bf28      	it	cs
 8004a26:	463a      	movcs	r2, r7
 8004a28:	f7ff fed0 	bl	80047cc <memcpy>
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4640      	mov	r0, r8
 8004a30:	f7ff fef4 	bl	800481c <_free_r>
 8004a34:	e7e1      	b.n	80049fa <_realloc_r+0x1e>
 8004a36:	4635      	mov	r5, r6
 8004a38:	e7df      	b.n	80049fa <_realloc_r+0x1e>
	...

08004a3c <_sbrk_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4d06      	ldr	r5, [pc, #24]	; (8004a58 <_sbrk_r+0x1c>)
 8004a40:	2300      	movs	r3, #0
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	602b      	str	r3, [r5, #0]
 8004a48:	f7fc f84e 	bl	8000ae8 <_sbrk>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d102      	bne.n	8004a56 <_sbrk_r+0x1a>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	b103      	cbz	r3, 8004a56 <_sbrk_r+0x1a>
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	20000188 	.word	0x20000188

08004a5c <__malloc_lock>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	; (8004a64 <__malloc_lock+0x8>)
 8004a5e:	f000 b811 	b.w	8004a84 <__retarget_lock_acquire_recursive>
 8004a62:	bf00      	nop
 8004a64:	2000018c 	.word	0x2000018c

08004a68 <__malloc_unlock>:
 8004a68:	4801      	ldr	r0, [pc, #4]	; (8004a70 <__malloc_unlock+0x8>)
 8004a6a:	f000 b80c 	b.w	8004a86 <__retarget_lock_release_recursive>
 8004a6e:	bf00      	nop
 8004a70:	2000018c 	.word	0x2000018c

08004a74 <_malloc_usable_size_r>:
 8004a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a78:	1f18      	subs	r0, r3, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	bfbc      	itt	lt
 8004a7e:	580b      	ldrlt	r3, [r1, r0]
 8004a80:	18c0      	addlt	r0, r0, r3
 8004a82:	4770      	bx	lr

08004a84 <__retarget_lock_acquire_recursive>:
 8004a84:	4770      	bx	lr

08004a86 <__retarget_lock_release_recursive>:
 8004a86:	4770      	bx	lr

08004a88 <_init>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr

08004a94 <_fini>:
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	bf00      	nop
 8004a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9a:	bc08      	pop	{r3}
 8004a9c:	469e      	mov	lr, r3
 8004a9e:	4770      	bx	lr
