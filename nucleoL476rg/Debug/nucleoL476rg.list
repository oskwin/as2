
nucleoL476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005290  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005420  08005420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054a4  080054a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054ac  080054ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054ac  080054ac  000154ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080054b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  08005524  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08005524  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010027  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed4  00000000  00000000  000300c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00031fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00032de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f8b  00000000  00000000  00033b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f108  00000000  00000000  0005ab03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f412d  00000000  00000000  00069c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015dd38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004008  00000000  00000000  0015dd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005408 	.word	0x08005408

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005408 	.word	0x08005408

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fbed 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f82b 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f967 	bl	8000858 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f935 	bl	80007f8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800058e:	f000 f877 	bl	8000680 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000592:	f000 f8d3 	bl	800073c <MX_TIM5_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Toggle the green LED
 8000596:	2120      	movs	r1, #32
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f000 ff52 	bl	8001444 <HAL_GPIO_TogglePin>
	 HAL_Delay(333);  // Wait 1000 ms
 80005a0:	f240 104d 	movw	r0, #333	; 0x14d
 80005a4:	f000 fc56 	bl	8000e54 <HAL_Delay>
	 sprintf((char*)text, "%lu us\n", icPeriod);
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <main+0x58>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	463b      	mov	r3, r7
 80005ae:	4909      	ldr	r1, [pc, #36]	; (80005d4 <main+0x5c>)
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 fafb 	bl	8004bac <siprintf>
	 HAL_UART_Transmit(&huart2, text, strlen((char*)text), HAL_MAX_DELAY);
 80005b6:	463b      	mov	r3, r7
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fe09 	bl	80001d0 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	4639      	mov	r1, r7
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <main+0x60>)
 80005ca:	f003 fe37 	bl	800423c <HAL_UART_Transmit>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Toggle the green LED
 80005ce:	e7e2      	b.n	8000596 <main+0x1e>
 80005d0:	20000094 	.word	0x20000094
 80005d4:	08005420 	.word	0x08005420
 80005d8:	2000013c 	.word	0x2000013c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	; 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	; 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f004 fad6 	bl	8004b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000602:	f000 ff47 	bl	8001494 <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 f9be 	bl	800098c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000618:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	2310      	movs	r3, #16
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062a:	230a      	movs	r3, #10
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062e:	2307      	movs	r3, #7
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4618      	mov	r0, r3
 8000640:	f000 ff7e 	bl	8001540 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064a:	f000 f99f 	bl	800098c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2303      	movs	r3, #3
 8000654:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2104      	movs	r1, #4
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fb50 	bl	8001d0c <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000672:	f000 f98b 	bl	800098c <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3758      	adds	r7, #88	; 0x58
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <MX_TIM2_Init+0xb8>)
 80006a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <MX_TIM2_Init+0xb8>)
 80006ae:	224f      	movs	r2, #79	; 0x4f
 80006b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_TIM2_Init+0xb8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_TIM2_Init+0xb8>)
 80006ba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_TIM2_Init+0xb8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_TIM2_Init+0xb8>)
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006cc:	481a      	ldr	r0, [pc, #104]	; (8000738 <MX_TIM2_Init+0xb8>)
 80006ce:	f002 f9df 	bl	8002a90 <HAL_TIM_PWM_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80006d8:	f000 f958 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4813      	ldr	r0, [pc, #76]	; (8000738 <MX_TIM2_Init+0xb8>)
 80006ec:	f003 fcb2 	bl	8004054 <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80006f6:	f000 f949 	bl	800098c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006fa:	2360      	movs	r3, #96	; 0x60
 80006fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80006fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000702:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	2204      	movs	r2, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <MX_TIM2_Init+0xb8>)
 8000714:	f002 fe68 	bl	80033e8 <HAL_TIM_PWM_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800071e:	f000 f935 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // Start the timer 2 for PWM on Channel 2 (PA1)
 8000722:	2104      	movs	r1, #4
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_TIM2_Init+0xb8>)
 8000726:	f002 fa0b 	bl	8002b40 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <MX_TIM2_Init+0xb8>)
 800072c:	f000 f9c0 	bl	8000ab0 <HAL_TIM_MspPostInit>

}
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	; 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000f0 	.word	0x200000f0

0800073c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_TIM5_Init+0xb4>)
 800075c:	4a25      	ldr	r2, [pc, #148]	; (80007f4 <MX_TIM5_Init+0xb8>)
 800075e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_TIM5_Init+0xb4>)
 8000762:	224f      	movs	r2, #79	; 0x4f
 8000764:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_TIM5_Init+0xb4>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <MX_TIM5_Init+0xb4>)
 800076e:	f04f 32ff 	mov.w	r2, #4294967295
 8000772:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000774:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MX_TIM5_Init+0xb4>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <MX_TIM5_Init+0xb4>)
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000780:	481b      	ldr	r0, [pc, #108]	; (80007f0 <MX_TIM5_Init+0xb4>)
 8000782:	f002 fae3 	bl	8002d4c <HAL_TIM_IC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800078c:	f000 f8fe 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4814      	ldr	r0, [pc, #80]	; (80007f0 <MX_TIM5_Init+0xb4>)
 80007a0:	f003 fc58 	bl	8004054 <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80007aa:	f000 f8ef 	bl	800098c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007b2:	2301      	movs	r3, #1
 80007b4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	4619      	mov	r1, r3
 80007c4:	480a      	ldr	r0, [pc, #40]	; (80007f0 <MX_TIM5_Init+0xb4>)
 80007c6:	f002 fd7a 	bl	80032be <HAL_TIM_IC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80007d0:	f000 f8dc 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  if(HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	4806      	ldr	r0, [pc, #24]	; (80007f0 <MX_TIM5_Init+0xb4>)
 80007d8:	f002 fb10 	bl	8002dfc <HAL_TIM_IC_Start_IT>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM5_Init+0xaa>
        {
          /* Starting Error */
          Error_Handler();
 80007e2:	f000 f8d3 	bl	800098c <Error_Handler>
        }
  /* USER CODE END TIM5_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	3720      	adds	r7, #32
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000a4 	.word	0x200000a4
 80007f4:	40000c00 	.word	0x40000c00

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USART2_UART_Init+0x58>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	; (8000854 <MX_USART2_UART_Init+0x5c>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800083c:	f003 fcb0 	bl	80041a0 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f8a1 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000013c 	.word	0x2000013c
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b2b      	ldr	r3, [pc, #172]	; (800091c <MX_GPIO_Init+0xc4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a2a      	ldr	r2, [pc, #168]	; (800091c <MX_GPIO_Init+0xc4>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <MX_GPIO_Init+0xc4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	4b25      	ldr	r3, [pc, #148]	; (800091c <MX_GPIO_Init+0xc4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a24      	ldr	r2, [pc, #144]	; (800091c <MX_GPIO_Init+0xc4>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_GPIO_Init+0xc4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a1e      	ldr	r2, [pc, #120]	; (800091c <MX_GPIO_Init+0xc4>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_GPIO_Init+0xc4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_GPIO_Init+0xc4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <MX_GPIO_Init+0xc4>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_GPIO_Init+0xc4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d6:	f000 fd9d 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_GPIO_Init+0xc8>)
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_GPIO_Init+0xcc>)
 80008f0:	f000 fbe6 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f4:	2320      	movs	r3, #32
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f000 fbd7 	bl	80010c0 <HAL_GPIO_Init>

}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000
 8000920:	10210000 	.word	0x10210000
 8000924:	48000800 	.word	0x48000800

08000928 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
   if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7f1b      	ldrb	r3, [r3, #28]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d11f      	bne.n	8000978 <HAL_TIM_IC_CaptureCallback+0x50>
	   icPTStamp = icCTStamp;  // Let or update the previous time stamp be the previous current time stamp
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_TIM_IC_CaptureCallback+0x58>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a11      	ldr	r2, [pc, #68]	; (8000984 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800093e:	6013      	str	r3, [r2, #0]
	   icCTStamp = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // let the current time stamp be the current one
 8000940:	2100      	movs	r1, #0
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f002 fe60 	bl	8003608 <HAL_TIM_ReadCapturedValue>
 8000948:	4603      	mov	r3, r0
 800094a:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <HAL_TIM_IC_CaptureCallback+0x58>)
 800094c:	6013      	str	r3, [r2, #0]
	   if (icCTStamp > icPTStamp) {
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	429a      	cmp	r2, r3
 8000958:	d907      	bls.n	800096a <HAL_TIM_IC_CaptureCallback+0x42>
	       icPeriod = icCTStamp - icPTStamp;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_TIM_IC_CaptureCallback+0x58>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000966:	6013      	str	r3, [r2, #0]
	   } else {
	       icPeriod = 0xFFFFFFFF - icPTStamp + icCTStamp + 1;
	   }
   }
}
 8000968:	e006      	b.n	8000978 <HAL_TIM_IC_CaptureCallback+0x50>
	       icPeriod = 0xFFFFFFFF - icPTStamp + icCTStamp + 1;
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_TIM_IC_CaptureCallback+0x58>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000090 	.word	0x20000090
 8000984:	2000008c 	.word	0x2000008c
 8000988:	20000094 	.word	0x20000094

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_MspInit+0x44>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_MspInit+0x44>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6613      	str	r3, [r2, #96]	; 0x60
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x44>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x44>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6593      	str	r3, [r2, #88]	; 0x58
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009f0:	d10b      	bne.n	8000a0a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_TIM_PWM_MspInit+0x38>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <HAL_TIM_PWM_MspInit+0x38>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6593      	str	r3, [r2, #88]	; 0x58
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_TIM_PWM_MspInit+0x38>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <HAL_TIM_IC_MspInit+0x8c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d130      	bne.n	8000aa0 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <HAL_TIM_IC_MspInit+0x90>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	4a1a      	ldr	r2, [pc, #104]	; (8000aac <HAL_TIM_IC_MspInit+0x90>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <HAL_TIM_IC_MspInit+0x90>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_TIM_IC_MspInit+0x90>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a14      	ldr	r2, [pc, #80]	; (8000aac <HAL_TIM_IC_MspInit+0x90>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_TIM_IC_MspInit+0x90>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f000 fb18 	bl	80010c0 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2032      	movs	r0, #50	; 0x32
 8000a96:	f000 fadc 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a9a:	2032      	movs	r0, #50	; 0x32
 8000a9c:	f000 faf5 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40000c00 	.word	0x40000c00
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad0:	d11c      	bne.n	8000b0c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_TIM_MspPostInit+0x64>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_TIM_MspPostInit+0x64>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_TIM_MspPostInit+0x64>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aea:	2302      	movs	r3, #2
 8000aec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f000 fada 	bl	80010c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b0ac      	sub	sp, #176	; 0xb0
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2288      	movs	r2, #136	; 0x88
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f004 f82f 	bl	8004b9c <memset>
  if(huart->Instance==USART2)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <HAL_UART_MspInit+0xb0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d13b      	bne.n	8000bc0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fadf 	bl	8002118 <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b60:	f7ff ff14 	bl	800098c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <HAL_UART_MspInit+0xb4>)
 8000b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b68:	4a18      	ldr	r2, [pc, #96]	; (8000bcc <HAL_UART_MspInit+0xb4>)
 8000b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_UART_MspInit+0xb4>)
 8000b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_UART_MspInit+0xb4>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b80:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <HAL_UART_MspInit+0xb4>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_UART_MspInit+0xb4>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b94:	230c      	movs	r3, #12
 8000b96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bac:	2307      	movs	r3, #7
 8000bae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f000 fa80 	bl	80010c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	37b0      	adds	r7, #176	; 0xb0
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40004400 	.word	0x40004400
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f8fa 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM5_IRQHandler+0x10>)
 8000c2a:	f002 fa29 	bl	8003080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000a4 	.word	0x200000a4

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f003 ff6e 	bl	8004b48 <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20018000 	.word	0x20018000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	20000098 	.word	0x20000098
 8000ca0:	200001d8 	.word	0x200001d8

08000ca4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <SystemInit+0x5c>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <SystemInit+0x5c>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <SystemInit+0x60>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <SystemInit+0x60>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <SystemInit+0x60>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <SystemInit+0x60>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <SystemInit+0x60>)
 8000cd0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cd4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cd8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <SystemInit+0x60>)
 8000cdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ce0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <SystemInit+0x60>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <SystemInit+0x60>)
 8000ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <SystemInit+0x60>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00
 8000d04:	40021000 	.word	0x40021000

08000d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d0c:	f7ff ffca 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d12:	e003      	b.n	8000d1c <LoopCopyDataInit>

08000d14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d1a:	3104      	adds	r1, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d1c:	480a      	ldr	r0, [pc, #40]	; (8000d48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d24:	d3f6      	bcc.n	8000d14 <CopyDataInit>
	ldr	r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d28:	e002      	b.n	8000d30 <LoopFillZerobss>

08000d2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d2c:	f842 3b04 	str.w	r3, [r2], #4

08000d30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <LoopForever+0x16>)
	cmp	r2, r3
 8000d32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d34:	d3f9      	bcc.n	8000d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f003 ff0d 	bl	8004b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3a:	f7ff fc1d 	bl	8000578 <main>

08000d3e <LoopForever>:

LoopForever:
    b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d40:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d44:	080054b4 	.word	0x080054b4
	ldr	r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d4c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000d50:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000d54:	200001d4 	.word	0x200001d4

08000d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_2_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_Init+0x3c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <HAL_Init+0x3c>)
 8000d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d72:	2003      	movs	r0, #3
 8000d74:	f000 f962 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 f80f 	bl	8000d9c <HAL_InitTick>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d002      	beq.n	8000d8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	e001      	b.n	8000d8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d8a:	f7ff fe05 	bl	8000998 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_InitTick+0x6c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d023      	beq.n	8000df8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_InitTick+0x70>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_InitTick+0x6c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f96d 	bl	80010a6 <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10f      	bne.n	8000df2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d809      	bhi.n	8000dec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 f937 	bl	8001052 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_InitTick+0x74>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e007      	b.n	8000dfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e004      	b.n	8000dfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	e001      	b.n	8000dfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008
 8000e38:	200001c0 	.word	0x200001c0

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	200001c0 	.word	0x200001c0

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_Delay+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4907      	ldr	r1, [pc, #28]	; (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	; (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff29 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff3e 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff31 	bl	8000f00 <__NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffa2 	bl	8000ff8 <SysTick_Config>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ce:	e17f      	b.n	80013d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2101      	movs	r1, #1
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	4013      	ands	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 8171 	beq.w	80013ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d00b      	beq.n	8001108 <HAL_GPIO_Init+0x48>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d007      	beq.n	8001108 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010fc:	2b11      	cmp	r3, #17
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b12      	cmp	r3, #18
 8001106:	d130      	bne.n	800116a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800113e:	2201      	movs	r2, #1
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f003 0201 	and.w	r2, r3, #1
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b03      	cmp	r3, #3
 8001174:	d118      	bne.n	80011a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	08db      	lsrs	r3, r3, #3
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x128>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b12      	cmp	r3, #18
 80011e6:	d123      	bne.n	8001230 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	6939      	ldr	r1, [r7, #16]
 800122c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0203 	and.w	r2, r3, #3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80ac 	beq.w	80013ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b5f      	ldr	r3, [pc, #380]	; (80013f0 <HAL_GPIO_Init+0x330>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001276:	4a5e      	ldr	r2, [pc, #376]	; (80013f0 <HAL_GPIO_Init+0x330>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6613      	str	r3, [r2, #96]	; 0x60
 800127e:	4b5c      	ldr	r3, [pc, #368]	; (80013f0 <HAL_GPIO_Init+0x330>)
 8001280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800128a:	4a5a      	ldr	r2, [pc, #360]	; (80013f4 <HAL_GPIO_Init+0x334>)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012b4:	d025      	beq.n	8001302 <HAL_GPIO_Init+0x242>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4f      	ldr	r2, [pc, #316]	; (80013f8 <HAL_GPIO_Init+0x338>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01f      	beq.n	80012fe <HAL_GPIO_Init+0x23e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4e      	ldr	r2, [pc, #312]	; (80013fc <HAL_GPIO_Init+0x33c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x23a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4d      	ldr	r2, [pc, #308]	; (8001400 <HAL_GPIO_Init+0x340>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x236>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4c      	ldr	r2, [pc, #304]	; (8001404 <HAL_GPIO_Init+0x344>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x232>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4b      	ldr	r2, [pc, #300]	; (8001408 <HAL_GPIO_Init+0x348>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x22e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4a      	ldr	r2, [pc, #296]	; (800140c <HAL_GPIO_Init+0x34c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x22a>
 80012e6:	2306      	movs	r3, #6
 80012e8:	e00c      	b.n	8001304 <HAL_GPIO_Init+0x244>
 80012ea:	2307      	movs	r3, #7
 80012ec:	e00a      	b.n	8001304 <HAL_GPIO_Init+0x244>
 80012ee:	2305      	movs	r3, #5
 80012f0:	e008      	b.n	8001304 <HAL_GPIO_Init+0x244>
 80012f2:	2304      	movs	r3, #4
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x244>
 80012f6:	2303      	movs	r3, #3
 80012f8:	e004      	b.n	8001304 <HAL_GPIO_Init+0x244>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_Init+0x244>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x244>
 8001302:	2300      	movs	r3, #0
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	f002 0203 	and.w	r2, r2, #3
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	4093      	lsls	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001314:	4937      	ldr	r1, [pc, #220]	; (80013f4 <HAL_GPIO_Init+0x334>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_GPIO_Init+0x350>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001346:	4a32      	ldr	r2, [pc, #200]	; (8001410 <HAL_GPIO_Init+0x350>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_GPIO_Init+0x350>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <HAL_GPIO_Init+0x350>)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_GPIO_Init+0x350>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800139a:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_GPIO_Init+0x350>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_GPIO_Init+0x350>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013c4:	4a12      	ldr	r2, [pc, #72]	; (8001410 <HAL_GPIO_Init+0x350>)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa22 f303 	lsr.w	r3, r2, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f47f ae78 	bne.w	80010d0 <HAL_GPIO_Init+0x10>
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000
 80013f8:	48000400 	.word	0x48000400
 80013fc:	48000800 	.word	0x48000800
 8001400:	48000c00 	.word	0x48000c00
 8001404:	48001000 	.word	0x48001000
 8001408:	48001400 	.word	0x48001400
 800140c:	48001800 	.word	0x48001800
 8001410:	40010400 	.word	0x40010400

08001414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001430:	e002      	b.n	8001438 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4013      	ands	r3, r2
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	43d9      	mvns	r1, r3
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	400b      	ands	r3, r1
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	619a      	str	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <HAL_PWREx_GetVoltageRange+0x18>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40007000 	.word	0x40007000

08001494 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a2:	d130      	bne.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a4:	4b23      	ldr	r3, [pc, #140]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014b0:	d038      	beq.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ba:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2232      	movs	r2, #50	; 0x32
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	0c9b      	lsrs	r3, r3, #18
 80014d4:	3301      	adds	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d8:	e002      	b.n	80014e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3b01      	subs	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ec:	d102      	bne.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f2      	bne.n	80014da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001500:	d110      	bne.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e00f      	b.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800150e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001512:	d007      	beq.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800151c:	4a05      	ldr	r2, [pc, #20]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001522:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40007000 	.word	0x40007000
 8001538:	20000000 	.word	0x20000000
 800153c:	431bde83 	.word	0x431bde83

08001540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e3d4      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001552:	4ba1      	ldr	r3, [pc, #644]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800155c:	4b9e      	ldr	r3, [pc, #632]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80e4 	beq.w	800173c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <HAL_RCC_OscConfig+0x4a>
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	2b0c      	cmp	r3, #12
 800157e:	f040 808b 	bne.w	8001698 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2b01      	cmp	r3, #1
 8001586:	f040 8087 	bne.w	8001698 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800158a:	4b93      	ldr	r3, [pc, #588]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <HAL_RCC_OscConfig+0x62>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e3ac      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1a      	ldr	r2, [r3, #32]
 80015a6:	4b8c      	ldr	r3, [pc, #560]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d004      	beq.n	80015bc <HAL_RCC_OscConfig+0x7c>
 80015b2:	4b89      	ldr	r3, [pc, #548]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ba:	e005      	b.n	80015c8 <HAL_RCC_OscConfig+0x88>
 80015bc:	4b86      	ldr	r3, [pc, #536]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80015be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d223      	bcs.n	8001614 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fd41 	bl	8002058 <RCC_SetFlashLatencyFromMSIRange>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e38d      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e0:	4b7d      	ldr	r3, [pc, #500]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a7c      	ldr	r2, [pc, #496]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b7a      	ldr	r3, [pc, #488]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4977      	ldr	r1, [pc, #476]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015fe:	4b76      	ldr	r3, [pc, #472]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	4972      	ldr	r1, [pc, #456]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
 8001612:	e025      	b.n	8001660 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001614:	4b70      	ldr	r3, [pc, #448]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a6f      	ldr	r2, [pc, #444]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b6d      	ldr	r3, [pc, #436]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	496a      	ldr	r1, [pc, #424]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001632:	4b69      	ldr	r3, [pc, #420]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	4965      	ldr	r1, [pc, #404]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d109      	bne.n	8001660 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fd01 	bl	8002058 <RCC_SetFlashLatencyFromMSIRange>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e34d      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001660:	f000 fc36 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b5c      	ldr	r3, [pc, #368]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	495a      	ldr	r1, [pc, #360]	; (80017dc <HAL_RCC_OscConfig+0x29c>)
 8001672:	5ccb      	ldrb	r3, [r1, r3]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	4a58      	ldr	r2, [pc, #352]	; (80017e0 <HAL_RCC_OscConfig+0x2a0>)
 800167e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001680:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <HAL_RCC_OscConfig+0x2a4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fb89 	bl	8000d9c <HAL_InitTick>
 800168a:	4603      	mov	r3, r0
 800168c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d052      	beq.n	800173a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	e331      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d032      	beq.n	8001706 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016a0:	4b4d      	ldr	r3, [pc, #308]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a4c      	ldr	r2, [pc, #304]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fbc6 	bl	8000e3c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b4:	f7ff fbc2 	bl	8000e3c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e31a      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c6:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d2:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a40      	ldr	r2, [pc, #256]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80016d8:	f043 0308 	orr.w	r3, r3, #8
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	493b      	ldr	r1, [pc, #236]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f0:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	4936      	ldr	r1, [pc, #216]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
 8001704:	e01a      	b.n	800173c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a33      	ldr	r2, [pc, #204]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001712:	f7ff fb93 	bl	8000e3c <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171a:	f7ff fb8f 	bl	8000e3c <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e2e7      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800172c:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x1da>
 8001738:	e000      	b.n	800173c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800173a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d074      	beq.n	8001832 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2b08      	cmp	r3, #8
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x21a>
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b0c      	cmp	r3, #12
 8001752:	d10e      	bne.n	8001772 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d10b      	bne.n	8001772 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d064      	beq.n	8001830 <HAL_RCC_OscConfig+0x2f0>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d160      	bne.n	8001830 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e2c4      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x24a>
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 8001782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	e01d      	b.n	80017c6 <HAL_RCC_OscConfig+0x286>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001792:	d10c      	bne.n	80017ae <HAL_RCC_OscConfig+0x26e>
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 800179a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80017a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	e00b      	b.n	80017c6 <HAL_RCC_OscConfig+0x286>
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80017b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_RCC_OscConfig+0x298>)
 80017c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d01c      	beq.n	8001808 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff fb35 	bl	8000e3c <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d4:	e011      	b.n	80017fa <HAL_RCC_OscConfig+0x2ba>
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	08005428 	.word	0x08005428
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fb28 	bl	8000e3c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e280      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fa:	4baf      	ldr	r3, [pc, #700]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2a8>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fb18 	bl	8000e3c <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fb14 	bl	8000e3c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e26c      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001822:	4ba5      	ldr	r3, [pc, #660]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x2d0>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d060      	beq.n	8001900 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b04      	cmp	r3, #4
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x310>
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d119      	bne.n	800187e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d116      	bne.n	800187e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001850:	4b99      	ldr	r3, [pc, #612]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_OscConfig+0x328>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e249      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b93      	ldr	r3, [pc, #588]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	4990      	ldr	r1, [pc, #576]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800187c:	e040      	b.n	8001900 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d023      	beq.n	80018ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001886:	4b8c      	ldr	r3, [pc, #560]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a8b      	ldr	r2, [pc, #556]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fad3 	bl	8000e3c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff facf 	bl	8000e3c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e227      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ac:	4b82      	ldr	r3, [pc, #520]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b8:	4b7f      	ldr	r3, [pc, #508]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	061b      	lsls	r3, r3, #24
 80018c6:	497c      	ldr	r1, [pc, #496]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
 80018cc:	e018      	b.n	8001900 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ce:	4b7a      	ldr	r3, [pc, #488]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a79      	ldr	r2, [pc, #484]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 80018d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018da:	f7ff faaf 	bl	8000e3c <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e2:	f7ff faab 	bl	8000e3c <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e203      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f4:	4b70      	ldr	r3, [pc, #448]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d03c      	beq.n	8001986 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01c      	beq.n	800194e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001914:	4b68      	ldr	r3, [pc, #416]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191a:	4a67      	ldr	r2, [pc, #412]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff fa8a 	bl	8000e3c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff fa86 	bl	8000e3c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1de      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800193e:	4b5e      	ldr	r3, [pc, #376]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0ef      	beq.n	800192c <HAL_RCC_OscConfig+0x3ec>
 800194c:	e01b      	b.n	8001986 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194e:	4b5a      	ldr	r3, [pc, #360]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001954:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195e:	f7ff fa6d 	bl	8000e3c <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001966:	f7ff fa69 	bl	8000e3c <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e1c1      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001978:	4b4f      	ldr	r3, [pc, #316]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ef      	bne.n	8001966 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80a6 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001998:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10d      	bne.n	80019c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a8:	4a43      	ldr	r2, [pc, #268]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ae:	6593      	str	r3, [r2, #88]	; 0x58
 80019b0:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019bc:	2301      	movs	r3, #1
 80019be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c0:	4b3e      	ldr	r3, [pc, #248]	; (8001abc <HAL_RCC_OscConfig+0x57c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d118      	bne.n	80019fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019cc:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <HAL_RCC_OscConfig+0x57c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a3a      	ldr	r2, [pc, #232]	; (8001abc <HAL_RCC_OscConfig+0x57c>)
 80019d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d8:	f7ff fa30 	bl	8000e3c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e0:	f7ff fa2c 	bl	8000e3c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e184      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f2:	4b32      	ldr	r3, [pc, #200]	; (8001abc <HAL_RCC_OscConfig+0x57c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d108      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4d8>
 8001a06:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0c:	4a2a      	ldr	r2, [pc, #168]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a16:	e024      	b.n	8001a62 <HAL_RCC_OscConfig+0x522>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d110      	bne.n	8001a42 <HAL_RCC_OscConfig+0x502>
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a26:	4a24      	ldr	r2, [pc, #144]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a36:	4a20      	ldr	r2, [pc, #128]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a40:	e00f      	b.n	8001a62 <HAL_RCC_OscConfig+0x522>
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a58:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001a5a:	f023 0304 	bic.w	r3, r3, #4
 8001a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d016      	beq.n	8001a98 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7ff f9e7 	bl	8000e3c <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7ff f9e3 	bl	8000e3c <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e139      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_OscConfig+0x578>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0ed      	beq.n	8001a72 <HAL_RCC_OscConfig+0x532>
 8001a96:	e01a      	b.n	8001ace <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff f9d0 	bl	8000e3c <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a9e:	e00f      	b.n	8001ac0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f7ff f9cc 	bl	8000e3c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d906      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e122      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac0:	4b90      	ldr	r3, [pc, #576]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1e8      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ace:	7ffb      	ldrb	r3, [r7, #31]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad4:	4b8b      	ldr	r3, [pc, #556]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a8a      	ldr	r2, [pc, #552]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8108 	beq.w	8001cfa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	f040 80d0 	bne.w	8001c94 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001af4:	4b83      	ldr	r3, [pc, #524]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 0203 	and.w	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d130      	bne.n	8001b6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	3b01      	subs	r3, #1
 8001b14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d127      	bne.n	8001b6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d11f      	bne.n	8001b6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b34:	2a07      	cmp	r2, #7
 8001b36:	bf14      	ite	ne
 8001b38:	2201      	movne	r2, #1
 8001b3a:	2200      	moveq	r2, #0
 8001b3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d113      	bne.n	8001b6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4c:	085b      	lsrs	r3, r3, #1
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d109      	bne.n	8001b6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	3b01      	subs	r3, #1
 8001b64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d06e      	beq.n	8001c48 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b0c      	cmp	r3, #12
 8001b6e:	d069      	beq.n	8001c44 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b70:	4b64      	ldr	r3, [pc, #400]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d105      	bne.n	8001b88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b7c:	4b61      	ldr	r3, [pc, #388]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0b7      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b8c:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a5c      	ldr	r2, [pc, #368]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b98:	f7ff f950 	bl	8000e3c <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff f94c 	bl	8000e3c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0a4      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb2:	4b54      	ldr	r3, [pc, #336]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbe:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <HAL_RCC_OscConfig+0x7c8>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bce:	3a01      	subs	r2, #1
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bd8:	0212      	lsls	r2, r2, #8
 8001bda:	4311      	orrs	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001be0:	0852      	lsrs	r2, r2, #1
 8001be2:	3a01      	subs	r2, #1
 8001be4:	0552      	lsls	r2, r2, #21
 8001be6:	4311      	orrs	r1, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bec:	0852      	lsrs	r2, r2, #1
 8001bee:	3a01      	subs	r2, #1
 8001bf0:	0652      	lsls	r2, r2, #25
 8001bf2:	4311      	orrs	r1, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bf8:	0912      	lsrs	r2, r2, #4
 8001bfa:	0452      	lsls	r2, r2, #17
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	4941      	ldr	r1, [pc, #260]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c04:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a3e      	ldr	r2, [pc, #248]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c10:	4b3c      	ldr	r3, [pc, #240]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4a3b      	ldr	r2, [pc, #236]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c1c:	f7ff f90e 	bl	8000e3c <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff f90a 	bl	8000e3c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e062      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c36:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c42:	e05a      	b.n	8001cfa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e059      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c48:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d152      	bne.n	8001cfa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a2a      	ldr	r2, [pc, #168]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c60:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c6c:	f7ff f8e6 	bl	8000e3c <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff f8e2 	bl	8000e3c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e03a      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c86:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x734>
 8001c92:	e032      	b.n	8001cfa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d02d      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001ca0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	4a13      	ldr	r2, [pc, #76]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001cb8:	f023 0303 	bic.w	r3, r3, #3
 8001cbc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	4a10      	ldr	r2, [pc, #64]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001cc4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ccc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff f8b5 	bl	8000e3c <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff f8b1 	bl	8000e3c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e009      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_RCC_OscConfig+0x7c4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x796>
 8001cf4:	e001      	b.n	8001cfa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	f99d808c 	.word	0xf99d808c

08001d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0c8      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d20:	4b66      	ldr	r3, [pc, #408]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d910      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b63      	ldr	r3, [pc, #396]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 0207 	bic.w	r2, r3, #7
 8001d36:	4961      	ldr	r1, [pc, #388]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b5f      	ldr	r3, [pc, #380]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0b0      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d04c      	beq.n	8001df6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d64:	4b56      	ldr	r3, [pc, #344]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d121      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e09e      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7c:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d115      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e092      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d94:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d109      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e086      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da4:	4b46      	ldr	r3, [pc, #280]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e07e      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001db4:	4b42      	ldr	r3, [pc, #264]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 0203 	bic.w	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	493f      	ldr	r1, [pc, #252]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc6:	f7ff f839 	bl	8000e3c <HAL_GetTick>
 8001dca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dce:	f7ff f835 	bl	8000e3c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e066      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 020c 	and.w	r2, r3, #12
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d1eb      	bne.n	8001dce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d008      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	492c      	ldr	r1, [pc, #176]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d210      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0207 	bic.w	r2, r3, #7
 8001e2a:	4924      	ldr	r1, [pc, #144]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e036      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4918      	ldr	r1, [pc, #96]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6e:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4910      	ldr	r1, [pc, #64]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e82:	f000 f825 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	490c      	ldr	r1, [pc, #48]	; (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	5ccb      	ldrb	r3, [r1, r3]
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe ff78 	bl	8000d9c <HAL_InitTick>
 8001eac:	4603      	mov	r3, r0
 8001eae:	72fb      	strb	r3, [r7, #11]

  return status;
 8001eb0:	7afb      	ldrb	r3, [r7, #11]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08005428 	.word	0x08005428
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ede:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x34>
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	2b0c      	cmp	r3, #12
 8001efc:	d121      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d11e      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f04:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f10:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e005      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f2c:	4a2b      	ldr	r2, [pc, #172]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10d      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e004      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d134      	bne.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d003      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d003      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0xac>
 8001f74:	e005      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f78:	617b      	str	r3, [r7, #20]
      break;
 8001f7a:	e005      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f7e:	617b      	str	r3, [r7, #20]
      break;
 8001f80:	e002      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	617b      	str	r3, [r7, #20]
      break;
 8001f86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	3301      	adds	r3, #1
 8001f94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	fb02 f203 	mul.w	r2, r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	0e5b      	lsrs	r3, r3, #25
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08005440 	.word	0x08005440
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	007a1200 	.word	0x007a1200

08001fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000000 	.word	0x20000000

08002000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002004:	f7ff fff0 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002008:	4602      	mov	r2, r0
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	4904      	ldr	r1, [pc, #16]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002016:	5ccb      	ldrb	r3, [r1, r3]
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	08005438 	.word	0x08005438

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002030:	f7ff ffda 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0adb      	lsrs	r3, r3, #11
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4904      	ldr	r1, [pc, #16]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	08005438 	.word	0x08005438

08002058 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002064:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002070:	f7ff fa02 	bl	8001478 <HAL_PWREx_GetVoltageRange>
 8002074:	6178      	str	r0, [r7, #20]
 8002076:	e014      	b.n	80020a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	4a24      	ldr	r2, [pc, #144]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002082:	6593      	str	r3, [r2, #88]	; 0x58
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002090:	f7ff f9f2 	bl	8001478 <HAL_PWREx_GetVoltageRange>
 8002094:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800209c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a8:	d10b      	bne.n	80020c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b80      	cmp	r3, #128	; 0x80
 80020ae:	d919      	bls.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2ba0      	cmp	r3, #160	; 0xa0
 80020b4:	d902      	bls.n	80020bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020b6:	2302      	movs	r3, #2
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	e013      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020bc:	2301      	movs	r3, #1
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	e010      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b80      	cmp	r3, #128	; 0x80
 80020c6:	d902      	bls.n	80020ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020c8:	2303      	movs	r3, #3
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e00a      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b80      	cmp	r3, #128	; 0x80
 80020d2:	d102      	bne.n	80020da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020d4:	2302      	movs	r3, #2
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	e004      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b70      	cmp	r3, #112	; 0x70
 80020de:	d101      	bne.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020e0:	2301      	movs	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 0207 	bic.w	r2, r3, #7
 80020ec:	4909      	ldr	r1, [pc, #36]	; (8002114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d001      	beq.n	8002106 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	40022000 	.word	0x40022000

08002118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002120:	2300      	movs	r3, #0
 8002122:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002124:	2300      	movs	r3, #0
 8002126:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002130:	2b00      	cmp	r3, #0
 8002132:	d041      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002138:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800213c:	d02a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800213e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002142:	d824      	bhi.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002144:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002148:	d008      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800214a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800214e:	d81e      	bhi.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002158:	d010      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800215a:	e018      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800215c:	4b86      	ldr	r3, [pc, #536]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a85      	ldr	r2, [pc, #532]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002168:	e015      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fabb 	bl	80026ec <RCCEx_PLLSAI1_Config>
 8002176:	4603      	mov	r3, r0
 8002178:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800217a:	e00c      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3320      	adds	r3, #32
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f000 fba6 	bl	80028d4 <RCCEx_PLLSAI2_Config>
 8002188:	4603      	mov	r3, r0
 800218a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800218c:	e003      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	74fb      	strb	r3, [r7, #19]
      break;
 8002192:	e000      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002196:	7cfb      	ldrb	r3, [r7, #19]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10b      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800219c:	4b76      	ldr	r3, [pc, #472]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021aa:	4973      	ldr	r1, [pc, #460]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021b2:	e001      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d041      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021cc:	d02a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021d2:	d824      	bhi.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021d8:	d008      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021de:	d81e      	bhi.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e8:	d010      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021ea:	e018      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021ec:	4b62      	ldr	r3, [pc, #392]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a61      	ldr	r2, [pc, #388]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021f8:	e015      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3304      	adds	r3, #4
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fa73 	bl	80026ec <RCCEx_PLLSAI1_Config>
 8002206:	4603      	mov	r3, r0
 8002208:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800220a:	e00c      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3320      	adds	r3, #32
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fb5e 	bl	80028d4 <RCCEx_PLLSAI2_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800221c:	e003      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	74fb      	strb	r3, [r7, #19]
      break;
 8002222:	e000      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002226:	7cfb      	ldrb	r3, [r7, #19]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800222c:	4b52      	ldr	r3, [pc, #328]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800223a:	494f      	ldr	r1, [pc, #316]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002242:	e001      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a0 	beq.w	8002396 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800225a:	4b47      	ldr	r3, [pc, #284]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800226a:	2300      	movs	r3, #0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00d      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002270:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	4a40      	ldr	r2, [pc, #256]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	6593      	str	r3, [r2, #88]	; 0x58
 800227c:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002288:	2301      	movs	r3, #1
 800228a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228c:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3a      	ldr	r2, [pc, #232]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002296:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002298:	f7fe fdd0 	bl	8000e3c <HAL_GetTick>
 800229c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800229e:	e009      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7fe fdcc 	bl	8000e3c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d902      	bls.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	74fb      	strb	r3, [r7, #19]
        break;
 80022b2:	e005      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ef      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d15c      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01f      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d019      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	4a20      	ldr	r2, [pc, #128]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002310:	4a19      	ldr	r2, [pc, #100]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d016      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7fe fd8b 	bl	8000e3c <HAL_GetTick>
 8002326:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002328:	e00b      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fd87 	bl	8000e3c <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d902      	bls.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	74fb      	strb	r3, [r7, #19]
            break;
 8002340:	e006      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ec      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002366:	4904      	ldr	r1, [pc, #16]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800236e:	e009      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	74bb      	strb	r3, [r7, #18]
 8002374:	e006      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002384:	7c7b      	ldrb	r3, [r7, #17]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4b9e      	ldr	r3, [pc, #632]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	4a9d      	ldr	r2, [pc, #628]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002394:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a2:	4b98      	ldr	r3, [pc, #608]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a8:	f023 0203 	bic.w	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	4994      	ldr	r1, [pc, #592]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023c4:	4b8f      	ldr	r3, [pc, #572]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	f023 020c 	bic.w	r2, r3, #12
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	498c      	ldr	r1, [pc, #560]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023e6:	4b87      	ldr	r3, [pc, #540]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	4983      	ldr	r1, [pc, #524]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002408:	4b7e      	ldr	r3, [pc, #504]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	497b      	ldr	r1, [pc, #492]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800242a:	4b76      	ldr	r3, [pc, #472]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002438:	4972      	ldr	r1, [pc, #456]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800244c:	4b6d      	ldr	r3, [pc, #436]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	496a      	ldr	r1, [pc, #424]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800246e:	4b65      	ldr	r3, [pc, #404]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	4961      	ldr	r1, [pc, #388]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002490:	4b5c      	ldr	r3, [pc, #368]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249e:	4959      	ldr	r1, [pc, #356]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b2:	4b54      	ldr	r3, [pc, #336]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c0:	4950      	ldr	r1, [pc, #320]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	4948      	ldr	r1, [pc, #288]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024f6:	4b43      	ldr	r3, [pc, #268]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	493f      	ldr	r1, [pc, #252]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d028      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002518:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002526:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002532:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002536:	d106      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002538:	4b32      	ldr	r3, [pc, #200]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a31      	ldr	r2, [pc, #196]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002542:	60d3      	str	r3, [r2, #12]
 8002544:	e011      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800254a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800254e:	d10c      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	2101      	movs	r1, #1
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f8c8 	bl	80026ec <RCCEx_PLLSAI1_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d028      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002576:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	491f      	ldr	r1, [pc, #124]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002594:	d106      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a0:	60d3      	str	r3, [r2, #12]
 80025a2:	e011      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2101      	movs	r1, #1
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 f899 	bl	80026ec <RCCEx_PLLSAI1_Config>
 80025ba:	4603      	mov	r3, r0
 80025bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025be:	7cfb      	ldrb	r3, [r7, #19]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d02b      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e2:	4908      	ldr	r1, [pc, #32]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025f2:	d109      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a02      	ldr	r2, [pc, #8]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025fe:	60d3      	str	r3, [r2, #12]
 8002600:	e014      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002610:	d10c      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	2101      	movs	r1, #1
 8002618:	4618      	mov	r0, r3
 800261a:	f000 f867 	bl	80026ec <RCCEx_PLLSAI1_Config>
 800261e:	4603      	mov	r3, r0
 8002620:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d02f      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002638:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002646:	4928      	ldr	r1, [pc, #160]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002656:	d10d      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3304      	adds	r3, #4
 800265c:	2102      	movs	r1, #2
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f844 	bl	80026ec <RCCEx_PLLSAI1_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d014      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800266e:	7cfb      	ldrb	r3, [r7, #19]
 8002670:	74bb      	strb	r3, [r7, #18]
 8002672:	e011      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800267c:	d10c      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3320      	adds	r3, #32
 8002682:	2102      	movs	r1, #2
 8002684:	4618      	mov	r0, r3
 8002686:	f000 f925 	bl	80028d4 <RCCEx_PLLSAI2_Config>
 800268a:	4603      	mov	r3, r0
 800268c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026a4:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b2:	490d      	ldr	r1, [pc, #52]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026d6:	4904      	ldr	r1, [pc, #16]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026de:	7cbb      	ldrb	r3, [r7, #18]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000

080026ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026fa:	4b75      	ldr	r3, [pc, #468]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d018      	beq.n	8002738 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002706:	4b72      	ldr	r3, [pc, #456]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0203 	and.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d10d      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
       ||
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800271e:	4b6c      	ldr	r3, [pc, #432]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
       ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d047      	beq.n	80027c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e044      	b.n	80027c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d018      	beq.n	8002772 <RCCEx_PLLSAI1_Config+0x86>
 8002740:	2b03      	cmp	r3, #3
 8002742:	d825      	bhi.n	8002790 <RCCEx_PLLSAI1_Config+0xa4>
 8002744:	2b01      	cmp	r3, #1
 8002746:	d002      	beq.n	800274e <RCCEx_PLLSAI1_Config+0x62>
 8002748:	2b02      	cmp	r3, #2
 800274a:	d009      	beq.n	8002760 <RCCEx_PLLSAI1_Config+0x74>
 800274c:	e020      	b.n	8002790 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800274e:	4b60      	ldr	r3, [pc, #384]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d11d      	bne.n	8002796 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275e:	e01a      	b.n	8002796 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002760:	4b5b      	ldr	r3, [pc, #364]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d116      	bne.n	800279a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e013      	b.n	800279a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002772:	4b57      	ldr	r3, [pc, #348]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800277e:	4b54      	ldr	r3, [pc, #336]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800278e:	e006      	b.n	800279e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      break;
 8002794:	e004      	b.n	80027a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002796:	bf00      	nop
 8002798:	e002      	b.n	80027a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800279a:	bf00      	nop
 800279c:	e000      	b.n	80027a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800279e:	bf00      	nop
    }

    if(status == HAL_OK)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10d      	bne.n	80027c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027a6:	4b4a      	ldr	r3, [pc, #296]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6819      	ldr	r1, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	430b      	orrs	r3, r1
 80027bc:	4944      	ldr	r1, [pc, #272]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d17d      	bne.n	80028c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027c8:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a40      	ldr	r2, [pc, #256]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d4:	f7fe fb32 	bl	8000e3c <HAL_GetTick>
 80027d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027da:	e009      	b.n	80027f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027dc:	f7fe fb2e 	bl	8000e3c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d902      	bls.n	80027f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	73fb      	strb	r3, [r7, #15]
        break;
 80027ee:	e005      	b.n	80027fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027f0:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ef      	bne.n	80027dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d160      	bne.n	80028c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d111      	bne.n	800282c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002808:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6892      	ldr	r2, [r2, #8]
 8002818:	0211      	lsls	r1, r2, #8
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68d2      	ldr	r2, [r2, #12]
 800281e:	0912      	lsrs	r2, r2, #4
 8002820:	0452      	lsls	r2, r2, #17
 8002822:	430a      	orrs	r2, r1
 8002824:	492a      	ldr	r1, [pc, #168]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	610b      	str	r3, [r1, #16]
 800282a:	e027      	b.n	800287c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d112      	bne.n	8002858 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002832:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800283a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6892      	ldr	r2, [r2, #8]
 8002842:	0211      	lsls	r1, r2, #8
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6912      	ldr	r2, [r2, #16]
 8002848:	0852      	lsrs	r2, r2, #1
 800284a:	3a01      	subs	r2, #1
 800284c:	0552      	lsls	r2, r2, #21
 800284e:	430a      	orrs	r2, r1
 8002850:	491f      	ldr	r1, [pc, #124]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	610b      	str	r3, [r1, #16]
 8002856:	e011      	b.n	800287c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002860:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6892      	ldr	r2, [r2, #8]
 8002868:	0211      	lsls	r1, r2, #8
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6952      	ldr	r2, [r2, #20]
 800286e:	0852      	lsrs	r2, r2, #1
 8002870:	3a01      	subs	r2, #1
 8002872:	0652      	lsls	r2, r2, #25
 8002874:	430a      	orrs	r2, r1
 8002876:	4916      	ldr	r1, [pc, #88]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002878:	4313      	orrs	r3, r2
 800287a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002886:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7fe fad8 	bl	8000e3c <HAL_GetTick>
 800288c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800288e:	e009      	b.n	80028a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002890:	f7fe fad4 	bl	8000e3c <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d902      	bls.n	80028a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	73fb      	strb	r3, [r7, #15]
          break;
 80028a2:	e005      	b.n	80028b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ef      	beq.n	8002890 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	4904      	ldr	r1, [pc, #16]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000

080028d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028e2:	4b6a      	ldr	r3, [pc, #424]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d018      	beq.n	8002920 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028ee:	4b67      	ldr	r3, [pc, #412]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0203 	and.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d10d      	bne.n	800291a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
       ||
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002906:	4b61      	ldr	r3, [pc, #388]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
       ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d047      	beq.n	80029aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	e044      	b.n	80029aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d018      	beq.n	800295a <RCCEx_PLLSAI2_Config+0x86>
 8002928:	2b03      	cmp	r3, #3
 800292a:	d825      	bhi.n	8002978 <RCCEx_PLLSAI2_Config+0xa4>
 800292c:	2b01      	cmp	r3, #1
 800292e:	d002      	beq.n	8002936 <RCCEx_PLLSAI2_Config+0x62>
 8002930:	2b02      	cmp	r3, #2
 8002932:	d009      	beq.n	8002948 <RCCEx_PLLSAI2_Config+0x74>
 8002934:	e020      	b.n	8002978 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002936:	4b55      	ldr	r3, [pc, #340]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d11d      	bne.n	800297e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002946:	e01a      	b.n	800297e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002948:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d116      	bne.n	8002982 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002958:	e013      	b.n	8002982 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800295a:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10f      	bne.n	8002986 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002966:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002976:	e006      	b.n	8002986 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
      break;
 800297c:	e004      	b.n	8002988 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800297e:	bf00      	nop
 8002980:	e002      	b.n	8002988 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002982:	bf00      	nop
 8002984:	e000      	b.n	8002988 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002986:	bf00      	nop
    }

    if(status == HAL_OK)
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10d      	bne.n	80029aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	430b      	orrs	r3, r1
 80029a4:	4939      	ldr	r1, [pc, #228]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d167      	bne.n	8002a80 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029b0:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a35      	ldr	r2, [pc, #212]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029bc:	f7fe fa3e 	bl	8000e3c <HAL_GetTick>
 80029c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029c2:	e009      	b.n	80029d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029c4:	f7fe fa3a 	bl	8000e3c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d902      	bls.n	80029d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	73fb      	strb	r3, [r7, #15]
        break;
 80029d6:	e005      	b.n	80029e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029d8:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ef      	bne.n	80029c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d14a      	bne.n	8002a80 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d111      	bne.n	8002a14 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029f0:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6892      	ldr	r2, [r2, #8]
 8002a00:	0211      	lsls	r1, r2, #8
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68d2      	ldr	r2, [r2, #12]
 8002a06:	0912      	lsrs	r2, r2, #4
 8002a08:	0452      	lsls	r2, r2, #17
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	491f      	ldr	r1, [pc, #124]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	614b      	str	r3, [r1, #20]
 8002a12:	e011      	b.n	8002a38 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6892      	ldr	r2, [r2, #8]
 8002a24:	0211      	lsls	r1, r2, #8
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6912      	ldr	r2, [r2, #16]
 8002a2a:	0852      	lsrs	r2, r2, #1
 8002a2c:	3a01      	subs	r2, #1
 8002a2e:	0652      	lsls	r2, r2, #25
 8002a30:	430a      	orrs	r2, r1
 8002a32:	4916      	ldr	r1, [pc, #88]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe f9fa 	bl	8000e3c <HAL_GetTick>
 8002a48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a4a:	e009      	b.n	8002a60 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a4c:	f7fe f9f6 	bl	8000e3c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d902      	bls.n	8002a60 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a5e:	e005      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ef      	beq.n	8002a4c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	4904      	ldr	r1, [pc, #16]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000

08002a90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e049      	b.n	8002b36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fd ff92 	bl	80009e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f000 fe06 	bl	80036e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <HAL_TIM_PWM_Start+0x24>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e03c      	b.n	8002bde <HAL_TIM_PWM_Start+0x9e>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d109      	bne.n	8002b7e <HAL_TIM_PWM_Start+0x3e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	e02f      	b.n	8002bde <HAL_TIM_PWM_Start+0x9e>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d109      	bne.n	8002b98 <HAL_TIM_PWM_Start+0x58>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e022      	b.n	8002bde <HAL_TIM_PWM_Start+0x9e>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d109      	bne.n	8002bb2 <HAL_TIM_PWM_Start+0x72>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	e015      	b.n	8002bde <HAL_TIM_PWM_Start+0x9e>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d109      	bne.n	8002bcc <HAL_TIM_PWM_Start+0x8c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	e008      	b.n	8002bde <HAL_TIM_PWM_Start+0x9e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e09c      	b.n	8002d20 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0xb6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf4:	e023      	b.n	8002c3e <HAL_TIM_PWM_Start+0xfe>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_PWM_Start+0xc6>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c04:	e01b      	b.n	8002c3e <HAL_TIM_PWM_Start+0xfe>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d104      	bne.n	8002c16 <HAL_TIM_PWM_Start+0xd6>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c14:	e013      	b.n	8002c3e <HAL_TIM_PWM_Start+0xfe>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	d104      	bne.n	8002c26 <HAL_TIM_PWM_Start+0xe6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c24:	e00b      	b.n	8002c3e <HAL_TIM_PWM_Start+0xfe>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d104      	bne.n	8002c36 <HAL_TIM_PWM_Start+0xf6>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c34:	e003      	b.n	8002c3e <HAL_TIM_PWM_Start+0xfe>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2201      	movs	r2, #1
 8002c44:	6839      	ldr	r1, [r7, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 f9de 	bl	8004008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a35      	ldr	r2, [pc, #212]	; (8002d28 <HAL_TIM_PWM_Start+0x1e8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d013      	beq.n	8002c7e <HAL_TIM_PWM_Start+0x13e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a34      	ldr	r2, [pc, #208]	; (8002d2c <HAL_TIM_PWM_Start+0x1ec>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00e      	beq.n	8002c7e <HAL_TIM_PWM_Start+0x13e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a32      	ldr	r2, [pc, #200]	; (8002d30 <HAL_TIM_PWM_Start+0x1f0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d009      	beq.n	8002c7e <HAL_TIM_PWM_Start+0x13e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a31      	ldr	r2, [pc, #196]	; (8002d34 <HAL_TIM_PWM_Start+0x1f4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d004      	beq.n	8002c7e <HAL_TIM_PWM_Start+0x13e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a2f      	ldr	r2, [pc, #188]	; (8002d38 <HAL_TIM_PWM_Start+0x1f8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x142>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_TIM_PWM_Start+0x144>
 8002c82:	2300      	movs	r3, #0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d007      	beq.n	8002c98 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a22      	ldr	r2, [pc, #136]	; (8002d28 <HAL_TIM_PWM_Start+0x1e8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01d      	beq.n	8002cde <HAL_TIM_PWM_Start+0x19e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002caa:	d018      	beq.n	8002cde <HAL_TIM_PWM_Start+0x19e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a22      	ldr	r2, [pc, #136]	; (8002d3c <HAL_TIM_PWM_Start+0x1fc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_TIM_PWM_Start+0x19e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a21      	ldr	r2, [pc, #132]	; (8002d40 <HAL_TIM_PWM_Start+0x200>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00e      	beq.n	8002cde <HAL_TIM_PWM_Start+0x19e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <HAL_TIM_PWM_Start+0x204>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_TIM_PWM_Start+0x19e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <HAL_TIM_PWM_Start+0x1ec>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_TIM_PWM_Start+0x19e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <HAL_TIM_PWM_Start+0x1f0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d115      	bne.n	8002d0a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_TIM_PWM_Start+0x208>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b06      	cmp	r3, #6
 8002cee:	d015      	beq.n	8002d1c <HAL_TIM_PWM_Start+0x1dc>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf6:	d011      	beq.n	8002d1c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d08:	e008      	b.n	8002d1c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e000      	b.n	8002d1e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40013400 	.word	0x40013400
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40000c00 	.word	0x40000c00
 8002d48:	00010007 	.word	0x00010007

08002d4c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e049      	b.n	8002df2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fd fe52 	bl	8000a1c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3304      	adds	r3, #4
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	f000 fca8 	bl	80036e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d104      	bne.n	8002e16 <HAL_TIM_IC_Start_IT+0x1a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	e023      	b.n	8002e5e <HAL_TIM_IC_Start_IT+0x62>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d104      	bne.n	8002e26 <HAL_TIM_IC_Start_IT+0x2a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	e01b      	b.n	8002e5e <HAL_TIM_IC_Start_IT+0x62>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d104      	bne.n	8002e36 <HAL_TIM_IC_Start_IT+0x3a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	e013      	b.n	8002e5e <HAL_TIM_IC_Start_IT+0x62>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b0c      	cmp	r3, #12
 8002e3a:	d104      	bne.n	8002e46 <HAL_TIM_IC_Start_IT+0x4a>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	e00b      	b.n	8002e5e <HAL_TIM_IC_Start_IT+0x62>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d104      	bne.n	8002e56 <HAL_TIM_IC_Start_IT+0x5a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	e003      	b.n	8002e5e <HAL_TIM_IC_Start_IT+0x62>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d104      	bne.n	8002e70 <HAL_TIM_IC_Start_IT+0x74>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e013      	b.n	8002e98 <HAL_TIM_IC_Start_IT+0x9c>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d104      	bne.n	8002e80 <HAL_TIM_IC_Start_IT+0x84>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e00b      	b.n	8002e98 <HAL_TIM_IC_Start_IT+0x9c>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d104      	bne.n	8002e90 <HAL_TIM_IC_Start_IT+0x94>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	e003      	b.n	8002e98 <HAL_TIM_IC_Start_IT+0x9c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d102      	bne.n	8002ea6 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ea0:	7bbb      	ldrb	r3, [r7, #14]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d001      	beq.n	8002eaa <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e0d8      	b.n	800305c <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_IC_Start_IT+0xbe>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb8:	e023      	b.n	8002f02 <HAL_TIM_IC_Start_IT+0x106>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d104      	bne.n	8002eca <HAL_TIM_IC_Start_IT+0xce>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec8:	e01b      	b.n	8002f02 <HAL_TIM_IC_Start_IT+0x106>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_IC_Start_IT+0xde>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed8:	e013      	b.n	8002f02 <HAL_TIM_IC_Start_IT+0x106>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_IC_Start_IT+0xee>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ee8:	e00b      	b.n	8002f02 <HAL_TIM_IC_Start_IT+0x106>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d104      	bne.n	8002efa <HAL_TIM_IC_Start_IT+0xfe>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef8:	e003      	b.n	8002f02 <HAL_TIM_IC_Start_IT+0x106>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d104      	bne.n	8002f12 <HAL_TIM_IC_Start_IT+0x116>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f10:	e013      	b.n	8002f3a <HAL_TIM_IC_Start_IT+0x13e>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d104      	bne.n	8002f22 <HAL_TIM_IC_Start_IT+0x126>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f20:	e00b      	b.n	8002f3a <HAL_TIM_IC_Start_IT+0x13e>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d104      	bne.n	8002f32 <HAL_TIM_IC_Start_IT+0x136>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f30:	e003      	b.n	8002f3a <HAL_TIM_IC_Start_IT+0x13e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b0c      	cmp	r3, #12
 8002f3e:	d841      	bhi.n	8002fc4 <HAL_TIM_IC_Start_IT+0x1c8>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <HAL_TIM_IC_Start_IT+0x14c>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f7d 	.word	0x08002f7d
 8002f4c:	08002fc5 	.word	0x08002fc5
 8002f50:	08002fc5 	.word	0x08002fc5
 8002f54:	08002fc5 	.word	0x08002fc5
 8002f58:	08002f8f 	.word	0x08002f8f
 8002f5c:	08002fc5 	.word	0x08002fc5
 8002f60:	08002fc5 	.word	0x08002fc5
 8002f64:	08002fc5 	.word	0x08002fc5
 8002f68:	08002fa1 	.word	0x08002fa1
 8002f6c:	08002fc5 	.word	0x08002fc5
 8002f70:	08002fc5 	.word	0x08002fc5
 8002f74:	08002fc5 	.word	0x08002fc5
 8002f78:	08002fb3 	.word	0x08002fb3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0202 	orr.w	r2, r2, #2
 8002f8a:	60da      	str	r2, [r3, #12]
      break;
 8002f8c:	e01b      	b.n	8002fc6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0204 	orr.w	r2, r2, #4
 8002f9c:	60da      	str	r2, [r3, #12]
      break;
 8002f9e:	e012      	b.n	8002fc6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0208 	orr.w	r2, r2, #8
 8002fae:	60da      	str	r2, [r3, #12]
      break;
 8002fb0:	e009      	b.n	8002fc6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0210 	orr.w	r2, r2, #16
 8002fc0:	60da      	str	r2, [r3, #12]
      break;
 8002fc2:	e000      	b.n	8002fc6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8002fc4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	6839      	ldr	r1, [r7, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f001 f81a 	bl	8004008 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a22      	ldr	r2, [pc, #136]	; (8003064 <HAL_TIM_IC_Start_IT+0x268>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01d      	beq.n	800301a <HAL_TIM_IC_Start_IT+0x21e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe6:	d018      	beq.n	800301a <HAL_TIM_IC_Start_IT+0x21e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <HAL_TIM_IC_Start_IT+0x26c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_TIM_IC_Start_IT+0x21e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_TIM_IC_Start_IT+0x270>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00e      	beq.n	800301a <HAL_TIM_IC_Start_IT+0x21e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <HAL_TIM_IC_Start_IT+0x274>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_TIM_IC_Start_IT+0x21e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1a      	ldr	r2, [pc, #104]	; (8003074 <HAL_TIM_IC_Start_IT+0x278>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_TIM_IC_Start_IT+0x21e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a18      	ldr	r2, [pc, #96]	; (8003078 <HAL_TIM_IC_Start_IT+0x27c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d115      	bne.n	8003046 <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	4b16      	ldr	r3, [pc, #88]	; (800307c <HAL_TIM_IC_Start_IT+0x280>)
 8003022:	4013      	ands	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b06      	cmp	r3, #6
 800302a:	d015      	beq.n	8003058 <HAL_TIM_IC_Start_IT+0x25c>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003032:	d011      	beq.n	8003058 <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003044:	e008      	b.n	8003058 <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e000      	b.n	800305a <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003058:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40000400 	.word	0x40000400
 800306c:	40000800 	.word	0x40000800
 8003070:	40000c00 	.word	0x40000c00
 8003074:	40013400 	.word	0x40013400
 8003078:	40014000 	.word	0x40014000
 800307c:	00010007 	.word	0x00010007

08003080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b02      	cmp	r3, #2
 8003094:	d122      	bne.n	80030dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d11b      	bne.n	80030dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0202 	mvn.w	r2, #2
 80030ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fd fc30 	bl	8000928 <HAL_TIM_IC_CaptureCallback>
 80030c8:	e005      	b.n	80030d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 faea 	bl	80036a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 faf1 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d122      	bne.n	8003130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d11b      	bne.n	8003130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0204 	mvn.w	r2, #4
 8003100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2202      	movs	r2, #2
 8003106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fd fc06 	bl	8000928 <HAL_TIM_IC_CaptureCallback>
 800311c:	e005      	b.n	800312a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fac0 	bl	80036a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fac7 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b08      	cmp	r3, #8
 800313c:	d122      	bne.n	8003184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b08      	cmp	r3, #8
 800314a:	d11b      	bne.n	8003184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0208 	mvn.w	r2, #8
 8003154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2204      	movs	r2, #4
 800315a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fd fbdc 	bl	8000928 <HAL_TIM_IC_CaptureCallback>
 8003170:	e005      	b.n	800317e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fa96 	bl	80036a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fa9d 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b10      	cmp	r3, #16
 8003190:	d122      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b10      	cmp	r3, #16
 800319e:	d11b      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0210 	mvn.w	r2, #16
 80031a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2208      	movs	r2, #8
 80031ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fbb2 	bl	8000928 <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fa6c 	bl	80036a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fa73 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10e      	bne.n	8003204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d107      	bne.n	8003204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0201 	mvn.w	r2, #1
 80031fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fa46 	bl	8003690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320e:	2b80      	cmp	r3, #128	; 0x80
 8003210:	d10e      	bne.n	8003230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d107      	bne.n	8003230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 ffa4 	bl	8004178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800323e:	d10e      	bne.n	800325e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324a:	2b80      	cmp	r3, #128	; 0x80
 800324c:	d107      	bne.n	800325e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 ff97 	bl	800418c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003268:	2b40      	cmp	r3, #64	; 0x40
 800326a:	d10e      	bne.n	800328a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d107      	bne.n	800328a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 fa21 	bl	80036cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b20      	cmp	r3, #32
 8003296:	d10e      	bne.n	80032b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d107      	bne.n	80032b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f06f 0220 	mvn.w	r2, #32
 80032ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 ff57 	bl	8004164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_TIM_IC_ConfigChannel+0x1a>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e082      	b.n	80033de <HAL_TIM_IC_ConfigChannel+0x120>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d11b      	bne.n	800331e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	6819      	ldr	r1, [r3, #0]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f000 fd63 	bl	8003dc0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 020c 	bic.w	r2, r2, #12
 8003308:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6999      	ldr	r1, [r3, #24]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	619a      	str	r2, [r3, #24]
 800331c:	e05a      	b.n	80033d4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d11c      	bne.n	800335e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	6819      	ldr	r1, [r3, #0]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f000 fdb2 	bl	8003e9c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003346:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6999      	ldr	r1, [r3, #24]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	021a      	lsls	r2, r3, #8
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	619a      	str	r2, [r3, #24]
 800335c:	e03a      	b.n	80033d4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d11b      	bne.n	800339c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	6819      	ldr	r1, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f000 fdcf 	bl	8003f16 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 020c 	bic.w	r2, r2, #12
 8003386:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69d9      	ldr	r1, [r3, #28]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	61da      	str	r2, [r3, #28]
 800339a:	e01b      	b.n	80033d4 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	6819      	ldr	r1, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f000 fdef 	bl	8003f8e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80033be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69d9      	ldr	r1, [r3, #28]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	021a      	lsls	r2, r3, #8
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033fe:	2302      	movs	r3, #2
 8003400:	e0fd      	b.n	80035fe <HAL_TIM_PWM_ConfigChannel+0x216>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b14      	cmp	r3, #20
 800340e:	f200 80f0 	bhi.w	80035f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003412:	a201      	add	r2, pc, #4	; (adr r2, 8003418 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003418:	0800346d 	.word	0x0800346d
 800341c:	080035f3 	.word	0x080035f3
 8003420:	080035f3 	.word	0x080035f3
 8003424:	080035f3 	.word	0x080035f3
 8003428:	080034ad 	.word	0x080034ad
 800342c:	080035f3 	.word	0x080035f3
 8003430:	080035f3 	.word	0x080035f3
 8003434:	080035f3 	.word	0x080035f3
 8003438:	080034ef 	.word	0x080034ef
 800343c:	080035f3 	.word	0x080035f3
 8003440:	080035f3 	.word	0x080035f3
 8003444:	080035f3 	.word	0x080035f3
 8003448:	0800352f 	.word	0x0800352f
 800344c:	080035f3 	.word	0x080035f3
 8003450:	080035f3 	.word	0x080035f3
 8003454:	080035f3 	.word	0x080035f3
 8003458:	08003571 	.word	0x08003571
 800345c:	080035f3 	.word	0x080035f3
 8003460:	080035f3 	.word	0x080035f3
 8003464:	080035f3 	.word	0x080035f3
 8003468:	080035b1 	.word	0x080035b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f9ce 	bl	8003814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0208 	orr.w	r2, r2, #8
 8003486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0204 	bic.w	r2, r2, #4
 8003496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6999      	ldr	r1, [r3, #24]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	619a      	str	r2, [r3, #24]
      break;
 80034aa:	e0a3      	b.n	80035f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fa3e 	bl	8003934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6999      	ldr	r1, [r3, #24]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	021a      	lsls	r2, r3, #8
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	619a      	str	r2, [r3, #24]
      break;
 80034ec:	e082      	b.n	80035f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 faa7 	bl	8003a48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0208 	orr.w	r2, r2, #8
 8003508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0204 	bic.w	r2, r2, #4
 8003518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69d9      	ldr	r1, [r3, #28]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	61da      	str	r2, [r3, #28]
      break;
 800352c:	e062      	b.n	80035f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fb0f 	bl	8003b58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69d9      	ldr	r1, [r3, #28]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	021a      	lsls	r2, r3, #8
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	61da      	str	r2, [r3, #28]
      break;
 800356e:	e041      	b.n	80035f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fb58 	bl	8003c2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0208 	orr.w	r2, r2, #8
 800358a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0204 	bic.w	r2, r2, #4
 800359a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035ae:	e021      	b.n	80035f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fb9c 	bl	8003cf4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	021a      	lsls	r2, r3, #8
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035f0:	e000      	b.n	80035f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80035f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop

08003608 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b0c      	cmp	r3, #12
 800361a:	d831      	bhi.n	8003680 <HAL_TIM_ReadCapturedValue+0x78>
 800361c:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <HAL_TIM_ReadCapturedValue+0x1c>)
 800361e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003622:	bf00      	nop
 8003624:	08003659 	.word	0x08003659
 8003628:	08003681 	.word	0x08003681
 800362c:	08003681 	.word	0x08003681
 8003630:	08003681 	.word	0x08003681
 8003634:	08003663 	.word	0x08003663
 8003638:	08003681 	.word	0x08003681
 800363c:	08003681 	.word	0x08003681
 8003640:	08003681 	.word	0x08003681
 8003644:	0800366d 	.word	0x0800366d
 8003648:	08003681 	.word	0x08003681
 800364c:	08003681 	.word	0x08003681
 8003650:	08003681 	.word	0x08003681
 8003654:	08003677 	.word	0x08003677
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365e:	60fb      	str	r3, [r7, #12]

      break;
 8003660:	e00f      	b.n	8003682 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	60fb      	str	r3, [r7, #12]

      break;
 800366a:	e00a      	b.n	8003682 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	60fb      	str	r3, [r7, #12]

      break;
 8003674:	e005      	b.n	8003682 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	60fb      	str	r3, [r7, #12]

      break;
 800367e:	e000      	b.n	8003682 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003680:	bf00      	nop
  }

  return tmpreg;
 8003682:	68fb      	ldr	r3, [r7, #12]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a40      	ldr	r2, [pc, #256]	; (80037f4 <TIM_Base_SetConfig+0x114>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fe:	d00f      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a3d      	ldr	r2, [pc, #244]	; (80037f8 <TIM_Base_SetConfig+0x118>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00b      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a3c      	ldr	r2, [pc, #240]	; (80037fc <TIM_Base_SetConfig+0x11c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3b      	ldr	r2, [pc, #236]	; (8003800 <TIM_Base_SetConfig+0x120>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3a      	ldr	r2, [pc, #232]	; (8003804 <TIM_Base_SetConfig+0x124>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d108      	bne.n	8003732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a2f      	ldr	r2, [pc, #188]	; (80037f4 <TIM_Base_SetConfig+0x114>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01f      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d01b      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a2c      	ldr	r2, [pc, #176]	; (80037f8 <TIM_Base_SetConfig+0x118>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d017      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2b      	ldr	r2, [pc, #172]	; (80037fc <TIM_Base_SetConfig+0x11c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d013      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <TIM_Base_SetConfig+0x120>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00f      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a29      	ldr	r2, [pc, #164]	; (8003804 <TIM_Base_SetConfig+0x124>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00b      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a28      	ldr	r2, [pc, #160]	; (8003808 <TIM_Base_SetConfig+0x128>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d007      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a27      	ldr	r2, [pc, #156]	; (800380c <TIM_Base_SetConfig+0x12c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d003      	beq.n	800377a <TIM_Base_SetConfig+0x9a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a26      	ldr	r2, [pc, #152]	; (8003810 <TIM_Base_SetConfig+0x130>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d108      	bne.n	800378c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a10      	ldr	r2, [pc, #64]	; (80037f4 <TIM_Base_SetConfig+0x114>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00f      	beq.n	80037d8 <TIM_Base_SetConfig+0xf8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <TIM_Base_SetConfig+0x124>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00b      	beq.n	80037d8 <TIM_Base_SetConfig+0xf8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <TIM_Base_SetConfig+0x128>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <TIM_Base_SetConfig+0xf8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a10      	ldr	r2, [pc, #64]	; (800380c <TIM_Base_SetConfig+0x12c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_Base_SetConfig+0xf8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a0f      	ldr	r2, [pc, #60]	; (8003810 <TIM_Base_SetConfig+0x130>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d103      	bne.n	80037e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	615a      	str	r2, [r3, #20]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800
 8003800:	40000c00 	.word	0x40000c00
 8003804:	40013400 	.word	0x40013400
 8003808:	40014000 	.word	0x40014000
 800380c:	40014400 	.word	0x40014400
 8003810:	40014800 	.word	0x40014800

08003814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	f023 0201 	bic.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0303 	bic.w	r3, r3, #3
 800384e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f023 0302 	bic.w	r3, r3, #2
 8003860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a2c      	ldr	r2, [pc, #176]	; (8003920 <TIM_OC1_SetConfig+0x10c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00f      	beq.n	8003894 <TIM_OC1_SetConfig+0x80>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a2b      	ldr	r2, [pc, #172]	; (8003924 <TIM_OC1_SetConfig+0x110>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00b      	beq.n	8003894 <TIM_OC1_SetConfig+0x80>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a2a      	ldr	r2, [pc, #168]	; (8003928 <TIM_OC1_SetConfig+0x114>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <TIM_OC1_SetConfig+0x80>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a29      	ldr	r2, [pc, #164]	; (800392c <TIM_OC1_SetConfig+0x118>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d003      	beq.n	8003894 <TIM_OC1_SetConfig+0x80>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a28      	ldr	r2, [pc, #160]	; (8003930 <TIM_OC1_SetConfig+0x11c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d10c      	bne.n	80038ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f023 0308 	bic.w	r3, r3, #8
 800389a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <TIM_OC1_SetConfig+0x10c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00f      	beq.n	80038d6 <TIM_OC1_SetConfig+0xc2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1a      	ldr	r2, [pc, #104]	; (8003924 <TIM_OC1_SetConfig+0x110>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <TIM_OC1_SetConfig+0xc2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a19      	ldr	r2, [pc, #100]	; (8003928 <TIM_OC1_SetConfig+0x114>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <TIM_OC1_SetConfig+0xc2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a18      	ldr	r2, [pc, #96]	; (800392c <TIM_OC1_SetConfig+0x118>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d003      	beq.n	80038d6 <TIM_OC1_SetConfig+0xc2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a17      	ldr	r2, [pc, #92]	; (8003930 <TIM_OC1_SetConfig+0x11c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d111      	bne.n	80038fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	621a      	str	r2, [r3, #32]
}
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40012c00 	.word	0x40012c00
 8003924:	40013400 	.word	0x40013400
 8003928:	40014000 	.word	0x40014000
 800392c:	40014400 	.word	0x40014400
 8003930:	40014800 	.word	0x40014800

08003934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f023 0210 	bic.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f023 0320 	bic.w	r3, r3, #32
 8003982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a28      	ldr	r2, [pc, #160]	; (8003a34 <TIM_OC2_SetConfig+0x100>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_OC2_SetConfig+0x6c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a27      	ldr	r2, [pc, #156]	; (8003a38 <TIM_OC2_SetConfig+0x104>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d10d      	bne.n	80039bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <TIM_OC2_SetConfig+0x100>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00f      	beq.n	80039e4 <TIM_OC2_SetConfig+0xb0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <TIM_OC2_SetConfig+0x104>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <TIM_OC2_SetConfig+0xb0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <TIM_OC2_SetConfig+0x108>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d007      	beq.n	80039e4 <TIM_OC2_SetConfig+0xb0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a1a      	ldr	r2, [pc, #104]	; (8003a40 <TIM_OC2_SetConfig+0x10c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_OC2_SetConfig+0xb0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a19      	ldr	r2, [pc, #100]	; (8003a44 <TIM_OC2_SetConfig+0x110>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d113      	bne.n	8003a0c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	621a      	str	r2, [r3, #32]
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40012c00 	.word	0x40012c00
 8003a38:	40013400 	.word	0x40013400
 8003a3c:	40014000 	.word	0x40014000
 8003a40:	40014400 	.word	0x40014400
 8003a44:	40014800 	.word	0x40014800

08003a48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0303 	bic.w	r3, r3, #3
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <TIM_OC3_SetConfig+0xfc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d003      	beq.n	8003ab2 <TIM_OC3_SetConfig+0x6a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a26      	ldr	r2, [pc, #152]	; (8003b48 <TIM_OC3_SetConfig+0x100>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d10d      	bne.n	8003ace <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <TIM_OC3_SetConfig+0xfc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00f      	beq.n	8003af6 <TIM_OC3_SetConfig+0xae>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <TIM_OC3_SetConfig+0x100>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <TIM_OC3_SetConfig+0xae>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <TIM_OC3_SetConfig+0x104>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d007      	beq.n	8003af6 <TIM_OC3_SetConfig+0xae>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a19      	ldr	r2, [pc, #100]	; (8003b50 <TIM_OC3_SetConfig+0x108>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d003      	beq.n	8003af6 <TIM_OC3_SetConfig+0xae>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <TIM_OC3_SetConfig+0x10c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d113      	bne.n	8003b1e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	621a      	str	r2, [r3, #32]
}
 8003b38:	bf00      	nop
 8003b3a:	371c      	adds	r7, #28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	40012c00 	.word	0x40012c00
 8003b48:	40013400 	.word	0x40013400
 8003b4c:	40014000 	.word	0x40014000
 8003b50:	40014400 	.word	0x40014400
 8003b54:	40014800 	.word	0x40014800

08003b58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	031b      	lsls	r3, r3, #12
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <TIM_OC4_SetConfig+0xc0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00f      	beq.n	8003bdc <TIM_OC4_SetConfig+0x84>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a17      	ldr	r2, [pc, #92]	; (8003c1c <TIM_OC4_SetConfig+0xc4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00b      	beq.n	8003bdc <TIM_OC4_SetConfig+0x84>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <TIM_OC4_SetConfig+0xc8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <TIM_OC4_SetConfig+0x84>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <TIM_OC4_SetConfig+0xcc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_OC4_SetConfig+0x84>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <TIM_OC4_SetConfig+0xd0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d109      	bne.n	8003bf0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	019b      	lsls	r3, r3, #6
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40013400 	.word	0x40013400
 8003c20:	40014000 	.word	0x40014000
 8003c24:	40014400 	.word	0x40014400
 8003c28:	40014800 	.word	0x40014800

08003c2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	041b      	lsls	r3, r3, #16
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a17      	ldr	r2, [pc, #92]	; (8003ce0 <TIM_OC5_SetConfig+0xb4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00f      	beq.n	8003ca6 <TIM_OC5_SetConfig+0x7a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a16      	ldr	r2, [pc, #88]	; (8003ce4 <TIM_OC5_SetConfig+0xb8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00b      	beq.n	8003ca6 <TIM_OC5_SetConfig+0x7a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <TIM_OC5_SetConfig+0xbc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d007      	beq.n	8003ca6 <TIM_OC5_SetConfig+0x7a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <TIM_OC5_SetConfig+0xc0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d003      	beq.n	8003ca6 <TIM_OC5_SetConfig+0x7a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <TIM_OC5_SetConfig+0xc4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d109      	bne.n	8003cba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	621a      	str	r2, [r3, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	40013400 	.word	0x40013400
 8003ce8:	40014000 	.word	0x40014000
 8003cec:	40014400 	.word	0x40014400
 8003cf0:	40014800 	.word	0x40014800

08003cf4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	051b      	lsls	r3, r3, #20
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a18      	ldr	r2, [pc, #96]	; (8003dac <TIM_OC6_SetConfig+0xb8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00f      	beq.n	8003d70 <TIM_OC6_SetConfig+0x7c>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <TIM_OC6_SetConfig+0xbc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <TIM_OC6_SetConfig+0x7c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <TIM_OC6_SetConfig+0xc0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <TIM_OC6_SetConfig+0x7c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a15      	ldr	r2, [pc, #84]	; (8003db8 <TIM_OC6_SetConfig+0xc4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_OC6_SetConfig+0x7c>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a14      	ldr	r2, [pc, #80]	; (8003dbc <TIM_OC6_SetConfig+0xc8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d109      	bne.n	8003d84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	029b      	lsls	r3, r3, #10
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	40013400 	.word	0x40013400
 8003db4:	40014000 	.word	0x40014000
 8003db8:	40014400 	.word	0x40014400
 8003dbc:	40014800 	.word	0x40014800

08003dc0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	f023 0201 	bic.w	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4a26      	ldr	r2, [pc, #152]	; (8003e84 <TIM_TI1_SetConfig+0xc4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d017      	beq.n	8003e1e <TIM_TI1_SetConfig+0x5e>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df4:	d013      	beq.n	8003e1e <TIM_TI1_SetConfig+0x5e>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a23      	ldr	r2, [pc, #140]	; (8003e88 <TIM_TI1_SetConfig+0xc8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00f      	beq.n	8003e1e <TIM_TI1_SetConfig+0x5e>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <TIM_TI1_SetConfig+0xcc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00b      	beq.n	8003e1e <TIM_TI1_SetConfig+0x5e>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <TIM_TI1_SetConfig+0xd0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <TIM_TI1_SetConfig+0x5e>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a20      	ldr	r2, [pc, #128]	; (8003e94 <TIM_TI1_SetConfig+0xd4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_TI1_SetConfig+0x5e>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a1f      	ldr	r2, [pc, #124]	; (8003e98 <TIM_TI1_SetConfig+0xd8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d101      	bne.n	8003e22 <TIM_TI1_SetConfig+0x62>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <TIM_TI1_SetConfig+0x64>
 8003e22:	2300      	movs	r3, #0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e003      	b.n	8003e42 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f023 030a 	bic.w	r3, r3, #10
 8003e5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f003 030a 	and.w	r3, r3, #10
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	621a      	str	r2, [r3, #32]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40012c00 	.word	0x40012c00
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40013400 	.word	0x40013400
 8003e98:	40014000 	.word	0x40014000

08003e9c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f023 0210 	bic.w	r2, r3, #16
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	031b      	lsls	r3, r3, #12
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b087      	sub	sp, #28
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0303 	bic.w	r3, r3, #3
 8003f42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003f66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b087      	sub	sp, #28
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	607a      	str	r2, [r7, #4]
 8003f9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	031b      	lsls	r3, r3, #12
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	031b      	lsls	r3, r3, #12
 8003fe6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	621a      	str	r2, [r3, #32]
}
 8003ffc:	bf00      	nop
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	2201      	movs	r2, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a1a      	ldr	r2, [r3, #32]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	43db      	mvns	r3, r3
 800402a:	401a      	ands	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	431a      	orrs	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004068:	2302      	movs	r3, #2
 800406a:	e068      	b.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a2e      	ldr	r2, [pc, #184]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d004      	beq.n	80040a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2d      	ldr	r2, [pc, #180]	; (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d108      	bne.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1e      	ldr	r2, [pc, #120]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d01d      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040de:	d018      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1b      	ldr	r2, [pc, #108]	; (8004154 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d013      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a1a      	ldr	r2, [pc, #104]	; (8004158 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00e      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a18      	ldr	r2, [pc, #96]	; (800415c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d009      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a13      	ldr	r2, [pc, #76]	; (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d004      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a14      	ldr	r2, [pc, #80]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d10c      	bne.n	800412c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	4313      	orrs	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40013400 	.word	0x40013400
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40000c00 	.word	0x40000c00
 8004160:	40014000 	.word	0x40014000

08004164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e040      	b.n	8004234 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fc fca8 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2224      	movs	r2, #36	; 0x24
 80041cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0201 	bic.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8c0 	bl	8004364 <UART_SetConfig>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e022      	b.n	8004234 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fb3e 	bl	8004878 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800420a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800421a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fbc5 	bl	80049bc <UART_CheckIdleState>
 8004232:	4603      	mov	r3, r0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004250:	2b20      	cmp	r3, #32
 8004252:	f040 8082 	bne.w	800435a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_UART_Transmit+0x26>
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e07a      	b.n	800435c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_UART_Transmit+0x38>
 8004270:	2302      	movs	r3, #2
 8004272:	e073      	b.n	800435c <HAL_UART_Transmit+0x120>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2221      	movs	r2, #33	; 0x21
 8004288:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800428a:	f7fc fdd7 	bl	8000e3c <HAL_GetTick>
 800428e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	88fa      	ldrh	r2, [r7, #6]
 8004294:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a8:	d108      	bne.n	80042bc <HAL_UART_Transmit+0x80>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d104      	bne.n	80042bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	e003      	b.n	80042c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80042cc:	e02d      	b.n	800432a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2200      	movs	r2, #0
 80042d6:	2180      	movs	r1, #128	; 0x80
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fbb8 	bl	8004a4e <UART_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e039      	b.n	800435c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	881a      	ldrh	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042fa:	b292      	uxth	r2, r2
 80042fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	3302      	adds	r3, #2
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	e008      	b.n	8004318 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	b292      	uxth	r2, r2
 8004310:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	3301      	adds	r3, #1
 8004316:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1cb      	bne.n	80042ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2200      	movs	r2, #0
 800433e:	2140      	movs	r1, #64	; 0x40
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fb84 	bl	8004a4e <UART_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e005      	b.n	800435c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
  }
}
 800435c:	4618      	mov	r0, r3
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004364:	b5b0      	push	{r4, r5, r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	4313      	orrs	r3, r2
 8004386:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4bad      	ldr	r3, [pc, #692]	; (8004644 <UART_SetConfig+0x2e0>)
 8004390:	4013      	ands	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	69f9      	ldr	r1, [r7, #28]
 8004398:	430b      	orrs	r3, r1
 800439a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4aa2      	ldr	r2, [pc, #648]	; (8004648 <UART_SetConfig+0x2e4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	430a      	orrs	r2, r1
 80043de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a99      	ldr	r2, [pc, #612]	; (800464c <UART_SetConfig+0x2e8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d121      	bne.n	800442e <UART_SetConfig+0xca>
 80043ea:	4b99      	ldr	r3, [pc, #612]	; (8004650 <UART_SetConfig+0x2ec>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d817      	bhi.n	8004428 <UART_SetConfig+0xc4>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <UART_SetConfig+0x9c>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	08004411 	.word	0x08004411
 8004404:	0800441d 	.word	0x0800441d
 8004408:	08004417 	.word	0x08004417
 800440c:	08004423 	.word	0x08004423
 8004410:	2301      	movs	r3, #1
 8004412:	76fb      	strb	r3, [r7, #27]
 8004414:	e0e7      	b.n	80045e6 <UART_SetConfig+0x282>
 8004416:	2302      	movs	r3, #2
 8004418:	76fb      	strb	r3, [r7, #27]
 800441a:	e0e4      	b.n	80045e6 <UART_SetConfig+0x282>
 800441c:	2304      	movs	r3, #4
 800441e:	76fb      	strb	r3, [r7, #27]
 8004420:	e0e1      	b.n	80045e6 <UART_SetConfig+0x282>
 8004422:	2308      	movs	r3, #8
 8004424:	76fb      	strb	r3, [r7, #27]
 8004426:	e0de      	b.n	80045e6 <UART_SetConfig+0x282>
 8004428:	2310      	movs	r3, #16
 800442a:	76fb      	strb	r3, [r7, #27]
 800442c:	e0db      	b.n	80045e6 <UART_SetConfig+0x282>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a88      	ldr	r2, [pc, #544]	; (8004654 <UART_SetConfig+0x2f0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d132      	bne.n	800449e <UART_SetConfig+0x13a>
 8004438:	4b85      	ldr	r3, [pc, #532]	; (8004650 <UART_SetConfig+0x2ec>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b0c      	cmp	r3, #12
 8004444:	d828      	bhi.n	8004498 <UART_SetConfig+0x134>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <UART_SetConfig+0xe8>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	08004481 	.word	0x08004481
 8004450:	08004499 	.word	0x08004499
 8004454:	08004499 	.word	0x08004499
 8004458:	08004499 	.word	0x08004499
 800445c:	0800448d 	.word	0x0800448d
 8004460:	08004499 	.word	0x08004499
 8004464:	08004499 	.word	0x08004499
 8004468:	08004499 	.word	0x08004499
 800446c:	08004487 	.word	0x08004487
 8004470:	08004499 	.word	0x08004499
 8004474:	08004499 	.word	0x08004499
 8004478:	08004499 	.word	0x08004499
 800447c:	08004493 	.word	0x08004493
 8004480:	2300      	movs	r3, #0
 8004482:	76fb      	strb	r3, [r7, #27]
 8004484:	e0af      	b.n	80045e6 <UART_SetConfig+0x282>
 8004486:	2302      	movs	r3, #2
 8004488:	76fb      	strb	r3, [r7, #27]
 800448a:	e0ac      	b.n	80045e6 <UART_SetConfig+0x282>
 800448c:	2304      	movs	r3, #4
 800448e:	76fb      	strb	r3, [r7, #27]
 8004490:	e0a9      	b.n	80045e6 <UART_SetConfig+0x282>
 8004492:	2308      	movs	r3, #8
 8004494:	76fb      	strb	r3, [r7, #27]
 8004496:	e0a6      	b.n	80045e6 <UART_SetConfig+0x282>
 8004498:	2310      	movs	r3, #16
 800449a:	76fb      	strb	r3, [r7, #27]
 800449c:	e0a3      	b.n	80045e6 <UART_SetConfig+0x282>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a6d      	ldr	r2, [pc, #436]	; (8004658 <UART_SetConfig+0x2f4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d120      	bne.n	80044ea <UART_SetConfig+0x186>
 80044a8:	4b69      	ldr	r3, [pc, #420]	; (8004650 <UART_SetConfig+0x2ec>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044b2:	2b30      	cmp	r3, #48	; 0x30
 80044b4:	d013      	beq.n	80044de <UART_SetConfig+0x17a>
 80044b6:	2b30      	cmp	r3, #48	; 0x30
 80044b8:	d814      	bhi.n	80044e4 <UART_SetConfig+0x180>
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d009      	beq.n	80044d2 <UART_SetConfig+0x16e>
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d810      	bhi.n	80044e4 <UART_SetConfig+0x180>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <UART_SetConfig+0x168>
 80044c6:	2b10      	cmp	r3, #16
 80044c8:	d006      	beq.n	80044d8 <UART_SetConfig+0x174>
 80044ca:	e00b      	b.n	80044e4 <UART_SetConfig+0x180>
 80044cc:	2300      	movs	r3, #0
 80044ce:	76fb      	strb	r3, [r7, #27]
 80044d0:	e089      	b.n	80045e6 <UART_SetConfig+0x282>
 80044d2:	2302      	movs	r3, #2
 80044d4:	76fb      	strb	r3, [r7, #27]
 80044d6:	e086      	b.n	80045e6 <UART_SetConfig+0x282>
 80044d8:	2304      	movs	r3, #4
 80044da:	76fb      	strb	r3, [r7, #27]
 80044dc:	e083      	b.n	80045e6 <UART_SetConfig+0x282>
 80044de:	2308      	movs	r3, #8
 80044e0:	76fb      	strb	r3, [r7, #27]
 80044e2:	e080      	b.n	80045e6 <UART_SetConfig+0x282>
 80044e4:	2310      	movs	r3, #16
 80044e6:	76fb      	strb	r3, [r7, #27]
 80044e8:	e07d      	b.n	80045e6 <UART_SetConfig+0x282>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a5b      	ldr	r2, [pc, #364]	; (800465c <UART_SetConfig+0x2f8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d120      	bne.n	8004536 <UART_SetConfig+0x1d2>
 80044f4:	4b56      	ldr	r3, [pc, #344]	; (8004650 <UART_SetConfig+0x2ec>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004500:	d013      	beq.n	800452a <UART_SetConfig+0x1c6>
 8004502:	2bc0      	cmp	r3, #192	; 0xc0
 8004504:	d814      	bhi.n	8004530 <UART_SetConfig+0x1cc>
 8004506:	2b80      	cmp	r3, #128	; 0x80
 8004508:	d009      	beq.n	800451e <UART_SetConfig+0x1ba>
 800450a:	2b80      	cmp	r3, #128	; 0x80
 800450c:	d810      	bhi.n	8004530 <UART_SetConfig+0x1cc>
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <UART_SetConfig+0x1b4>
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d006      	beq.n	8004524 <UART_SetConfig+0x1c0>
 8004516:	e00b      	b.n	8004530 <UART_SetConfig+0x1cc>
 8004518:	2300      	movs	r3, #0
 800451a:	76fb      	strb	r3, [r7, #27]
 800451c:	e063      	b.n	80045e6 <UART_SetConfig+0x282>
 800451e:	2302      	movs	r3, #2
 8004520:	76fb      	strb	r3, [r7, #27]
 8004522:	e060      	b.n	80045e6 <UART_SetConfig+0x282>
 8004524:	2304      	movs	r3, #4
 8004526:	76fb      	strb	r3, [r7, #27]
 8004528:	e05d      	b.n	80045e6 <UART_SetConfig+0x282>
 800452a:	2308      	movs	r3, #8
 800452c:	76fb      	strb	r3, [r7, #27]
 800452e:	e05a      	b.n	80045e6 <UART_SetConfig+0x282>
 8004530:	2310      	movs	r3, #16
 8004532:	76fb      	strb	r3, [r7, #27]
 8004534:	e057      	b.n	80045e6 <UART_SetConfig+0x282>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a49      	ldr	r2, [pc, #292]	; (8004660 <UART_SetConfig+0x2fc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d125      	bne.n	800458c <UART_SetConfig+0x228>
 8004540:	4b43      	ldr	r3, [pc, #268]	; (8004650 <UART_SetConfig+0x2ec>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800454e:	d017      	beq.n	8004580 <UART_SetConfig+0x21c>
 8004550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004554:	d817      	bhi.n	8004586 <UART_SetConfig+0x222>
 8004556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455a:	d00b      	beq.n	8004574 <UART_SetConfig+0x210>
 800455c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004560:	d811      	bhi.n	8004586 <UART_SetConfig+0x222>
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <UART_SetConfig+0x20a>
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	d006      	beq.n	800457a <UART_SetConfig+0x216>
 800456c:	e00b      	b.n	8004586 <UART_SetConfig+0x222>
 800456e:	2300      	movs	r3, #0
 8004570:	76fb      	strb	r3, [r7, #27]
 8004572:	e038      	b.n	80045e6 <UART_SetConfig+0x282>
 8004574:	2302      	movs	r3, #2
 8004576:	76fb      	strb	r3, [r7, #27]
 8004578:	e035      	b.n	80045e6 <UART_SetConfig+0x282>
 800457a:	2304      	movs	r3, #4
 800457c:	76fb      	strb	r3, [r7, #27]
 800457e:	e032      	b.n	80045e6 <UART_SetConfig+0x282>
 8004580:	2308      	movs	r3, #8
 8004582:	76fb      	strb	r3, [r7, #27]
 8004584:	e02f      	b.n	80045e6 <UART_SetConfig+0x282>
 8004586:	2310      	movs	r3, #16
 8004588:	76fb      	strb	r3, [r7, #27]
 800458a:	e02c      	b.n	80045e6 <UART_SetConfig+0x282>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a2d      	ldr	r2, [pc, #180]	; (8004648 <UART_SetConfig+0x2e4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d125      	bne.n	80045e2 <UART_SetConfig+0x27e>
 8004596:	4b2e      	ldr	r3, [pc, #184]	; (8004650 <UART_SetConfig+0x2ec>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045a4:	d017      	beq.n	80045d6 <UART_SetConfig+0x272>
 80045a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045aa:	d817      	bhi.n	80045dc <UART_SetConfig+0x278>
 80045ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b0:	d00b      	beq.n	80045ca <UART_SetConfig+0x266>
 80045b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b6:	d811      	bhi.n	80045dc <UART_SetConfig+0x278>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <UART_SetConfig+0x260>
 80045bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c0:	d006      	beq.n	80045d0 <UART_SetConfig+0x26c>
 80045c2:	e00b      	b.n	80045dc <UART_SetConfig+0x278>
 80045c4:	2300      	movs	r3, #0
 80045c6:	76fb      	strb	r3, [r7, #27]
 80045c8:	e00d      	b.n	80045e6 <UART_SetConfig+0x282>
 80045ca:	2302      	movs	r3, #2
 80045cc:	76fb      	strb	r3, [r7, #27]
 80045ce:	e00a      	b.n	80045e6 <UART_SetConfig+0x282>
 80045d0:	2304      	movs	r3, #4
 80045d2:	76fb      	strb	r3, [r7, #27]
 80045d4:	e007      	b.n	80045e6 <UART_SetConfig+0x282>
 80045d6:	2308      	movs	r3, #8
 80045d8:	76fb      	strb	r3, [r7, #27]
 80045da:	e004      	b.n	80045e6 <UART_SetConfig+0x282>
 80045dc:	2310      	movs	r3, #16
 80045de:	76fb      	strb	r3, [r7, #27]
 80045e0:	e001      	b.n	80045e6 <UART_SetConfig+0x282>
 80045e2:	2310      	movs	r3, #16
 80045e4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a17      	ldr	r2, [pc, #92]	; (8004648 <UART_SetConfig+0x2e4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	f040 8087 	bne.w	8004700 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045f2:	7efb      	ldrb	r3, [r7, #27]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d837      	bhi.n	8004668 <UART_SetConfig+0x304>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <UART_SetConfig+0x29c>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004625 	.word	0x08004625
 8004604:	08004669 	.word	0x08004669
 8004608:	0800462d 	.word	0x0800462d
 800460c:	08004669 	.word	0x08004669
 8004610:	08004633 	.word	0x08004633
 8004614:	08004669 	.word	0x08004669
 8004618:	08004669 	.word	0x08004669
 800461c:	08004669 	.word	0x08004669
 8004620:	0800463b 	.word	0x0800463b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004624:	f7fd fcec 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 8004628:	6178      	str	r0, [r7, #20]
        break;
 800462a:	e022      	b.n	8004672 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800462c:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <UART_SetConfig+0x300>)
 800462e:	617b      	str	r3, [r7, #20]
        break;
 8004630:	e01f      	b.n	8004672 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004632:	f7fd fc4d 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8004636:	6178      	str	r0, [r7, #20]
        break;
 8004638:	e01b      	b.n	8004672 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800463e:	617b      	str	r3, [r7, #20]
        break;
 8004640:	e017      	b.n	8004672 <UART_SetConfig+0x30e>
 8004642:	bf00      	nop
 8004644:	efff69f3 	.word	0xefff69f3
 8004648:	40008000 	.word	0x40008000
 800464c:	40013800 	.word	0x40013800
 8004650:	40021000 	.word	0x40021000
 8004654:	40004400 	.word	0x40004400
 8004658:	40004800 	.word	0x40004800
 800465c:	40004c00 	.word	0x40004c00
 8004660:	40005000 	.word	0x40005000
 8004664:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	76bb      	strb	r3, [r7, #26]
        break;
 8004670:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80f1 	beq.w	800485c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4413      	add	r3, r2
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	429a      	cmp	r2, r3
 8004688:	d305      	bcc.n	8004696 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	429a      	cmp	r2, r3
 8004694:	d902      	bls.n	800469c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	76bb      	strb	r3, [r7, #26]
 800469a:	e0df      	b.n	800485c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	4618      	mov	r0, r3
 80046a0:	f04f 0100 	mov.w	r1, #0
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	020b      	lsls	r3, r1, #8
 80046ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046b2:	0202      	lsls	r2, r0, #8
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	6849      	ldr	r1, [r1, #4]
 80046b8:	0849      	lsrs	r1, r1, #1
 80046ba:	4608      	mov	r0, r1
 80046bc:	f04f 0100 	mov.w	r1, #0
 80046c0:	1814      	adds	r4, r2, r0
 80046c2:	eb43 0501 	adc.w	r5, r3, r1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	461a      	mov	r2, r3
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	4620      	mov	r0, r4
 80046d2:	4629      	mov	r1, r5
 80046d4:	f7fb fdd4 	bl	8000280 <__aeabi_uldivmod>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4613      	mov	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046e6:	d308      	bcc.n	80046fa <UART_SetConfig+0x396>
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ee:	d204      	bcs.n	80046fa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	60da      	str	r2, [r3, #12]
 80046f8:	e0b0      	b.n	800485c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	76bb      	strb	r3, [r7, #26]
 80046fe:	e0ad      	b.n	800485c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004708:	d15c      	bne.n	80047c4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800470a:	7efb      	ldrb	r3, [r7, #27]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d828      	bhi.n	8004762 <UART_SetConfig+0x3fe>
 8004710:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <UART_SetConfig+0x3b4>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	0800473d 	.word	0x0800473d
 800471c:	08004745 	.word	0x08004745
 8004720:	0800474d 	.word	0x0800474d
 8004724:	08004763 	.word	0x08004763
 8004728:	08004753 	.word	0x08004753
 800472c:	08004763 	.word	0x08004763
 8004730:	08004763 	.word	0x08004763
 8004734:	08004763 	.word	0x08004763
 8004738:	0800475b 	.word	0x0800475b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800473c:	f7fd fc60 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 8004740:	6178      	str	r0, [r7, #20]
        break;
 8004742:	e013      	b.n	800476c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004744:	f7fd fc72 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8004748:	6178      	str	r0, [r7, #20]
        break;
 800474a:	e00f      	b.n	800476c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800474c:	4b49      	ldr	r3, [pc, #292]	; (8004874 <UART_SetConfig+0x510>)
 800474e:	617b      	str	r3, [r7, #20]
        break;
 8004750:	e00c      	b.n	800476c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004752:	f7fd fbbd 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8004756:	6178      	str	r0, [r7, #20]
        break;
 8004758:	e008      	b.n	800476c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800475a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475e:	617b      	str	r3, [r7, #20]
        break;
 8004760:	e004      	b.n	800476c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	76bb      	strb	r3, [r7, #26]
        break;
 800476a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d074      	beq.n	800485c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	005a      	lsls	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	441a      	add	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	fbb2 f3f3 	udiv	r3, r2, r3
 8004786:	b29b      	uxth	r3, r3
 8004788:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b0f      	cmp	r3, #15
 800478e:	d916      	bls.n	80047be <UART_SetConfig+0x45a>
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004796:	d212      	bcs.n	80047be <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f023 030f 	bic.w	r3, r3, #15
 80047a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	89fb      	ldrh	r3, [r7, #14]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	89fa      	ldrh	r2, [r7, #14]
 80047ba:	60da      	str	r2, [r3, #12]
 80047bc:	e04e      	b.n	800485c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	76bb      	strb	r3, [r7, #26]
 80047c2:	e04b      	b.n	800485c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047c4:	7efb      	ldrb	r3, [r7, #27]
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d827      	bhi.n	800481a <UART_SetConfig+0x4b6>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0x46c>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	08004805 	.word	0x08004805
 80047dc:	0800481b 	.word	0x0800481b
 80047e0:	0800480b 	.word	0x0800480b
 80047e4:	0800481b 	.word	0x0800481b
 80047e8:	0800481b 	.word	0x0800481b
 80047ec:	0800481b 	.word	0x0800481b
 80047f0:	08004813 	.word	0x08004813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fd fc04 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 80047f8:	6178      	str	r0, [r7, #20]
        break;
 80047fa:	e013      	b.n	8004824 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047fc:	f7fd fc16 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8004800:	6178      	str	r0, [r7, #20]
        break;
 8004802:	e00f      	b.n	8004824 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004804:	4b1b      	ldr	r3, [pc, #108]	; (8004874 <UART_SetConfig+0x510>)
 8004806:	617b      	str	r3, [r7, #20]
        break;
 8004808:	e00c      	b.n	8004824 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7fd fb61 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 800480e:	6178      	str	r0, [r7, #20]
        break;
 8004810:	e008      	b.n	8004824 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004816:	617b      	str	r3, [r7, #20]
        break;
 8004818:	e004      	b.n	8004824 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	76bb      	strb	r3, [r7, #26]
        break;
 8004822:	bf00      	nop
    }

    if (pclk != 0U)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d018      	beq.n	800485c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	085a      	lsrs	r2, r3, #1
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	441a      	add	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	b29b      	uxth	r3, r3
 800483e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b0f      	cmp	r3, #15
 8004844:	d908      	bls.n	8004858 <UART_SetConfig+0x4f4>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484c:	d204      	bcs.n	8004858 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	e001      	b.n	800485c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004868:	7ebb      	ldrb	r3, [r7, #26]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bdb0      	pop	{r4, r5, r7, pc}
 8004872:	bf00      	nop
 8004874:	00f42400 	.word	0x00f42400

08004878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	f003 0320 	and.w	r3, r3, #32
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01a      	beq.n	800498e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004976:	d10a      	bne.n	800498e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
  }
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049cc:	f7fc fa36 	bl	8000e3c <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d10e      	bne.n	80049fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f82d 	bl	8004a4e <UART_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e023      	b.n	8004a46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d10e      	bne.n	8004a2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f817 	bl	8004a4e <UART_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e00d      	b.n	8004a46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5e:	e05e      	b.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a66:	d05a      	beq.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a68:	f7fc f9e8 	bl	8000e3c <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d302      	bcc.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d11b      	bne.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e043      	b.n	8004b3e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d02c      	beq.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad2:	d124      	bne.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004adc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004aec:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0201 	bic.w	r2, r2, #1
 8004afc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e00f      	b.n	8004b3e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69da      	ldr	r2, [r3, #28]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4013      	ands	r3, r2
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	bf0c      	ite	eq
 8004b2e:	2301      	moveq	r3, #1
 8004b30:	2300      	movne	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d091      	beq.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <__errno>:
 8004b48:	4b01      	ldr	r3, [pc, #4]	; (8004b50 <__errno+0x8>)
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	2000000c 	.word	0x2000000c

08004b54 <__libc_init_array>:
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	4d0d      	ldr	r5, [pc, #52]	; (8004b8c <__libc_init_array+0x38>)
 8004b58:	4c0d      	ldr	r4, [pc, #52]	; (8004b90 <__libc_init_array+0x3c>)
 8004b5a:	1b64      	subs	r4, r4, r5
 8004b5c:	10a4      	asrs	r4, r4, #2
 8004b5e:	2600      	movs	r6, #0
 8004b60:	42a6      	cmp	r6, r4
 8004b62:	d109      	bne.n	8004b78 <__libc_init_array+0x24>
 8004b64:	4d0b      	ldr	r5, [pc, #44]	; (8004b94 <__libc_init_array+0x40>)
 8004b66:	4c0c      	ldr	r4, [pc, #48]	; (8004b98 <__libc_init_array+0x44>)
 8004b68:	f000 fc4e 	bl	8005408 <_init>
 8004b6c:	1b64      	subs	r4, r4, r5
 8004b6e:	10a4      	asrs	r4, r4, #2
 8004b70:	2600      	movs	r6, #0
 8004b72:	42a6      	cmp	r6, r4
 8004b74:	d105      	bne.n	8004b82 <__libc_init_array+0x2e>
 8004b76:	bd70      	pop	{r4, r5, r6, pc}
 8004b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b7c:	4798      	blx	r3
 8004b7e:	3601      	adds	r6, #1
 8004b80:	e7ee      	b.n	8004b60 <__libc_init_array+0xc>
 8004b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b86:	4798      	blx	r3
 8004b88:	3601      	adds	r6, #1
 8004b8a:	e7f2      	b.n	8004b72 <__libc_init_array+0x1e>
 8004b8c:	080054ac 	.word	0x080054ac
 8004b90:	080054ac 	.word	0x080054ac
 8004b94:	080054ac 	.word	0x080054ac
 8004b98:	080054b0 	.word	0x080054b0

08004b9c <memset>:
 8004b9c:	4402      	add	r2, r0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d100      	bne.n	8004ba6 <memset+0xa>
 8004ba4:	4770      	bx	lr
 8004ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8004baa:	e7f9      	b.n	8004ba0 <memset+0x4>

08004bac <siprintf>:
 8004bac:	b40e      	push	{r1, r2, r3}
 8004bae:	b500      	push	{lr}
 8004bb0:	b09c      	sub	sp, #112	; 0x70
 8004bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8004bb4:	9002      	str	r0, [sp, #8]
 8004bb6:	9006      	str	r0, [sp, #24]
 8004bb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bbc:	4809      	ldr	r0, [pc, #36]	; (8004be4 <siprintf+0x38>)
 8004bbe:	9107      	str	r1, [sp, #28]
 8004bc0:	9104      	str	r1, [sp, #16]
 8004bc2:	4909      	ldr	r1, [pc, #36]	; (8004be8 <siprintf+0x3c>)
 8004bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bc8:	9105      	str	r1, [sp, #20]
 8004bca:	6800      	ldr	r0, [r0, #0]
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	a902      	add	r1, sp, #8
 8004bd0:	f000 f868 	bl	8004ca4 <_svfiprintf_r>
 8004bd4:	9b02      	ldr	r3, [sp, #8]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	b01c      	add	sp, #112	; 0x70
 8004bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004be0:	b003      	add	sp, #12
 8004be2:	4770      	bx	lr
 8004be4:	2000000c 	.word	0x2000000c
 8004be8:	ffff0208 	.word	0xffff0208

08004bec <__ssputs_r>:
 8004bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf0:	688e      	ldr	r6, [r1, #8]
 8004bf2:	429e      	cmp	r6, r3
 8004bf4:	4682      	mov	sl, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	4690      	mov	r8, r2
 8004bfa:	461f      	mov	r7, r3
 8004bfc:	d838      	bhi.n	8004c70 <__ssputs_r+0x84>
 8004bfe:	898a      	ldrh	r2, [r1, #12]
 8004c00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c04:	d032      	beq.n	8004c6c <__ssputs_r+0x80>
 8004c06:	6825      	ldr	r5, [r4, #0]
 8004c08:	6909      	ldr	r1, [r1, #16]
 8004c0a:	eba5 0901 	sub.w	r9, r5, r1
 8004c0e:	6965      	ldr	r5, [r4, #20]
 8004c10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c18:	3301      	adds	r3, #1
 8004c1a:	444b      	add	r3, r9
 8004c1c:	106d      	asrs	r5, r5, #1
 8004c1e:	429d      	cmp	r5, r3
 8004c20:	bf38      	it	cc
 8004c22:	461d      	movcc	r5, r3
 8004c24:	0553      	lsls	r3, r2, #21
 8004c26:	d531      	bpl.n	8004c8c <__ssputs_r+0xa0>
 8004c28:	4629      	mov	r1, r5
 8004c2a:	f000 fb47 	bl	80052bc <_malloc_r>
 8004c2e:	4606      	mov	r6, r0
 8004c30:	b950      	cbnz	r0, 8004c48 <__ssputs_r+0x5c>
 8004c32:	230c      	movs	r3, #12
 8004c34:	f8ca 3000 	str.w	r3, [sl]
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c3e:	81a3      	strh	r3, [r4, #12]
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c48:	6921      	ldr	r1, [r4, #16]
 8004c4a:	464a      	mov	r2, r9
 8004c4c:	f000 fabe 	bl	80051cc <memcpy>
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5a:	81a3      	strh	r3, [r4, #12]
 8004c5c:	6126      	str	r6, [r4, #16]
 8004c5e:	6165      	str	r5, [r4, #20]
 8004c60:	444e      	add	r6, r9
 8004c62:	eba5 0509 	sub.w	r5, r5, r9
 8004c66:	6026      	str	r6, [r4, #0]
 8004c68:	60a5      	str	r5, [r4, #8]
 8004c6a:	463e      	mov	r6, r7
 8004c6c:	42be      	cmp	r6, r7
 8004c6e:	d900      	bls.n	8004c72 <__ssputs_r+0x86>
 8004c70:	463e      	mov	r6, r7
 8004c72:	4632      	mov	r2, r6
 8004c74:	6820      	ldr	r0, [r4, #0]
 8004c76:	4641      	mov	r1, r8
 8004c78:	f000 fab6 	bl	80051e8 <memmove>
 8004c7c:	68a3      	ldr	r3, [r4, #8]
 8004c7e:	6822      	ldr	r2, [r4, #0]
 8004c80:	1b9b      	subs	r3, r3, r6
 8004c82:	4432      	add	r2, r6
 8004c84:	60a3      	str	r3, [r4, #8]
 8004c86:	6022      	str	r2, [r4, #0]
 8004c88:	2000      	movs	r0, #0
 8004c8a:	e7db      	b.n	8004c44 <__ssputs_r+0x58>
 8004c8c:	462a      	mov	r2, r5
 8004c8e:	f000 fb6f 	bl	8005370 <_realloc_r>
 8004c92:	4606      	mov	r6, r0
 8004c94:	2800      	cmp	r0, #0
 8004c96:	d1e1      	bne.n	8004c5c <__ssputs_r+0x70>
 8004c98:	6921      	ldr	r1, [r4, #16]
 8004c9a:	4650      	mov	r0, sl
 8004c9c:	f000 fabe 	bl	800521c <_free_r>
 8004ca0:	e7c7      	b.n	8004c32 <__ssputs_r+0x46>
	...

08004ca4 <_svfiprintf_r>:
 8004ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca8:	4698      	mov	r8, r3
 8004caa:	898b      	ldrh	r3, [r1, #12]
 8004cac:	061b      	lsls	r3, r3, #24
 8004cae:	b09d      	sub	sp, #116	; 0x74
 8004cb0:	4607      	mov	r7, r0
 8004cb2:	460d      	mov	r5, r1
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	d50e      	bpl.n	8004cd6 <_svfiprintf_r+0x32>
 8004cb8:	690b      	ldr	r3, [r1, #16]
 8004cba:	b963      	cbnz	r3, 8004cd6 <_svfiprintf_r+0x32>
 8004cbc:	2140      	movs	r1, #64	; 0x40
 8004cbe:	f000 fafd 	bl	80052bc <_malloc_r>
 8004cc2:	6028      	str	r0, [r5, #0]
 8004cc4:	6128      	str	r0, [r5, #16]
 8004cc6:	b920      	cbnz	r0, 8004cd2 <_svfiprintf_r+0x2e>
 8004cc8:	230c      	movs	r3, #12
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd0:	e0d1      	b.n	8004e76 <_svfiprintf_r+0x1d2>
 8004cd2:	2340      	movs	r3, #64	; 0x40
 8004cd4:	616b      	str	r3, [r5, #20]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cda:	2320      	movs	r3, #32
 8004cdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ce4:	2330      	movs	r3, #48	; 0x30
 8004ce6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e90 <_svfiprintf_r+0x1ec>
 8004cea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cee:	f04f 0901 	mov.w	r9, #1
 8004cf2:	4623      	mov	r3, r4
 8004cf4:	469a      	mov	sl, r3
 8004cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cfa:	b10a      	cbz	r2, 8004d00 <_svfiprintf_r+0x5c>
 8004cfc:	2a25      	cmp	r2, #37	; 0x25
 8004cfe:	d1f9      	bne.n	8004cf4 <_svfiprintf_r+0x50>
 8004d00:	ebba 0b04 	subs.w	fp, sl, r4
 8004d04:	d00b      	beq.n	8004d1e <_svfiprintf_r+0x7a>
 8004d06:	465b      	mov	r3, fp
 8004d08:	4622      	mov	r2, r4
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	f7ff ff6d 	bl	8004bec <__ssputs_r>
 8004d12:	3001      	adds	r0, #1
 8004d14:	f000 80aa 	beq.w	8004e6c <_svfiprintf_r+0x1c8>
 8004d18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d1a:	445a      	add	r2, fp
 8004d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 80a2 	beq.w	8004e6c <_svfiprintf_r+0x1c8>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d32:	f10a 0a01 	add.w	sl, sl, #1
 8004d36:	9304      	str	r3, [sp, #16]
 8004d38:	9307      	str	r3, [sp, #28]
 8004d3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d3e:	931a      	str	r3, [sp, #104]	; 0x68
 8004d40:	4654      	mov	r4, sl
 8004d42:	2205      	movs	r2, #5
 8004d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d48:	4851      	ldr	r0, [pc, #324]	; (8004e90 <_svfiprintf_r+0x1ec>)
 8004d4a:	f7fb fa49 	bl	80001e0 <memchr>
 8004d4e:	9a04      	ldr	r2, [sp, #16]
 8004d50:	b9d8      	cbnz	r0, 8004d8a <_svfiprintf_r+0xe6>
 8004d52:	06d0      	lsls	r0, r2, #27
 8004d54:	bf44      	itt	mi
 8004d56:	2320      	movmi	r3, #32
 8004d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d5c:	0711      	lsls	r1, r2, #28
 8004d5e:	bf44      	itt	mi
 8004d60:	232b      	movmi	r3, #43	; 0x2b
 8004d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d66:	f89a 3000 	ldrb.w	r3, [sl]
 8004d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d6c:	d015      	beq.n	8004d9a <_svfiprintf_r+0xf6>
 8004d6e:	9a07      	ldr	r2, [sp, #28]
 8004d70:	4654      	mov	r4, sl
 8004d72:	2000      	movs	r0, #0
 8004d74:	f04f 0c0a 	mov.w	ip, #10
 8004d78:	4621      	mov	r1, r4
 8004d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d7e:	3b30      	subs	r3, #48	; 0x30
 8004d80:	2b09      	cmp	r3, #9
 8004d82:	d94e      	bls.n	8004e22 <_svfiprintf_r+0x17e>
 8004d84:	b1b0      	cbz	r0, 8004db4 <_svfiprintf_r+0x110>
 8004d86:	9207      	str	r2, [sp, #28]
 8004d88:	e014      	b.n	8004db4 <_svfiprintf_r+0x110>
 8004d8a:	eba0 0308 	sub.w	r3, r0, r8
 8004d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d92:	4313      	orrs	r3, r2
 8004d94:	9304      	str	r3, [sp, #16]
 8004d96:	46a2      	mov	sl, r4
 8004d98:	e7d2      	b.n	8004d40 <_svfiprintf_r+0x9c>
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	1d19      	adds	r1, r3, #4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	9103      	str	r1, [sp, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bfbb      	ittet	lt
 8004da6:	425b      	neglt	r3, r3
 8004da8:	f042 0202 	orrlt.w	r2, r2, #2
 8004dac:	9307      	strge	r3, [sp, #28]
 8004dae:	9307      	strlt	r3, [sp, #28]
 8004db0:	bfb8      	it	lt
 8004db2:	9204      	strlt	r2, [sp, #16]
 8004db4:	7823      	ldrb	r3, [r4, #0]
 8004db6:	2b2e      	cmp	r3, #46	; 0x2e
 8004db8:	d10c      	bne.n	8004dd4 <_svfiprintf_r+0x130>
 8004dba:	7863      	ldrb	r3, [r4, #1]
 8004dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8004dbe:	d135      	bne.n	8004e2c <_svfiprintf_r+0x188>
 8004dc0:	9b03      	ldr	r3, [sp, #12]
 8004dc2:	1d1a      	adds	r2, r3, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	9203      	str	r2, [sp, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bfb8      	it	lt
 8004dcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dd0:	3402      	adds	r4, #2
 8004dd2:	9305      	str	r3, [sp, #20]
 8004dd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ea0 <_svfiprintf_r+0x1fc>
 8004dd8:	7821      	ldrb	r1, [r4, #0]
 8004dda:	2203      	movs	r2, #3
 8004ddc:	4650      	mov	r0, sl
 8004dde:	f7fb f9ff 	bl	80001e0 <memchr>
 8004de2:	b140      	cbz	r0, 8004df6 <_svfiprintf_r+0x152>
 8004de4:	2340      	movs	r3, #64	; 0x40
 8004de6:	eba0 000a 	sub.w	r0, r0, sl
 8004dea:	fa03 f000 	lsl.w	r0, r3, r0
 8004dee:	9b04      	ldr	r3, [sp, #16]
 8004df0:	4303      	orrs	r3, r0
 8004df2:	3401      	adds	r4, #1
 8004df4:	9304      	str	r3, [sp, #16]
 8004df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dfa:	4826      	ldr	r0, [pc, #152]	; (8004e94 <_svfiprintf_r+0x1f0>)
 8004dfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e00:	2206      	movs	r2, #6
 8004e02:	f7fb f9ed 	bl	80001e0 <memchr>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	d038      	beq.n	8004e7c <_svfiprintf_r+0x1d8>
 8004e0a:	4b23      	ldr	r3, [pc, #140]	; (8004e98 <_svfiprintf_r+0x1f4>)
 8004e0c:	bb1b      	cbnz	r3, 8004e56 <_svfiprintf_r+0x1b2>
 8004e0e:	9b03      	ldr	r3, [sp, #12]
 8004e10:	3307      	adds	r3, #7
 8004e12:	f023 0307 	bic.w	r3, r3, #7
 8004e16:	3308      	adds	r3, #8
 8004e18:	9303      	str	r3, [sp, #12]
 8004e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e1c:	4433      	add	r3, r6
 8004e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e20:	e767      	b.n	8004cf2 <_svfiprintf_r+0x4e>
 8004e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e26:	460c      	mov	r4, r1
 8004e28:	2001      	movs	r0, #1
 8004e2a:	e7a5      	b.n	8004d78 <_svfiprintf_r+0xd4>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	3401      	adds	r4, #1
 8004e30:	9305      	str	r3, [sp, #20]
 8004e32:	4619      	mov	r1, r3
 8004e34:	f04f 0c0a 	mov.w	ip, #10
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e3e:	3a30      	subs	r2, #48	; 0x30
 8004e40:	2a09      	cmp	r2, #9
 8004e42:	d903      	bls.n	8004e4c <_svfiprintf_r+0x1a8>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0c5      	beq.n	8004dd4 <_svfiprintf_r+0x130>
 8004e48:	9105      	str	r1, [sp, #20]
 8004e4a:	e7c3      	b.n	8004dd4 <_svfiprintf_r+0x130>
 8004e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e50:	4604      	mov	r4, r0
 8004e52:	2301      	movs	r3, #1
 8004e54:	e7f0      	b.n	8004e38 <_svfiprintf_r+0x194>
 8004e56:	ab03      	add	r3, sp, #12
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	462a      	mov	r2, r5
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <_svfiprintf_r+0x1f8>)
 8004e5e:	a904      	add	r1, sp, #16
 8004e60:	4638      	mov	r0, r7
 8004e62:	f3af 8000 	nop.w
 8004e66:	1c42      	adds	r2, r0, #1
 8004e68:	4606      	mov	r6, r0
 8004e6a:	d1d6      	bne.n	8004e1a <_svfiprintf_r+0x176>
 8004e6c:	89ab      	ldrh	r3, [r5, #12]
 8004e6e:	065b      	lsls	r3, r3, #25
 8004e70:	f53f af2c 	bmi.w	8004ccc <_svfiprintf_r+0x28>
 8004e74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e76:	b01d      	add	sp, #116	; 0x74
 8004e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e7c:	ab03      	add	r3, sp, #12
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	462a      	mov	r2, r5
 8004e82:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <_svfiprintf_r+0x1f8>)
 8004e84:	a904      	add	r1, sp, #16
 8004e86:	4638      	mov	r0, r7
 8004e88:	f000 f87a 	bl	8004f80 <_printf_i>
 8004e8c:	e7eb      	b.n	8004e66 <_svfiprintf_r+0x1c2>
 8004e8e:	bf00      	nop
 8004e90:	08005470 	.word	0x08005470
 8004e94:	0800547a 	.word	0x0800547a
 8004e98:	00000000 	.word	0x00000000
 8004e9c:	08004bed 	.word	0x08004bed
 8004ea0:	08005476 	.word	0x08005476

08004ea4 <_printf_common>:
 8004ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea8:	4616      	mov	r6, r2
 8004eaa:	4699      	mov	r9, r3
 8004eac:	688a      	ldr	r2, [r1, #8]
 8004eae:	690b      	ldr	r3, [r1, #16]
 8004eb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	bfb8      	it	lt
 8004eb8:	4613      	movlt	r3, r2
 8004eba:	6033      	str	r3, [r6, #0]
 8004ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ec0:	4607      	mov	r7, r0
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	b10a      	cbz	r2, 8004eca <_printf_common+0x26>
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	6033      	str	r3, [r6, #0]
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	0699      	lsls	r1, r3, #26
 8004ece:	bf42      	ittt	mi
 8004ed0:	6833      	ldrmi	r3, [r6, #0]
 8004ed2:	3302      	addmi	r3, #2
 8004ed4:	6033      	strmi	r3, [r6, #0]
 8004ed6:	6825      	ldr	r5, [r4, #0]
 8004ed8:	f015 0506 	ands.w	r5, r5, #6
 8004edc:	d106      	bne.n	8004eec <_printf_common+0x48>
 8004ede:	f104 0a19 	add.w	sl, r4, #25
 8004ee2:	68e3      	ldr	r3, [r4, #12]
 8004ee4:	6832      	ldr	r2, [r6, #0]
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	42ab      	cmp	r3, r5
 8004eea:	dc26      	bgt.n	8004f3a <_printf_common+0x96>
 8004eec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ef0:	1e13      	subs	r3, r2, #0
 8004ef2:	6822      	ldr	r2, [r4, #0]
 8004ef4:	bf18      	it	ne
 8004ef6:	2301      	movne	r3, #1
 8004ef8:	0692      	lsls	r2, r2, #26
 8004efa:	d42b      	bmi.n	8004f54 <_printf_common+0xb0>
 8004efc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f00:	4649      	mov	r1, r9
 8004f02:	4638      	mov	r0, r7
 8004f04:	47c0      	blx	r8
 8004f06:	3001      	adds	r0, #1
 8004f08:	d01e      	beq.n	8004f48 <_printf_common+0xa4>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	68e5      	ldr	r5, [r4, #12]
 8004f0e:	6832      	ldr	r2, [r6, #0]
 8004f10:	f003 0306 	and.w	r3, r3, #6
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	bf08      	it	eq
 8004f18:	1aad      	subeq	r5, r5, r2
 8004f1a:	68a3      	ldr	r3, [r4, #8]
 8004f1c:	6922      	ldr	r2, [r4, #16]
 8004f1e:	bf0c      	ite	eq
 8004f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f24:	2500      	movne	r5, #0
 8004f26:	4293      	cmp	r3, r2
 8004f28:	bfc4      	itt	gt
 8004f2a:	1a9b      	subgt	r3, r3, r2
 8004f2c:	18ed      	addgt	r5, r5, r3
 8004f2e:	2600      	movs	r6, #0
 8004f30:	341a      	adds	r4, #26
 8004f32:	42b5      	cmp	r5, r6
 8004f34:	d11a      	bne.n	8004f6c <_printf_common+0xc8>
 8004f36:	2000      	movs	r0, #0
 8004f38:	e008      	b.n	8004f4c <_printf_common+0xa8>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4652      	mov	r2, sl
 8004f3e:	4649      	mov	r1, r9
 8004f40:	4638      	mov	r0, r7
 8004f42:	47c0      	blx	r8
 8004f44:	3001      	adds	r0, #1
 8004f46:	d103      	bne.n	8004f50 <_printf_common+0xac>
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f50:	3501      	adds	r5, #1
 8004f52:	e7c6      	b.n	8004ee2 <_printf_common+0x3e>
 8004f54:	18e1      	adds	r1, r4, r3
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	2030      	movs	r0, #48	; 0x30
 8004f5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f5e:	4422      	add	r2, r4
 8004f60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f68:	3302      	adds	r3, #2
 8004f6a:	e7c7      	b.n	8004efc <_printf_common+0x58>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	4622      	mov	r2, r4
 8004f70:	4649      	mov	r1, r9
 8004f72:	4638      	mov	r0, r7
 8004f74:	47c0      	blx	r8
 8004f76:	3001      	adds	r0, #1
 8004f78:	d0e6      	beq.n	8004f48 <_printf_common+0xa4>
 8004f7a:	3601      	adds	r6, #1
 8004f7c:	e7d9      	b.n	8004f32 <_printf_common+0x8e>
	...

08004f80 <_printf_i>:
 8004f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	460c      	mov	r4, r1
 8004f86:	4691      	mov	r9, r2
 8004f88:	7e27      	ldrb	r7, [r4, #24]
 8004f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f8c:	2f78      	cmp	r7, #120	; 0x78
 8004f8e:	4680      	mov	r8, r0
 8004f90:	469a      	mov	sl, r3
 8004f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f96:	d807      	bhi.n	8004fa8 <_printf_i+0x28>
 8004f98:	2f62      	cmp	r7, #98	; 0x62
 8004f9a:	d80a      	bhi.n	8004fb2 <_printf_i+0x32>
 8004f9c:	2f00      	cmp	r7, #0
 8004f9e:	f000 80d8 	beq.w	8005152 <_printf_i+0x1d2>
 8004fa2:	2f58      	cmp	r7, #88	; 0x58
 8004fa4:	f000 80a3 	beq.w	80050ee <_printf_i+0x16e>
 8004fa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fb0:	e03a      	b.n	8005028 <_printf_i+0xa8>
 8004fb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fb6:	2b15      	cmp	r3, #21
 8004fb8:	d8f6      	bhi.n	8004fa8 <_printf_i+0x28>
 8004fba:	a001      	add	r0, pc, #4	; (adr r0, 8004fc0 <_printf_i+0x40>)
 8004fbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004fc0:	08005019 	.word	0x08005019
 8004fc4:	0800502d 	.word	0x0800502d
 8004fc8:	08004fa9 	.word	0x08004fa9
 8004fcc:	08004fa9 	.word	0x08004fa9
 8004fd0:	08004fa9 	.word	0x08004fa9
 8004fd4:	08004fa9 	.word	0x08004fa9
 8004fd8:	0800502d 	.word	0x0800502d
 8004fdc:	08004fa9 	.word	0x08004fa9
 8004fe0:	08004fa9 	.word	0x08004fa9
 8004fe4:	08004fa9 	.word	0x08004fa9
 8004fe8:	08004fa9 	.word	0x08004fa9
 8004fec:	08005139 	.word	0x08005139
 8004ff0:	0800505d 	.word	0x0800505d
 8004ff4:	0800511b 	.word	0x0800511b
 8004ff8:	08004fa9 	.word	0x08004fa9
 8004ffc:	08004fa9 	.word	0x08004fa9
 8005000:	0800515b 	.word	0x0800515b
 8005004:	08004fa9 	.word	0x08004fa9
 8005008:	0800505d 	.word	0x0800505d
 800500c:	08004fa9 	.word	0x08004fa9
 8005010:	08004fa9 	.word	0x08004fa9
 8005014:	08005123 	.word	0x08005123
 8005018:	680b      	ldr	r3, [r1, #0]
 800501a:	1d1a      	adds	r2, r3, #4
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	600a      	str	r2, [r1, #0]
 8005020:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005028:	2301      	movs	r3, #1
 800502a:	e0a3      	b.n	8005174 <_printf_i+0x1f4>
 800502c:	6825      	ldr	r5, [r4, #0]
 800502e:	6808      	ldr	r0, [r1, #0]
 8005030:	062e      	lsls	r6, r5, #24
 8005032:	f100 0304 	add.w	r3, r0, #4
 8005036:	d50a      	bpl.n	800504e <_printf_i+0xce>
 8005038:	6805      	ldr	r5, [r0, #0]
 800503a:	600b      	str	r3, [r1, #0]
 800503c:	2d00      	cmp	r5, #0
 800503e:	da03      	bge.n	8005048 <_printf_i+0xc8>
 8005040:	232d      	movs	r3, #45	; 0x2d
 8005042:	426d      	negs	r5, r5
 8005044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005048:	485e      	ldr	r0, [pc, #376]	; (80051c4 <_printf_i+0x244>)
 800504a:	230a      	movs	r3, #10
 800504c:	e019      	b.n	8005082 <_printf_i+0x102>
 800504e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005052:	6805      	ldr	r5, [r0, #0]
 8005054:	600b      	str	r3, [r1, #0]
 8005056:	bf18      	it	ne
 8005058:	b22d      	sxthne	r5, r5
 800505a:	e7ef      	b.n	800503c <_printf_i+0xbc>
 800505c:	680b      	ldr	r3, [r1, #0]
 800505e:	6825      	ldr	r5, [r4, #0]
 8005060:	1d18      	adds	r0, r3, #4
 8005062:	6008      	str	r0, [r1, #0]
 8005064:	0628      	lsls	r0, r5, #24
 8005066:	d501      	bpl.n	800506c <_printf_i+0xec>
 8005068:	681d      	ldr	r5, [r3, #0]
 800506a:	e002      	b.n	8005072 <_printf_i+0xf2>
 800506c:	0669      	lsls	r1, r5, #25
 800506e:	d5fb      	bpl.n	8005068 <_printf_i+0xe8>
 8005070:	881d      	ldrh	r5, [r3, #0]
 8005072:	4854      	ldr	r0, [pc, #336]	; (80051c4 <_printf_i+0x244>)
 8005074:	2f6f      	cmp	r7, #111	; 0x6f
 8005076:	bf0c      	ite	eq
 8005078:	2308      	moveq	r3, #8
 800507a:	230a      	movne	r3, #10
 800507c:	2100      	movs	r1, #0
 800507e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005082:	6866      	ldr	r6, [r4, #4]
 8005084:	60a6      	str	r6, [r4, #8]
 8005086:	2e00      	cmp	r6, #0
 8005088:	bfa2      	ittt	ge
 800508a:	6821      	ldrge	r1, [r4, #0]
 800508c:	f021 0104 	bicge.w	r1, r1, #4
 8005090:	6021      	strge	r1, [r4, #0]
 8005092:	b90d      	cbnz	r5, 8005098 <_printf_i+0x118>
 8005094:	2e00      	cmp	r6, #0
 8005096:	d04d      	beq.n	8005134 <_printf_i+0x1b4>
 8005098:	4616      	mov	r6, r2
 800509a:	fbb5 f1f3 	udiv	r1, r5, r3
 800509e:	fb03 5711 	mls	r7, r3, r1, r5
 80050a2:	5dc7      	ldrb	r7, [r0, r7]
 80050a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050a8:	462f      	mov	r7, r5
 80050aa:	42bb      	cmp	r3, r7
 80050ac:	460d      	mov	r5, r1
 80050ae:	d9f4      	bls.n	800509a <_printf_i+0x11a>
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d10b      	bne.n	80050cc <_printf_i+0x14c>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	07df      	lsls	r7, r3, #31
 80050b8:	d508      	bpl.n	80050cc <_printf_i+0x14c>
 80050ba:	6923      	ldr	r3, [r4, #16]
 80050bc:	6861      	ldr	r1, [r4, #4]
 80050be:	4299      	cmp	r1, r3
 80050c0:	bfde      	ittt	le
 80050c2:	2330      	movle	r3, #48	; 0x30
 80050c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050cc:	1b92      	subs	r2, r2, r6
 80050ce:	6122      	str	r2, [r4, #16]
 80050d0:	f8cd a000 	str.w	sl, [sp]
 80050d4:	464b      	mov	r3, r9
 80050d6:	aa03      	add	r2, sp, #12
 80050d8:	4621      	mov	r1, r4
 80050da:	4640      	mov	r0, r8
 80050dc:	f7ff fee2 	bl	8004ea4 <_printf_common>
 80050e0:	3001      	adds	r0, #1
 80050e2:	d14c      	bne.n	800517e <_printf_i+0x1fe>
 80050e4:	f04f 30ff 	mov.w	r0, #4294967295
 80050e8:	b004      	add	sp, #16
 80050ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ee:	4835      	ldr	r0, [pc, #212]	; (80051c4 <_printf_i+0x244>)
 80050f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	680e      	ldr	r6, [r1, #0]
 80050f8:	061f      	lsls	r7, r3, #24
 80050fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80050fe:	600e      	str	r6, [r1, #0]
 8005100:	d514      	bpl.n	800512c <_printf_i+0x1ac>
 8005102:	07d9      	lsls	r1, r3, #31
 8005104:	bf44      	itt	mi
 8005106:	f043 0320 	orrmi.w	r3, r3, #32
 800510a:	6023      	strmi	r3, [r4, #0]
 800510c:	b91d      	cbnz	r5, 8005116 <_printf_i+0x196>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	f023 0320 	bic.w	r3, r3, #32
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	2310      	movs	r3, #16
 8005118:	e7b0      	b.n	800507c <_printf_i+0xfc>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	f043 0320 	orr.w	r3, r3, #32
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	2378      	movs	r3, #120	; 0x78
 8005124:	4828      	ldr	r0, [pc, #160]	; (80051c8 <_printf_i+0x248>)
 8005126:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800512a:	e7e3      	b.n	80050f4 <_printf_i+0x174>
 800512c:	065e      	lsls	r6, r3, #25
 800512e:	bf48      	it	mi
 8005130:	b2ad      	uxthmi	r5, r5
 8005132:	e7e6      	b.n	8005102 <_printf_i+0x182>
 8005134:	4616      	mov	r6, r2
 8005136:	e7bb      	b.n	80050b0 <_printf_i+0x130>
 8005138:	680b      	ldr	r3, [r1, #0]
 800513a:	6826      	ldr	r6, [r4, #0]
 800513c:	6960      	ldr	r0, [r4, #20]
 800513e:	1d1d      	adds	r5, r3, #4
 8005140:	600d      	str	r5, [r1, #0]
 8005142:	0635      	lsls	r5, r6, #24
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	d501      	bpl.n	800514c <_printf_i+0x1cc>
 8005148:	6018      	str	r0, [r3, #0]
 800514a:	e002      	b.n	8005152 <_printf_i+0x1d2>
 800514c:	0671      	lsls	r1, r6, #25
 800514e:	d5fb      	bpl.n	8005148 <_printf_i+0x1c8>
 8005150:	8018      	strh	r0, [r3, #0]
 8005152:	2300      	movs	r3, #0
 8005154:	6123      	str	r3, [r4, #16]
 8005156:	4616      	mov	r6, r2
 8005158:	e7ba      	b.n	80050d0 <_printf_i+0x150>
 800515a:	680b      	ldr	r3, [r1, #0]
 800515c:	1d1a      	adds	r2, r3, #4
 800515e:	600a      	str	r2, [r1, #0]
 8005160:	681e      	ldr	r6, [r3, #0]
 8005162:	6862      	ldr	r2, [r4, #4]
 8005164:	2100      	movs	r1, #0
 8005166:	4630      	mov	r0, r6
 8005168:	f7fb f83a 	bl	80001e0 <memchr>
 800516c:	b108      	cbz	r0, 8005172 <_printf_i+0x1f2>
 800516e:	1b80      	subs	r0, r0, r6
 8005170:	6060      	str	r0, [r4, #4]
 8005172:	6863      	ldr	r3, [r4, #4]
 8005174:	6123      	str	r3, [r4, #16]
 8005176:	2300      	movs	r3, #0
 8005178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800517c:	e7a8      	b.n	80050d0 <_printf_i+0x150>
 800517e:	6923      	ldr	r3, [r4, #16]
 8005180:	4632      	mov	r2, r6
 8005182:	4649      	mov	r1, r9
 8005184:	4640      	mov	r0, r8
 8005186:	47d0      	blx	sl
 8005188:	3001      	adds	r0, #1
 800518a:	d0ab      	beq.n	80050e4 <_printf_i+0x164>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	079b      	lsls	r3, r3, #30
 8005190:	d413      	bmi.n	80051ba <_printf_i+0x23a>
 8005192:	68e0      	ldr	r0, [r4, #12]
 8005194:	9b03      	ldr	r3, [sp, #12]
 8005196:	4298      	cmp	r0, r3
 8005198:	bfb8      	it	lt
 800519a:	4618      	movlt	r0, r3
 800519c:	e7a4      	b.n	80050e8 <_printf_i+0x168>
 800519e:	2301      	movs	r3, #1
 80051a0:	4632      	mov	r2, r6
 80051a2:	4649      	mov	r1, r9
 80051a4:	4640      	mov	r0, r8
 80051a6:	47d0      	blx	sl
 80051a8:	3001      	adds	r0, #1
 80051aa:	d09b      	beq.n	80050e4 <_printf_i+0x164>
 80051ac:	3501      	adds	r5, #1
 80051ae:	68e3      	ldr	r3, [r4, #12]
 80051b0:	9903      	ldr	r1, [sp, #12]
 80051b2:	1a5b      	subs	r3, r3, r1
 80051b4:	42ab      	cmp	r3, r5
 80051b6:	dcf2      	bgt.n	800519e <_printf_i+0x21e>
 80051b8:	e7eb      	b.n	8005192 <_printf_i+0x212>
 80051ba:	2500      	movs	r5, #0
 80051bc:	f104 0619 	add.w	r6, r4, #25
 80051c0:	e7f5      	b.n	80051ae <_printf_i+0x22e>
 80051c2:	bf00      	nop
 80051c4:	08005481 	.word	0x08005481
 80051c8:	08005492 	.word	0x08005492

080051cc <memcpy>:
 80051cc:	440a      	add	r2, r1
 80051ce:	4291      	cmp	r1, r2
 80051d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80051d4:	d100      	bne.n	80051d8 <memcpy+0xc>
 80051d6:	4770      	bx	lr
 80051d8:	b510      	push	{r4, lr}
 80051da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051e2:	4291      	cmp	r1, r2
 80051e4:	d1f9      	bne.n	80051da <memcpy+0xe>
 80051e6:	bd10      	pop	{r4, pc}

080051e8 <memmove>:
 80051e8:	4288      	cmp	r0, r1
 80051ea:	b510      	push	{r4, lr}
 80051ec:	eb01 0402 	add.w	r4, r1, r2
 80051f0:	d902      	bls.n	80051f8 <memmove+0x10>
 80051f2:	4284      	cmp	r4, r0
 80051f4:	4623      	mov	r3, r4
 80051f6:	d807      	bhi.n	8005208 <memmove+0x20>
 80051f8:	1e43      	subs	r3, r0, #1
 80051fa:	42a1      	cmp	r1, r4
 80051fc:	d008      	beq.n	8005210 <memmove+0x28>
 80051fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005206:	e7f8      	b.n	80051fa <memmove+0x12>
 8005208:	4402      	add	r2, r0
 800520a:	4601      	mov	r1, r0
 800520c:	428a      	cmp	r2, r1
 800520e:	d100      	bne.n	8005212 <memmove+0x2a>
 8005210:	bd10      	pop	{r4, pc}
 8005212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800521a:	e7f7      	b.n	800520c <memmove+0x24>

0800521c <_free_r>:
 800521c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800521e:	2900      	cmp	r1, #0
 8005220:	d048      	beq.n	80052b4 <_free_r+0x98>
 8005222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005226:	9001      	str	r0, [sp, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f1a1 0404 	sub.w	r4, r1, #4
 800522e:	bfb8      	it	lt
 8005230:	18e4      	addlt	r4, r4, r3
 8005232:	f000 f8d3 	bl	80053dc <__malloc_lock>
 8005236:	4a20      	ldr	r2, [pc, #128]	; (80052b8 <_free_r+0x9c>)
 8005238:	9801      	ldr	r0, [sp, #4]
 800523a:	6813      	ldr	r3, [r2, #0]
 800523c:	4615      	mov	r5, r2
 800523e:	b933      	cbnz	r3, 800524e <_free_r+0x32>
 8005240:	6063      	str	r3, [r4, #4]
 8005242:	6014      	str	r4, [r2, #0]
 8005244:	b003      	add	sp, #12
 8005246:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800524a:	f000 b8cd 	b.w	80053e8 <__malloc_unlock>
 800524e:	42a3      	cmp	r3, r4
 8005250:	d90b      	bls.n	800526a <_free_r+0x4e>
 8005252:	6821      	ldr	r1, [r4, #0]
 8005254:	1862      	adds	r2, r4, r1
 8005256:	4293      	cmp	r3, r2
 8005258:	bf04      	itt	eq
 800525a:	681a      	ldreq	r2, [r3, #0]
 800525c:	685b      	ldreq	r3, [r3, #4]
 800525e:	6063      	str	r3, [r4, #4]
 8005260:	bf04      	itt	eq
 8005262:	1852      	addeq	r2, r2, r1
 8005264:	6022      	streq	r2, [r4, #0]
 8005266:	602c      	str	r4, [r5, #0]
 8005268:	e7ec      	b.n	8005244 <_free_r+0x28>
 800526a:	461a      	mov	r2, r3
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	b10b      	cbz	r3, 8005274 <_free_r+0x58>
 8005270:	42a3      	cmp	r3, r4
 8005272:	d9fa      	bls.n	800526a <_free_r+0x4e>
 8005274:	6811      	ldr	r1, [r2, #0]
 8005276:	1855      	adds	r5, r2, r1
 8005278:	42a5      	cmp	r5, r4
 800527a:	d10b      	bne.n	8005294 <_free_r+0x78>
 800527c:	6824      	ldr	r4, [r4, #0]
 800527e:	4421      	add	r1, r4
 8005280:	1854      	adds	r4, r2, r1
 8005282:	42a3      	cmp	r3, r4
 8005284:	6011      	str	r1, [r2, #0]
 8005286:	d1dd      	bne.n	8005244 <_free_r+0x28>
 8005288:	681c      	ldr	r4, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	6053      	str	r3, [r2, #4]
 800528e:	4421      	add	r1, r4
 8005290:	6011      	str	r1, [r2, #0]
 8005292:	e7d7      	b.n	8005244 <_free_r+0x28>
 8005294:	d902      	bls.n	800529c <_free_r+0x80>
 8005296:	230c      	movs	r3, #12
 8005298:	6003      	str	r3, [r0, #0]
 800529a:	e7d3      	b.n	8005244 <_free_r+0x28>
 800529c:	6825      	ldr	r5, [r4, #0]
 800529e:	1961      	adds	r1, r4, r5
 80052a0:	428b      	cmp	r3, r1
 80052a2:	bf04      	itt	eq
 80052a4:	6819      	ldreq	r1, [r3, #0]
 80052a6:	685b      	ldreq	r3, [r3, #4]
 80052a8:	6063      	str	r3, [r4, #4]
 80052aa:	bf04      	itt	eq
 80052ac:	1949      	addeq	r1, r1, r5
 80052ae:	6021      	streq	r1, [r4, #0]
 80052b0:	6054      	str	r4, [r2, #4]
 80052b2:	e7c7      	b.n	8005244 <_free_r+0x28>
 80052b4:	b003      	add	sp, #12
 80052b6:	bd30      	pop	{r4, r5, pc}
 80052b8:	2000009c 	.word	0x2000009c

080052bc <_malloc_r>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	1ccd      	adds	r5, r1, #3
 80052c0:	f025 0503 	bic.w	r5, r5, #3
 80052c4:	3508      	adds	r5, #8
 80052c6:	2d0c      	cmp	r5, #12
 80052c8:	bf38      	it	cc
 80052ca:	250c      	movcc	r5, #12
 80052cc:	2d00      	cmp	r5, #0
 80052ce:	4606      	mov	r6, r0
 80052d0:	db01      	blt.n	80052d6 <_malloc_r+0x1a>
 80052d2:	42a9      	cmp	r1, r5
 80052d4:	d903      	bls.n	80052de <_malloc_r+0x22>
 80052d6:	230c      	movs	r3, #12
 80052d8:	6033      	str	r3, [r6, #0]
 80052da:	2000      	movs	r0, #0
 80052dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052de:	f000 f87d 	bl	80053dc <__malloc_lock>
 80052e2:	4921      	ldr	r1, [pc, #132]	; (8005368 <_malloc_r+0xac>)
 80052e4:	680a      	ldr	r2, [r1, #0]
 80052e6:	4614      	mov	r4, r2
 80052e8:	b99c      	cbnz	r4, 8005312 <_malloc_r+0x56>
 80052ea:	4f20      	ldr	r7, [pc, #128]	; (800536c <_malloc_r+0xb0>)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	b923      	cbnz	r3, 80052fa <_malloc_r+0x3e>
 80052f0:	4621      	mov	r1, r4
 80052f2:	4630      	mov	r0, r6
 80052f4:	f000 f862 	bl	80053bc <_sbrk_r>
 80052f8:	6038      	str	r0, [r7, #0]
 80052fa:	4629      	mov	r1, r5
 80052fc:	4630      	mov	r0, r6
 80052fe:	f000 f85d 	bl	80053bc <_sbrk_r>
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	d123      	bne.n	800534e <_malloc_r+0x92>
 8005306:	230c      	movs	r3, #12
 8005308:	6033      	str	r3, [r6, #0]
 800530a:	4630      	mov	r0, r6
 800530c:	f000 f86c 	bl	80053e8 <__malloc_unlock>
 8005310:	e7e3      	b.n	80052da <_malloc_r+0x1e>
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	1b5b      	subs	r3, r3, r5
 8005316:	d417      	bmi.n	8005348 <_malloc_r+0x8c>
 8005318:	2b0b      	cmp	r3, #11
 800531a:	d903      	bls.n	8005324 <_malloc_r+0x68>
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	441c      	add	r4, r3
 8005320:	6025      	str	r5, [r4, #0]
 8005322:	e004      	b.n	800532e <_malloc_r+0x72>
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	42a2      	cmp	r2, r4
 8005328:	bf0c      	ite	eq
 800532a:	600b      	streq	r3, [r1, #0]
 800532c:	6053      	strne	r3, [r2, #4]
 800532e:	4630      	mov	r0, r6
 8005330:	f000 f85a 	bl	80053e8 <__malloc_unlock>
 8005334:	f104 000b 	add.w	r0, r4, #11
 8005338:	1d23      	adds	r3, r4, #4
 800533a:	f020 0007 	bic.w	r0, r0, #7
 800533e:	1ac2      	subs	r2, r0, r3
 8005340:	d0cc      	beq.n	80052dc <_malloc_r+0x20>
 8005342:	1a1b      	subs	r3, r3, r0
 8005344:	50a3      	str	r3, [r4, r2]
 8005346:	e7c9      	b.n	80052dc <_malloc_r+0x20>
 8005348:	4622      	mov	r2, r4
 800534a:	6864      	ldr	r4, [r4, #4]
 800534c:	e7cc      	b.n	80052e8 <_malloc_r+0x2c>
 800534e:	1cc4      	adds	r4, r0, #3
 8005350:	f024 0403 	bic.w	r4, r4, #3
 8005354:	42a0      	cmp	r0, r4
 8005356:	d0e3      	beq.n	8005320 <_malloc_r+0x64>
 8005358:	1a21      	subs	r1, r4, r0
 800535a:	4630      	mov	r0, r6
 800535c:	f000 f82e 	bl	80053bc <_sbrk_r>
 8005360:	3001      	adds	r0, #1
 8005362:	d1dd      	bne.n	8005320 <_malloc_r+0x64>
 8005364:	e7cf      	b.n	8005306 <_malloc_r+0x4a>
 8005366:	bf00      	nop
 8005368:	2000009c 	.word	0x2000009c
 800536c:	200000a0 	.word	0x200000a0

08005370 <_realloc_r>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	4607      	mov	r7, r0
 8005374:	4614      	mov	r4, r2
 8005376:	460e      	mov	r6, r1
 8005378:	b921      	cbnz	r1, 8005384 <_realloc_r+0x14>
 800537a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800537e:	4611      	mov	r1, r2
 8005380:	f7ff bf9c 	b.w	80052bc <_malloc_r>
 8005384:	b922      	cbnz	r2, 8005390 <_realloc_r+0x20>
 8005386:	f7ff ff49 	bl	800521c <_free_r>
 800538a:	4625      	mov	r5, r4
 800538c:	4628      	mov	r0, r5
 800538e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005390:	f000 f830 	bl	80053f4 <_malloc_usable_size_r>
 8005394:	42a0      	cmp	r0, r4
 8005396:	d20f      	bcs.n	80053b8 <_realloc_r+0x48>
 8005398:	4621      	mov	r1, r4
 800539a:	4638      	mov	r0, r7
 800539c:	f7ff ff8e 	bl	80052bc <_malloc_r>
 80053a0:	4605      	mov	r5, r0
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d0f2      	beq.n	800538c <_realloc_r+0x1c>
 80053a6:	4631      	mov	r1, r6
 80053a8:	4622      	mov	r2, r4
 80053aa:	f7ff ff0f 	bl	80051cc <memcpy>
 80053ae:	4631      	mov	r1, r6
 80053b0:	4638      	mov	r0, r7
 80053b2:	f7ff ff33 	bl	800521c <_free_r>
 80053b6:	e7e9      	b.n	800538c <_realloc_r+0x1c>
 80053b8:	4635      	mov	r5, r6
 80053ba:	e7e7      	b.n	800538c <_realloc_r+0x1c>

080053bc <_sbrk_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	4d06      	ldr	r5, [pc, #24]	; (80053d8 <_sbrk_r+0x1c>)
 80053c0:	2300      	movs	r3, #0
 80053c2:	4604      	mov	r4, r0
 80053c4:	4608      	mov	r0, r1
 80053c6:	602b      	str	r3, [r5, #0]
 80053c8:	f7fb fc36 	bl	8000c38 <_sbrk>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d102      	bne.n	80053d6 <_sbrk_r+0x1a>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	b103      	cbz	r3, 80053d6 <_sbrk_r+0x1a>
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	200001c4 	.word	0x200001c4

080053dc <__malloc_lock>:
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <__malloc_lock+0x8>)
 80053de:	f000 b811 	b.w	8005404 <__retarget_lock_acquire_recursive>
 80053e2:	bf00      	nop
 80053e4:	200001cc 	.word	0x200001cc

080053e8 <__malloc_unlock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	; (80053f0 <__malloc_unlock+0x8>)
 80053ea:	f000 b80c 	b.w	8005406 <__retarget_lock_release_recursive>
 80053ee:	bf00      	nop
 80053f0:	200001cc 	.word	0x200001cc

080053f4 <_malloc_usable_size_r>:
 80053f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f8:	1f18      	subs	r0, r3, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bfbc      	itt	lt
 80053fe:	580b      	ldrlt	r3, [r1, r0]
 8005400:	18c0      	addlt	r0, r0, r3
 8005402:	4770      	bx	lr

08005404 <__retarget_lock_acquire_recursive>:
 8005404:	4770      	bx	lr

08005406 <__retarget_lock_release_recursive>:
 8005406:	4770      	bx	lr

08005408 <_init>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr

08005414 <_fini>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr
