
nucleoL476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004938  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b88  08004b88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b90  08004b90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08004c08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004c08  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbab  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf4  00000000  00000000  0002cc4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002e840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002f258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026628  00000000  00000000  0002fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd63  00000000  00000000  000561f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec3d1  00000000  00000000  00061f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e324  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd8  00000000  00000000  0014e374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ab0 	.word	0x08004ab0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004ab0 	.word	0x08004ab0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b092      	sub	sp, #72	; 0x48
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fbdb 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f8cf 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f9b9 	bl	80008f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f987 	bl	8000898 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800058a:	f000 f91b 	bl	80007c4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  uart_buf_len = sprintf(uart_buf, "\nCAN BUS Communication\r\n");
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	495a      	ldr	r1, [pc, #360]	; (80006fc <main+0x188>)
 8000592:	4618      	mov	r0, r3
 8000594:	f003 fe1e 	bl	80041d4 <siprintf>
 8000598:	4603      	mov	r3, r0
 800059a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  HAL_UART_Transmit(&huart2,(uint8_t*)uart_buf, uart_buf_len, 100);
 800059e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	2364      	movs	r3, #100	; 0x64
 80005a8:	4855      	ldr	r0, [pc, #340]	; (8000700 <main+0x18c>)
 80005aa:	f003 f8e5 	bl	8003778 <HAL_UART_Transmit>

  // Setup the transmit header
    TxHeader.DLC = 8;  // Sending 8 bytes
 80005ae:	4b55      	ldr	r3, [pc, #340]	; (8000704 <main+0x190>)
 80005b0:	2208      	movs	r2, #8
 80005b2:	611a      	str	r2, [r3, #16]
    TxHeader.ExtId = 0;
 80005b4:	4b53      	ldr	r3, [pc, #332]	; (8000704 <main+0x190>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
    TxHeader.IDE = CAN_ID_STD;  // Use standard message id
 80005ba:	4b52      	ldr	r3, [pc, #328]	; (8000704 <main+0x190>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;   // Sending data to request information
 80005c0:	4b50      	ldr	r3, [pc, #320]	; (8000704 <main+0x190>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = requestMessagesID; // Message id is 0x07DF to request information
 80005c6:	4b4f      	ldr	r3, [pc, #316]	; (8000704 <main+0x190>)
 80005c8:	f240 72df 	movw	r2, #2015	; 0x7df
 80005cc:	601a      	str	r2, [r3, #0]
    TxHeader.TransmitGlobalTime = DISABLE;
 80005ce:	4b4d      	ldr	r3, [pc, #308]	; (8000704 <main+0x190>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	751a      	strb	r2, [r3, #20]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Get the vehicle's speed
	  // Setup the data or payload for the speed of the vehicle
	 	TxData[0] = 0x02;	// Look at the next 2 bytes
 80005d4:	4b4c      	ldr	r3, [pc, #304]	; (8000708 <main+0x194>)
 80005d6:	2202      	movs	r2, #2
 80005d8:	701a      	strb	r2, [r3, #0]
	 	TxData[1] = 0x01;	// Mode 1 requests Current Data
 80005da:	4b4b      	ldr	r3, [pc, #300]	; (8000708 <main+0x194>)
 80005dc:	2201      	movs	r2, #1
 80005de:	705a      	strb	r2, [r3, #1]
	 	TxData[2] = 0x0D;	// Requesting velocity PID
 80005e0:	4b49      	ldr	r3, [pc, #292]	; (8000708 <main+0x194>)
 80005e2:	220d      	movs	r2, #13
 80005e4:	709a      	strb	r2, [r3, #2]
	 	TxData[3] = 0x00;	// Dummy values. The number of bytes sent is set by the DLC parameter
 80005e6:	4b48      	ldr	r3, [pc, #288]	; (8000708 <main+0x194>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	70da      	strb	r2, [r3, #3]
	 	TxData[4] = 0x00;
 80005ec:	4b46      	ldr	r3, [pc, #280]	; (8000708 <main+0x194>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	711a      	strb	r2, [r3, #4]
	 	TxData[5] = 0x00;
 80005f2:	4b45      	ldr	r3, [pc, #276]	; (8000708 <main+0x194>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	715a      	strb	r2, [r3, #5]
	 	TxData[6] = 0x00;
 80005f8:	4b43      	ldr	r3, [pc, #268]	; (8000708 <main+0x194>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	719a      	strb	r2, [r3, #6]
	 	TxData[7] = 0x00;
 80005fe:	4b42      	ldr	r3, [pc, #264]	; (8000708 <main+0x194>)
 8000600:	2200      	movs	r2, #0
 8000602:	71da      	strb	r2, [r3, #7]

	  // Start the transmission process
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000604:	4b41      	ldr	r3, [pc, #260]	; (800070c <main+0x198>)
 8000606:	4a40      	ldr	r2, [pc, #256]	; (8000708 <main+0x194>)
 8000608:	493e      	ldr	r1, [pc, #248]	; (8000704 <main+0x190>)
 800060a:	4841      	ldr	r0, [pc, #260]	; (8000710 <main+0x19c>)
 800060c:	f000 fe3b 	bl	8001286 <HAL_CAN_AddTxMessage>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <main+0xa6>
	  	{
	  		Error_Handler();
 8000616:	f000 f9f5 	bl	8000a04 <Error_Handler>
	  	}

	  HAL_Delay(250);  // Wait for a quarter of a second
 800061a:	20fa      	movs	r0, #250	; 0xfa
 800061c:	f000 fc06 	bl	8000e2c <HAL_Delay>

	  if ((RxHeader.StdId == 0x07E8) && (RxHeader.IDE == CAN_ID_STD) )  //&& (RxHeader.DLC == 2)
 8000620:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <main+0x1a0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 8000628:	d107      	bne.n	800063a <main+0xc6>
 800062a:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <main+0x1a0>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d103      	bne.n	800063a <main+0xc6>
	  {
		  speed = RxData[3]; // get the current speed
 8000632:	4b39      	ldr	r3, [pc, #228]	; (8000718 <main+0x1a4>)
 8000634:	78db      	ldrb	r3, [r3, #3]
 8000636:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  }

	  // Get the engine's RPM
	  // Setup the data or payload for the engine RPM
	  	 	TxData[0] = 0x02;	// Look at the next 2 bytes
 800063a:	4b33      	ldr	r3, [pc, #204]	; (8000708 <main+0x194>)
 800063c:	2202      	movs	r2, #2
 800063e:	701a      	strb	r2, [r3, #0]
	  	 	TxData[1] = 0x01;	// Mode 1 requests Current Data
 8000640:	4b31      	ldr	r3, [pc, #196]	; (8000708 <main+0x194>)
 8000642:	2201      	movs	r2, #1
 8000644:	705a      	strb	r2, [r3, #1]
	  	 	TxData[2] = 0x0C;	// Requesting engine speed PID
 8000646:	4b30      	ldr	r3, [pc, #192]	; (8000708 <main+0x194>)
 8000648:	220c      	movs	r2, #12
 800064a:	709a      	strb	r2, [r3, #2]
	  	 	TxData[3] = 0x00;	// Dummy values. The number of bytes sent is set by the DLC parameter
 800064c:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <main+0x194>)
 800064e:	2200      	movs	r2, #0
 8000650:	70da      	strb	r2, [r3, #3]
	  	 	TxData[4] = 0x00;
 8000652:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <main+0x194>)
 8000654:	2200      	movs	r2, #0
 8000656:	711a      	strb	r2, [r3, #4]
	  	 	TxData[5] = 0x00;
 8000658:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <main+0x194>)
 800065a:	2200      	movs	r2, #0
 800065c:	715a      	strb	r2, [r3, #5]
	  	 	TxData[6] = 0x00;
 800065e:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <main+0x194>)
 8000660:	2200      	movs	r2, #0
 8000662:	719a      	strb	r2, [r3, #6]
	  	 	TxData[7] = 0x00;
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <main+0x194>)
 8000666:	2200      	movs	r2, #0
 8000668:	71da      	strb	r2, [r3, #7]

	  	  // Start the transmission process
	  	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800066a:	4b28      	ldr	r3, [pc, #160]	; (800070c <main+0x198>)
 800066c:	4a26      	ldr	r2, [pc, #152]	; (8000708 <main+0x194>)
 800066e:	4925      	ldr	r1, [pc, #148]	; (8000704 <main+0x190>)
 8000670:	4827      	ldr	r0, [pc, #156]	; (8000710 <main+0x19c>)
 8000672:	f000 fe08 	bl	8001286 <HAL_CAN_AddTxMessage>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <main+0x10c>
	  	  	{
	  	  		Error_Handler();
 800067c:	f000 f9c2 	bl	8000a04 <Error_Handler>
	  	  	}
	  	  HAL_Delay(250);  // Wait for a quarter of a second
 8000680:	20fa      	movs	r0, #250	; 0xfa
 8000682:	f000 fbd3 	bl	8000e2c <HAL_Delay>

	  	  if ((RxHeader.StdId == 0x07E8) && (RxHeader.IDE == CAN_ID_STD) )  //&& (RxHeader.DLC == 2)
 8000686:	4b23      	ldr	r3, [pc, #140]	; (8000714 <main+0x1a0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 800068e:	d10b      	bne.n	80006a8 <main+0x134>
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <main+0x1a0>)
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d107      	bne.n	80006a8 <main+0x134>
	  	  {
	  		  rpm = (RxData[3] << 8 | RxData[4]) >> 2; // get the current speed
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <main+0x1a4>)
 800069a:	78db      	ldrb	r3, [r3, #3]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <main+0x1a4>)
 80006a0:	7912      	ldrb	r2, [r2, #4]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	109b      	asrs	r3, r3, #2
 80006a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  	  }

	  	  if (speed > 0) {
 80006a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00a      	beq.n	80006c6 <main+0x152>
	  		  ratio = rpm / speed;
 80006b0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80006b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80006ba:	ee07 3a90 	vmov	s15, r3
 80006be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006c2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  	  }

	 	 // Send the information to the laptop through UART2
	  	uart_buf_len = sprintf(uart_buf, "%hu km/h at %hu RPM with ratio %hu \r\n ", speed, rpm, (unsigned int)ratio);
 80006c6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80006ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80006cc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80006d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d4:	ee17 1a90 	vmov	r1, s15
 80006d8:	1d38      	adds	r0, r7, #4
 80006da:	9100      	str	r1, [sp, #0]
 80006dc:	490f      	ldr	r1, [pc, #60]	; (800071c <main+0x1a8>)
 80006de:	f003 fd79 	bl	80041d4 <siprintf>
 80006e2:	4603      	mov	r3, r0
 80006e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);
 80006e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	1d39      	adds	r1, r7, #4
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <main+0x18c>)
 80006f4:	f003 f840 	bl	8003778 <HAL_UART_Transmit>
	 	TxData[0] = 0x02;	// Look at the next 2 bytes
 80006f8:	e76c      	b.n	80005d4 <main+0x60>
 80006fa:	bf00      	nop
 80006fc:	08004ac8 	.word	0x08004ac8
 8000700:	200000b4 	.word	0x200000b4
 8000704:	20000138 	.word	0x20000138
 8000708:	20000170 	.word	0x20000170
 800070c:	2000016c 	.word	0x2000016c
 8000710:	2000008c 	.word	0x2000008c
 8000714:	20000150 	.word	0x20000150
 8000718:	20000178 	.word	0x20000178
 800071c:	08004ae4 	.word	0x08004ae4

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b096      	sub	sp, #88	; 0x58
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2244      	movs	r2, #68	; 0x44
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 fd48 	bl	80041c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000742:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000746:	f001 fcb7 	bl	80020b8 <HAL_PWREx_ControlVoltageScaling>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000750:	f000 f958 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800075c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075e:	2310      	movs	r3, #16
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000766:	2302      	movs	r3, #2
 8000768:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800076e:	230a      	movs	r3, #10
 8000770:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000772:	2307      	movs	r3, #7
 8000774:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000776:	2302      	movs	r3, #2
 8000778:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800077a:	2302      	movs	r3, #2
 800077c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fcee 	bl	8002164 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800078e:	f000 f939 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	230f      	movs	r3, #15
 8000794:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2303      	movs	r3, #3
 8000798:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	2104      	movs	r1, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 f8b6 	bl	800291c <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007b6:	f000 f925 	bl	8000a04 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3758      	adds	r7, #88	; 0x58
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007ca:	4b31      	ldr	r3, [pc, #196]	; (8000890 <MX_CAN1_Init+0xcc>)
 80007cc:	4a31      	ldr	r2, [pc, #196]	; (8000894 <MX_CAN1_Init+0xd0>)
 80007ce:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_CAN1_Init+0xcc>)
 80007d2:	2210      	movs	r2, #16
 80007d4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <MX_CAN1_Init+0xcc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_CAN1_Init+0xcc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_CAN1_Init+0xcc>)
 80007e4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80007e8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_CAN1_Init+0xcc>)
 80007ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007f0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007f2:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_CAN1_Init+0xcc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_CAN1_Init+0xcc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007fe:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_CAN1_Init+0xcc>)
 8000800:	2200      	movs	r2, #0
 8000802:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_CAN1_Init+0xcc>)
 8000806:	2200      	movs	r2, #0
 8000808:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_CAN1_Init+0xcc>)
 800080c:	2200      	movs	r2, #0
 800080e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_CAN1_Init+0xcc>)
 8000812:	2200      	movs	r2, #0
 8000814:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000816:	481e      	ldr	r0, [pc, #120]	; (8000890 <MX_CAN1_Init+0xcc>)
 8000818:	f000 fb2c 	bl	8000e74 <HAL_CAN_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000822:	f000 f8ef 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 800082a:	230a      	movs	r3, #10
 800082c:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x7E0 << 5; // Standard CAN id (not extended)
 8000832:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000836:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0x0000;
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x7E0 << 5;
 800083c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000840:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 0;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)	// Configure the CAN filter
 8000852:	463b      	mov	r3, r7
 8000854:	4619      	mov	r1, r3
 8000856:	480e      	ldr	r0, [pc, #56]	; (8000890 <MX_CAN1_Init+0xcc>)
 8000858:	f000 fc07 	bl	800106a <HAL_CAN_ConfigFilter>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_CAN1_Init+0xa2>
    {
      Error_Handler();
 8000862:	f000 f8cf 	bl	8000a04 <Error_Handler>
    }
    if (HAL_CAN_Start(&hcan1) != HAL_OK)	// Start the CAN peripheral
 8000866:	480a      	ldr	r0, [pc, #40]	; (8000890 <MX_CAN1_Init+0xcc>)
 8000868:	f000 fcc9 	bl	80011fe <HAL_CAN_Start>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_CAN1_Init+0xb2>
    {
      Error_Handler();
 8000872:	f000 f8c7 	bl	8000a04 <Error_Handler>
    }
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)  // Enable CAN message receive interrupts
 8000876:	2102      	movs	r1, #2
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_CAN1_Init+0xcc>)
 800087a:	f000 fee6 	bl	800164a <HAL_CAN_ActivateNotification>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_CAN1_Init+0xc4>
    {
      Error_Handler();
 8000884:	f000 f8be 	bl	8000a04 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000008c 	.word	0x2000008c
 8000894:	40006400 	.word	0x40006400

08000898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 800089e:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <MX_USART2_UART_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008dc:	f002 fefe 	bl	80036dc <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008e6:	f000 f88d 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000b4 	.word	0x200000b4
 80008f4:	40004400 	.word	0x40004400

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4b2b      	ldr	r3, [pc, #172]	; (80009bc <MX_GPIO_Init+0xc4>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a2a      	ldr	r2, [pc, #168]	; (80009bc <MX_GPIO_Init+0xc4>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b28      	ldr	r3, [pc, #160]	; (80009bc <MX_GPIO_Init+0xc4>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <MX_GPIO_Init+0xc4>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a24      	ldr	r2, [pc, #144]	; (80009bc <MX_GPIO_Init+0xc4>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b22      	ldr	r3, [pc, #136]	; (80009bc <MX_GPIO_Init+0xc4>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_GPIO_Init+0xc4>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <MX_GPIO_Init+0xc4>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_GPIO_Init+0xc4>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_GPIO_Init+0xc4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a18      	ldr	r2, [pc, #96]	; (80009bc <MX_GPIO_Init+0xc4>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_GPIO_Init+0xc4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2120      	movs	r1, #32
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f001 fb79 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000980:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <MX_GPIO_Init+0xc8>)
 8000992:	f001 f9c1 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000996:	2320      	movs	r3, #32
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b0:	f001 f9b2 	bl	8001d18 <HAL_GPIO_Init>

}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	48000800 	.word	0x48000800

080009c4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
/* This function is called when there is a CAN received interrupt*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	// Get the CAN message from FIFO0, put the header into the receive header and the data in the its array
	if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f000 fd27 	bl	8001426 <HAL_CAN_GetRxMessage>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		/* Reception Error */
		Error_Handler();
 80009de:	f000 f811 	bl	8000a04 <Error_Handler>
	}
	count++;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	3301      	adds	r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80009ec:	701a      	strb	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000178 	.word	0x20000178
 80009fc:	20000150 	.word	0x20000150
 8000a00:	20000180 	.word	0x20000180

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6613      	str	r3, [r2, #96]	; 0x60
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_MspInit+0x44>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_MspInit+0x44>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <HAL_CAN_MspInit+0x90>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d131      	bne.n	8000ade <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_CAN_MspInit+0x94>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <HAL_CAN_MspInit+0x94>)
 8000a80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a84:	6593      	str	r3, [r2, #88]	; 0x58
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_CAN_MspInit+0x94>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_CAN_MspInit+0x94>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a15      	ldr	r2, [pc, #84]	; (8000aec <HAL_CAN_MspInit+0x94>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_CAN_MspInit+0x94>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000abc:	2309      	movs	r3, #9
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aca:	f001 f925 	bl	8001d18 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2014      	movs	r0, #20
 8000ad4:	f001 f8e9 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ad8:	2014      	movs	r0, #20
 8000ada:	f001 f902 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	; 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40006400 	.word	0x40006400
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0ac      	sub	sp, #176	; 0xb0
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2288      	movs	r2, #136	; 0x88
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 fb57 	bl	80041c4 <memset>
  if(huart->Instance==USART2)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <HAL_UART_MspInit+0xb0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d13b      	bne.n	8000b98 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 f919 	bl	8002d64 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b38:	f7ff ff64 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b40:	4a18      	ldr	r2, [pc, #96]	; (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b46:	6593      	str	r3, [r2, #88]	; 0x58
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b58:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b84:	2307      	movs	r3, #7
 8000b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b94:	f001 f8c0 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	37b0      	adds	r7, #176	; 0xb0
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f8fa 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <CAN1_RX0_IRQHandler+0x10>)
 8000c02:	f000 fd48 	bl	8001696 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000008c 	.word	0x2000008c

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f003 fa96 	bl	8004170 <__errno>
 8000c44:	4603      	mov	r3, r0
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20018000 	.word	0x20018000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	20000184 	.word	0x20000184
 8000c78:	200001a0 	.word	0x200001a0

08000c7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <SystemInit+0x5c>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <SystemInit+0x5c>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <SystemInit+0x60>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <SystemInit+0x60>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <SystemInit+0x60>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <SystemInit+0x60>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <SystemInit+0x60>)
 8000ca8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cb0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <SystemInit+0x60>)
 8000cb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cb8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <SystemInit+0x60>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <SystemInit+0x60>)
 8000cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SystemInit+0x60>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce4:	f7ff ffca 	bl	8000c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ce8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cea:	e003      	b.n	8000cf4 <LoopCopyDataInit>

08000cec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cf0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cf2:	3104      	adds	r1, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cf8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cfa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cfc:	d3f6      	bcc.n	8000cec <CopyDataInit>
	ldr	r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d00:	e002      	b.n	8000d08 <LoopFillZerobss>

08000d02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d04:	f842 3b04 	str.w	r3, [r2], #4

08000d08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <LoopForever+0x16>)
	cmp	r2, r3
 8000d0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d0c:	d3f9      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f003 fa35 	bl	800417c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d12:	f7ff fc2f 	bl	8000574 <main>

08000d16 <LoopForever>:

LoopForever:
    b LoopForever
 8000d16:	e7fe      	b.n	8000d16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d18:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d1c:	08004b98 	.word	0x08004b98
	ldr	r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d24:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000d28:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000d2c:	2000019c 	.word	0x2000019c

08000d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_2_IRQHandler>
	...

08000d34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_Init+0x3c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <HAL_Init+0x3c>)
 8000d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f000 ffa2 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 f80f 	bl	8000d74 <HAL_InitTick>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d002      	beq.n	8000d62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	e001      	b.n	8000d66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d62:	f7ff fe55 	bl	8000a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d66:	79fb      	ldrb	r3, [r7, #7]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_InitTick+0x6c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d023      	beq.n	8000dd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_InitTick+0x70>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_InitTick+0x6c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 ffad 	bl	8001cfe <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10f      	bne.n	8000dca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d809      	bhi.n	8000dc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 ff77 	bl	8001caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_InitTick+0x74>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e007      	b.n	8000dd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
 8000dc8:	e004      	b.n	8000dd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	e001      	b.n	8000dd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000188 	.word	0x20000188

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000188 	.word	0x20000188

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_Delay+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffde 	bl	8000e14 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008

08000e74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e0ed      	b.n	8001062 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff fde0 	bl	8000a58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 0201 	orr.w	r2, r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ea8:	f7ff ffb4 	bl	8000e14 <HAL_GetTick>
 8000eac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eae:	e012      	b.n	8000ed6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000eb0:	f7ff ffb0 	bl	8000e14 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b0a      	cmp	r3, #10
 8000ebc:	d90b      	bls.n	8000ed6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2205      	movs	r2, #5
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e0c5      	b.n	8001062 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0e5      	beq.n	8000eb0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0202 	bic.w	r2, r2, #2
 8000ef2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ef4:	f7ff ff8e 	bl	8000e14 <HAL_GetTick>
 8000ef8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000efa:	e012      	b.n	8000f22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000efc:	f7ff ff8a 	bl	8000e14 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b0a      	cmp	r3, #10
 8000f08:	d90b      	bls.n	8000f22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2205      	movs	r2, #5
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e09f      	b.n	8001062 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1e5      	bne.n	8000efc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7e1b      	ldrb	r3, [r3, #24]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d108      	bne.n	8000f4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	e007      	b.n	8000f5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7e5b      	ldrb	r3, [r3, #25]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d108      	bne.n	8000f74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	e007      	b.n	8000f84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7e9b      	ldrb	r3, [r3, #26]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d108      	bne.n	8000f9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0220 	orr.w	r2, r2, #32
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	e007      	b.n	8000fae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0220 	bic.w	r2, r2, #32
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7edb      	ldrb	r3, [r3, #27]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d108      	bne.n	8000fc8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0210 	bic.w	r2, r2, #16
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e007      	b.n	8000fd8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0210 	orr.w	r2, r2, #16
 8000fd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7f1b      	ldrb	r3, [r3, #28]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d108      	bne.n	8000ff2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0208 	orr.w	r2, r2, #8
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e007      	b.n	8001002 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0208 	bic.w	r2, r2, #8
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7f5b      	ldrb	r3, [r3, #29]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d108      	bne.n	800101c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f042 0204 	orr.w	r2, r2, #4
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e007      	b.n	800102c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0204 	bic.w	r2, r2, #4
 800102a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	ea42 0103 	orr.w	r1, r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	1e5a      	subs	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800106a:	b480      	push	{r7}
 800106c:	b087      	sub	sp, #28
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001080:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001082:	7cfb      	ldrb	r3, [r7, #19]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d003      	beq.n	8001090 <HAL_CAN_ConfigFilter+0x26>
 8001088:	7cfb      	ldrb	r3, [r7, #19]
 800108a:	2b02      	cmp	r3, #2
 800108c:	f040 80aa 	bne.w	80011e4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	2201      	movs	r2, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d123      	bne.n	8001112 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	401a      	ands	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3248      	adds	r2, #72	; 0x48
 80010f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001106:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001108:	6979      	ldr	r1, [r7, #20]
 800110a:	3348      	adds	r3, #72	; 0x48
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d122      	bne.n	8001160 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	431a      	orrs	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800113a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	3248      	adds	r2, #72	; 0x48
 8001140:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001154:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001156:	6979      	ldr	r1, [r7, #20]
 8001158:	3348      	adds	r3, #72	; 0x48
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	440b      	add	r3, r1
 800115e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d109      	bne.n	800117c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800117a:	e007      	b.n	800118c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	431a      	orrs	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d109      	bne.n	80011a8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43db      	mvns	r3, r3
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80011a6:	e007      	b.n	80011b8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	431a      	orrs	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d107      	bne.n	80011d0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	431a      	orrs	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011d6:	f023 0201 	bic.w	r2, r3, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e006      	b.n	80011f2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
  }
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	371c      	adds	r7, #28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b01      	cmp	r3, #1
 8001210:	d12e      	bne.n	8001270 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2202      	movs	r2, #2
 8001216:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0201 	bic.w	r2, r2, #1
 8001228:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800122a:	f7ff fdf3 	bl	8000e14 <HAL_GetTick>
 800122e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001230:	e012      	b.n	8001258 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001232:	f7ff fdef 	bl	8000e14 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b0a      	cmp	r3, #10
 800123e:	d90b      	bls.n	8001258 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2205      	movs	r2, #5
 8001250:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e012      	b.n	800127e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1e5      	bne.n	8001232 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	e006      	b.n	800127e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
  }
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001286:	b480      	push	{r7}
 8001288:	b089      	sub	sp, #36	; 0x24
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012a4:	7ffb      	ldrb	r3, [r7, #31]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d003      	beq.n	80012b2 <HAL_CAN_AddTxMessage+0x2c>
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	f040 80ad 	bne.w	800140c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10a      	bne.n	80012d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 8095 	beq.w	80013fc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	0e1b      	lsrs	r3, r3, #24
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012dc:	2201      	movs	r2, #1
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	409a      	lsls	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10d      	bne.n	800130a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012f8:	68f9      	ldr	r1, [r7, #12]
 80012fa:	6809      	ldr	r1, [r1, #0]
 80012fc:	431a      	orrs	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3318      	adds	r3, #24
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	440b      	add	r3, r1
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	e00f      	b.n	800132a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001314:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800131a:	68f9      	ldr	r1, [r7, #12]
 800131c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800131e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3318      	adds	r3, #24
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	440b      	add	r3, r1
 8001328:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6819      	ldr	r1, [r3, #0]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	691a      	ldr	r2, [r3, #16]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3318      	adds	r3, #24
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	440b      	add	r3, r1
 800133a:	3304      	adds	r3, #4
 800133c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	7d1b      	ldrb	r3, [r3, #20]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d111      	bne.n	800136a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3318      	adds	r3, #24
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	4413      	add	r3, r2
 8001352:	3304      	adds	r3, #4
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	6811      	ldr	r1, [r2, #0]
 800135a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3318      	adds	r3, #24
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	440b      	add	r3, r1
 8001366:	3304      	adds	r3, #4
 8001368:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3307      	adds	r3, #7
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	061a      	lsls	r2, r3, #24
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3306      	adds	r3, #6
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3305      	adds	r3, #5
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	4313      	orrs	r3, r2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	3204      	adds	r2, #4
 800138a:	7812      	ldrb	r2, [r2, #0]
 800138c:	4610      	mov	r0, r2
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	6811      	ldr	r1, [r2, #0]
 8001392:	ea43 0200 	orr.w	r2, r3, r0
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	440b      	add	r3, r1
 800139c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80013a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3303      	adds	r3, #3
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	061a      	lsls	r2, r3, #24
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3302      	adds	r3, #2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	041b      	lsls	r3, r3, #16
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	4313      	orrs	r3, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	4610      	mov	r0, r2
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	6811      	ldr	r1, [r2, #0]
 80013c8:	ea43 0200 	orr.w	r2, r3, r0
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	440b      	add	r3, r1
 80013d2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3318      	adds	r3, #24
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	4413      	add	r3, r2
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	6811      	ldr	r1, [r2, #0]
 80013ea:	f043 0201 	orr.w	r2, r3, #1
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3318      	adds	r3, #24
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	440b      	add	r3, r1
 80013f6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e00e      	b.n	800141a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e006      	b.n	800141a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
  }
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001426:	b480      	push	{r7}
 8001428:	b087      	sub	sp, #28
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d003      	beq.n	800144a <HAL_CAN_GetRxMessage+0x24>
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	2b02      	cmp	r3, #2
 8001446:	f040 80f3 	bne.w	8001630 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10e      	bne.n	800146e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d116      	bne.n	800148c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e0e7      	b.n	800163e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d107      	bne.n	800148c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0d8      	b.n	800163e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	331b      	adds	r3, #27
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0204 	and.w	r2, r3, #4
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	331b      	adds	r3, #27
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	4413      	add	r3, r2
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0d5b      	lsrs	r3, r3, #21
 80014ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e00b      	b.n	80014dc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	331b      	adds	r3, #27
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	4413      	add	r3, r2
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	08db      	lsrs	r3, r3, #3
 80014d4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	331b      	adds	r3, #27
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	4413      	add	r3, r2
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0202 	and.w	r2, r3, #2
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	331b      	adds	r3, #27
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	4413      	add	r3, r2
 80014fe:	3304      	adds	r3, #4
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 020f 	and.w	r2, r3, #15
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	331b      	adds	r3, #27
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	4413      	add	r3, r2
 8001516:	3304      	adds	r3, #4
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	0a1b      	lsrs	r3, r3, #8
 800151c:	b2da      	uxtb	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	331b      	adds	r3, #27
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	4413      	add	r3, r2
 800152e:	3304      	adds	r3, #4
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	0c1b      	lsrs	r3, r3, #16
 8001534:	b29a      	uxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	4413      	add	r3, r2
 8001544:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	4413      	add	r3, r2
 800155a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0a1a      	lsrs	r2, r3, #8
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	4413      	add	r3, r2
 8001574:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0c1a      	lsrs	r2, r3, #16
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	3302      	adds	r3, #2
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	4413      	add	r3, r2
 800158e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0e1a      	lsrs	r2, r3, #24
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	3303      	adds	r3, #3
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	3304      	adds	r3, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	4413      	add	r3, r2
 80015c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	0a1a      	lsrs	r2, r3, #8
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	3305      	adds	r3, #5
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	4413      	add	r3, r2
 80015da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0c1a      	lsrs	r2, r3, #16
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	3306      	adds	r3, #6
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	0e1a      	lsrs	r2, r3, #24
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	3307      	adds	r3, #7
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 0220 	orr.w	r2, r2, #32
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	e007      	b.n	800162c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0220 	orr.w	r2, r2, #32
 800162a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	e006      	b.n	800163e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
  }
}
 800163e:	4618      	mov	r0, r3
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d002      	beq.n	8001668 <HAL_CAN_ActivateNotification+0x1e>
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d109      	bne.n	800167c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6959      	ldr	r1, [r3, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	e006      	b.n	800168a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
  }
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b08a      	sub	sp, #40	; 0x28
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d07c      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d023      	beq.n	800172e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2201      	movs	r2, #1
 80016ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f983 	bl	8001a04 <HAL_CAN_TxMailbox0CompleteCallback>
 80016fe:	e016      	b.n	800172e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
 8001712:	e00c      	b.n	800172e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d004      	beq.n	8001728 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
 8001726:	e002      	b.n	800172e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f989 	bl	8001a40 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d024      	beq.n	8001782 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001740:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f963 	bl	8001a18 <HAL_CAN_TxMailbox1CompleteCallback>
 8001752:	e016      	b.n	8001782 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
 8001766:	e00c      	b.n	8001782 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
 800177a:	e002      	b.n	8001782 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f969 	bl	8001a54 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d024      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001794:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f943 	bl	8001a2c <HAL_CAN_TxMailbox2CompleteCallback>
 80017a6:	e016      	b.n	80017d6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ba:	e00c      	b.n	80017d6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d004      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
 80017ce:	e002      	b.n	80017d6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f949 	bl	8001a68 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00c      	beq.n	80017fa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2210      	movs	r2, #16
 80017f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00b      	beq.n	800181c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2208      	movs	r2, #8
 8001814:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f930 	bl	8001a7c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d009      	beq.n	800183a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff f8c5 	bl	80009c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00c      	beq.n	800185e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001854:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2210      	movs	r2, #16
 800185c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	f003 0320 	and.w	r3, r3, #32
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2208      	movs	r2, #8
 8001878:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f912 	bl	8001aa4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f8f9 	bl	8001a90 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00b      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2210      	movs	r2, #16
 80018b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f8fc 	bl	8001ab8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2208      	movs	r2, #8
 80018da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f8f5 	bl	8001acc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d07b      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d072      	beq.n	80019dc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001950:	2b00      	cmp	r3, #0
 8001952:	d043      	beq.n	80019dc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800195a:	2b00      	cmp	r3, #0
 800195c:	d03e      	beq.n	80019dc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001964:	2b60      	cmp	r3, #96	; 0x60
 8001966:	d02b      	beq.n	80019c0 <HAL_CAN_IRQHandler+0x32a>
 8001968:	2b60      	cmp	r3, #96	; 0x60
 800196a:	d82e      	bhi.n	80019ca <HAL_CAN_IRQHandler+0x334>
 800196c:	2b50      	cmp	r3, #80	; 0x50
 800196e:	d022      	beq.n	80019b6 <HAL_CAN_IRQHandler+0x320>
 8001970:	2b50      	cmp	r3, #80	; 0x50
 8001972:	d82a      	bhi.n	80019ca <HAL_CAN_IRQHandler+0x334>
 8001974:	2b40      	cmp	r3, #64	; 0x40
 8001976:	d019      	beq.n	80019ac <HAL_CAN_IRQHandler+0x316>
 8001978:	2b40      	cmp	r3, #64	; 0x40
 800197a:	d826      	bhi.n	80019ca <HAL_CAN_IRQHandler+0x334>
 800197c:	2b30      	cmp	r3, #48	; 0x30
 800197e:	d010      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x30c>
 8001980:	2b30      	cmp	r3, #48	; 0x30
 8001982:	d822      	bhi.n	80019ca <HAL_CAN_IRQHandler+0x334>
 8001984:	2b10      	cmp	r3, #16
 8001986:	d002      	beq.n	800198e <HAL_CAN_IRQHandler+0x2f8>
 8001988:	2b20      	cmp	r3, #32
 800198a:	d005      	beq.n	8001998 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800198c:	e01d      	b.n	80019ca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001996:	e019      	b.n	80019cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	f043 0310 	orr.w	r3, r3, #16
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019a0:	e014      	b.n	80019cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	f043 0320 	orr.w	r3, r3, #32
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019aa:	e00f      	b.n	80019cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019b4:	e00a      	b.n	80019cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019be:	e005      	b.n	80019cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019c8:	e000      	b.n	80019cc <HAL_CAN_IRQHandler+0x336>
            break;
 80019ca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2204      	movs	r2, #4
 80019e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f872 	bl	8001ae0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <__NVIC_EnableIRQ+0x38>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff8e 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff29 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff3e 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff8e 	bl	8001be8 <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5d 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff31 	bl	8001b58 <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa2 	bl	8001c50 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	e17f      	b.n	8002028 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8171 	beq.w	8002022 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d005      	beq.n	8001d58 <HAL_GPIO_Init+0x40>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d130      	bne.n	8001dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d8e:	2201      	movs	r2, #1
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 0201 	and.w	r2, r3, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d118      	bne.n	8001df8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	08db      	lsrs	r3, r3, #3
 8001de2:	f003 0201 	and.w	r2, r3, #1
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d017      	beq.n	8001e34 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d123      	bne.n	8001e88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	6939      	ldr	r1, [r7, #16]
 8001e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80ac 	beq.w	8002022 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	4b5f      	ldr	r3, [pc, #380]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ece:	4a5e      	ldr	r2, [pc, #376]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed6:	4b5c      	ldr	r3, [pc, #368]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee2:	4a5a      	ldr	r2, [pc, #360]	; (800204c <HAL_GPIO_Init+0x334>)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f0c:	d025      	beq.n	8001f5a <HAL_GPIO_Init+0x242>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4f      	ldr	r2, [pc, #316]	; (8002050 <HAL_GPIO_Init+0x338>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01f      	beq.n	8001f56 <HAL_GPIO_Init+0x23e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4e      	ldr	r2, [pc, #312]	; (8002054 <HAL_GPIO_Init+0x33c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d019      	beq.n	8001f52 <HAL_GPIO_Init+0x23a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4d      	ldr	r2, [pc, #308]	; (8002058 <HAL_GPIO_Init+0x340>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0x236>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4c      	ldr	r2, [pc, #304]	; (800205c <HAL_GPIO_Init+0x344>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00d      	beq.n	8001f4a <HAL_GPIO_Init+0x232>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4b      	ldr	r2, [pc, #300]	; (8002060 <HAL_GPIO_Init+0x348>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <HAL_GPIO_Init+0x22e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4a      	ldr	r2, [pc, #296]	; (8002064 <HAL_GPIO_Init+0x34c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_GPIO_Init+0x22a>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00c      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f42:	2307      	movs	r3, #7
 8001f44:	e00a      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f46:	2305      	movs	r3, #5
 8001f48:	e008      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e004      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e002      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	f002 0203 	and.w	r2, r2, #3
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	4093      	lsls	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f6c:	4937      	ldr	r1, [pc, #220]	; (800204c <HAL_GPIO_Init+0x334>)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f9e:	4a32      	ldr	r2, [pc, #200]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fa4:	4b30      	ldr	r3, [pc, #192]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fc8:	4a27      	ldr	r2, [pc, #156]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ff2:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800201c:	4a12      	ldr	r2, [pc, #72]	; (8002068 <HAL_GPIO_Init+0x350>)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	f47f ae78 	bne.w	8001d28 <HAL_GPIO_Init+0x10>
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	40010000 	.word	0x40010000
 8002050:	48000400 	.word	0x48000400
 8002054:	48000800 	.word	0x48000800
 8002058:	48000c00 	.word	0x48000c00
 800205c:	48001000 	.word	0x48001000
 8002060:	48001400 	.word	0x48001400
 8002064:	48001800 	.word	0x48001800
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800207c:	787b      	ldrb	r3, [r7, #1]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002088:	e002      	b.n	8002090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40007000 	.word	0x40007000

080020b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c6:	d130      	bne.n	800212a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d4:	d038      	beq.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020de:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2232      	movs	r2, #50	; 0x32
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	0c9b      	lsrs	r3, r3, #18
 80020f8:	3301      	adds	r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020fc:	e002      	b.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3b01      	subs	r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002110:	d102      	bne.n	8002118 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f2      	bne.n	80020fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002124:	d110      	bne.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e00f      	b.n	800214a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	d007      	beq.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002140:	4a05      	ldr	r2, [pc, #20]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002146:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40007000 	.word	0x40007000
 800215c:	20000000 	.word	0x20000000
 8002160:	431bde83 	.word	0x431bde83

08002164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e3ca      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002176:	4b97      	ldr	r3, [pc, #604]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002180:	4b94      	ldr	r3, [pc, #592]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80e4 	beq.w	8002360 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d007      	beq.n	80021ae <HAL_RCC_OscConfig+0x4a>
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2b0c      	cmp	r3, #12
 80021a2:	f040 808b 	bne.w	80022bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	f040 8087 	bne.w	80022bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ae:	4b89      	ldr	r3, [pc, #548]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <HAL_RCC_OscConfig+0x62>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e3a2      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1a      	ldr	r2, [r3, #32]
 80021ca:	4b82      	ldr	r3, [pc, #520]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d004      	beq.n	80021e0 <HAL_RCC_OscConfig+0x7c>
 80021d6:	4b7f      	ldr	r3, [pc, #508]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021de:	e005      	b.n	80021ec <HAL_RCC_OscConfig+0x88>
 80021e0:	4b7c      	ldr	r3, [pc, #496]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80021e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d223      	bcs.n	8002238 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fd55 	bl	8002ca4 <RCC_SetFlashLatencyFromMSIRange>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e383      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002204:	4b73      	ldr	r3, [pc, #460]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a72      	ldr	r2, [pc, #456]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 800220a:	f043 0308 	orr.w	r3, r3, #8
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4b70      	ldr	r3, [pc, #448]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	496d      	ldr	r1, [pc, #436]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002222:	4b6c      	ldr	r3, [pc, #432]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	4968      	ldr	r1, [pc, #416]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002232:	4313      	orrs	r3, r2
 8002234:	604b      	str	r3, [r1, #4]
 8002236:	e025      	b.n	8002284 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002238:	4b66      	ldr	r3, [pc, #408]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a65      	ldr	r2, [pc, #404]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 800223e:	f043 0308 	orr.w	r3, r3, #8
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b63      	ldr	r3, [pc, #396]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4960      	ldr	r1, [pc, #384]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002256:	4b5f      	ldr	r3, [pc, #380]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	495b      	ldr	r1, [pc, #364]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fd15 	bl	8002ca4 <RCC_SetFlashLatencyFromMSIRange>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e343      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002284:	f000 fc4a 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b52      	ldr	r3, [pc, #328]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	4950      	ldr	r1, [pc, #320]	; (80023d8 <HAL_RCC_OscConfig+0x274>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
 80022a0:	4a4e      	ldr	r2, [pc, #312]	; (80023dc <HAL_RCC_OscConfig+0x278>)
 80022a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022a4:	4b4e      	ldr	r3, [pc, #312]	; (80023e0 <HAL_RCC_OscConfig+0x27c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fd63 	bl	8000d74 <HAL_InitTick>
 80022ae:	4603      	mov	r3, r0
 80022b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d052      	beq.n	800235e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	e327      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d032      	beq.n	800232a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022c4:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a42      	ldr	r2, [pc, #264]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022d0:	f7fe fda0 	bl	8000e14 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022d8:	f7fe fd9c 	bl	8000e14 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e310      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ea:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a36      	ldr	r2, [pc, #216]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80022fc:	f043 0308 	orr.w	r3, r3, #8
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4931      	ldr	r1, [pc, #196]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002314:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	492c      	ldr	r1, [pc, #176]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
 8002328:	e01a      	b.n	8002360 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800232a:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002336:	f7fe fd6d 	bl	8000e14 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800233e:	f7fe fd69 	bl	8000e14 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e2dd      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002350:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x1da>
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800235e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d074      	beq.n	8002456 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2b08      	cmp	r3, #8
 8002370:	d005      	beq.n	800237e <HAL_RCC_OscConfig+0x21a>
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d10e      	bne.n	8002396 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d10b      	bne.n	8002396 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d064      	beq.n	8002454 <HAL_RCC_OscConfig+0x2f0>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d160      	bne.n	8002454 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e2ba      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x24a>
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	e026      	b.n	80023fc <HAL_RCC_OscConfig+0x298>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b6:	d115      	bne.n	80023e4 <HAL_RCC_OscConfig+0x280>
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80023be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a02      	ldr	r2, [pc, #8]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80023ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	e014      	b.n	80023fc <HAL_RCC_OscConfig+0x298>
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	08004b0c 	.word	0x08004b0c
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20000004 	.word	0x20000004
 80023e4:	4ba0      	ldr	r3, [pc, #640]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a9f      	ldr	r2, [pc, #636]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b9d      	ldr	r3, [pc, #628]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a9c      	ldr	r2, [pc, #624]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fd06 	bl	8000e14 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7fe fd02 	bl	8000e14 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e276      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800241e:	4b92      	ldr	r3, [pc, #584]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x2a8>
 800242a:	e014      	b.n	8002456 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fcf2 	bl	8000e14 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7fe fcee 	bl	8000e14 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e262      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002446:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x2d0>
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d060      	beq.n	8002524 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b04      	cmp	r3, #4
 8002466:	d005      	beq.n	8002474 <HAL_RCC_OscConfig+0x310>
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b0c      	cmp	r3, #12
 800246c:	d119      	bne.n	80024a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d116      	bne.n	80024a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002474:	4b7c      	ldr	r3, [pc, #496]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_OscConfig+0x328>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e23f      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b76      	ldr	r3, [pc, #472]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	061b      	lsls	r3, r3, #24
 800249a:	4973      	ldr	r1, [pc, #460]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a0:	e040      	b.n	8002524 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d023      	beq.n	80024f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024aa:	4b6f      	ldr	r3, [pc, #444]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a6e      	ldr	r2, [pc, #440]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7fe fcad 	bl	8000e14 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024be:	f7fe fca9 	bl	8000e14 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e21d      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d0:	4b65      	ldr	r3, [pc, #404]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024dc:	4b62      	ldr	r3, [pc, #392]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	495f      	ldr	r1, [pc, #380]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
 80024f0:	e018      	b.n	8002524 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f2:	4b5d      	ldr	r3, [pc, #372]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a5c      	ldr	r2, [pc, #368]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80024f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe fc89 	bl	8000e14 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002506:	f7fe fc85 	bl	8000e14 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e1f9      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d03c      	beq.n	80025aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01c      	beq.n	8002572 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002538:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800253a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253e:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7fe fc64 	bl	8000e14 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002550:	f7fe fc60 	bl	8000e14 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1d4      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002562:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0ef      	beq.n	8002550 <HAL_RCC_OscConfig+0x3ec>
 8002570:	e01b      	b.n	80025aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002572:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002578:	4a3b      	ldr	r2, [pc, #236]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002582:	f7fe fc47 	bl	8000e14 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258a:	f7fe fc43 	bl	8000e14 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e1b7      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800259c:	4b32      	ldr	r3, [pc, #200]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800259e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1ef      	bne.n	800258a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 80a6 	beq.w	8002704 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025bc:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10d      	bne.n	80025e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c8:	4b27      	ldr	r3, [pc, #156]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025cc:	4a26      	ldr	r2, [pc, #152]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80025ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d2:	6593      	str	r3, [r2, #88]	; 0x58
 80025d4:	4b24      	ldr	r3, [pc, #144]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e0:	2301      	movs	r3, #1
 80025e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e4:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_RCC_OscConfig+0x508>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d118      	bne.n	8002622 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025f0:	4b1e      	ldr	r3, [pc, #120]	; (800266c <HAL_RCC_OscConfig+0x508>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_RCC_OscConfig+0x508>)
 80025f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fc:	f7fe fc0a 	bl	8000e14 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002604:	f7fe fc06 	bl	8000e14 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e17a      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <HAL_RCC_OscConfig+0x508>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d108      	bne.n	800263c <HAL_RCC_OscConfig+0x4d8>
 800262a:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800263a:	e029      	b.n	8002690 <HAL_RCC_OscConfig+0x52c>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d115      	bne.n	8002670 <HAL_RCC_OscConfig+0x50c>
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	4a07      	ldr	r2, [pc, #28]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	4a03      	ldr	r2, [pc, #12]	; (8002668 <HAL_RCC_OscConfig+0x504>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002664:	e014      	b.n	8002690 <HAL_RCC_OscConfig+0x52c>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
 8002670:	4b9c      	ldr	r3, [pc, #624]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	4a9b      	ldr	r2, [pc, #620]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002680:	4b98      	ldr	r3, [pc, #608]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	4a97      	ldr	r2, [pc, #604]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d016      	beq.n	80026c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fe fbbc 	bl	8000e14 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f7fe fbb8 	bl	8000e14 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e12a      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b6:	4b8b      	ldr	r3, [pc, #556]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ed      	beq.n	80026a0 <HAL_RCC_OscConfig+0x53c>
 80026c4:	e015      	b.n	80026f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c6:	f7fe fba5 	bl	8000e14 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ce:	f7fe fba1 	bl	8000e14 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e113      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026e4:	4b7f      	ldr	r3, [pc, #508]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1ed      	bne.n	80026ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f2:	7ffb      	ldrb	r3, [r7, #31]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f8:	4b7a      	ldr	r3, [pc, #488]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	4a79      	ldr	r2, [pc, #484]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 80026fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002702:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80fe 	beq.w	800290a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	2b02      	cmp	r3, #2
 8002714:	f040 80d0 	bne.w	80028b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002718:	4b72      	ldr	r3, [pc, #456]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 0203 	and.w	r2, r3, #3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	429a      	cmp	r2, r3
 800272a:	d130      	bne.n	800278e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	3b01      	subs	r3, #1
 8002738:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d127      	bne.n	800278e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002748:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d11f      	bne.n	800278e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002758:	2a07      	cmp	r2, #7
 800275a:	bf14      	ite	ne
 800275c:	2201      	movne	r2, #1
 800275e:	2200      	moveq	r2, #0
 8002760:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002762:	4293      	cmp	r3, r2
 8002764:	d113      	bne.n	800278e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	3b01      	subs	r3, #1
 8002774:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d109      	bne.n	800278e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	3b01      	subs	r3, #1
 8002788:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d06e      	beq.n	800286c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2b0c      	cmp	r3, #12
 8002792:	d069      	beq.n	8002868 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002794:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0ad      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027b0:	4b4c      	ldr	r3, [pc, #304]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a4b      	ldr	r2, [pc, #300]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 80027b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027bc:	f7fe fb2a 	bl	8000e14 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c4:	f7fe fb26 	bl	8000e14 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e09a      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d6:	4b43      	ldr	r3, [pc, #268]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e2:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <HAL_RCC_OscConfig+0x784>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027f2:	3a01      	subs	r2, #1
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027fc:	0212      	lsls	r2, r2, #8
 80027fe:	4311      	orrs	r1, r2
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002804:	0852      	lsrs	r2, r2, #1
 8002806:	3a01      	subs	r2, #1
 8002808:	0552      	lsls	r2, r2, #21
 800280a:	4311      	orrs	r1, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002810:	0852      	lsrs	r2, r2, #1
 8002812:	3a01      	subs	r2, #1
 8002814:	0652      	lsls	r2, r2, #25
 8002816:	4311      	orrs	r1, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800281c:	0912      	lsrs	r2, r2, #4
 800281e:	0452      	lsls	r2, r2, #17
 8002820:	430a      	orrs	r2, r1
 8002822:	4930      	ldr	r1, [pc, #192]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 8002824:	4313      	orrs	r3, r2
 8002826:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002828:	4b2e      	ldr	r3, [pc, #184]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a2d      	ldr	r2, [pc, #180]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 800282e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002832:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002834:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 800283a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002840:	f7fe fae8 	bl	8000e14 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002848:	f7fe fae4 	bl	8000e14 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e058      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002866:	e050      	b.n	800290a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e04f      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d148      	bne.n	800290a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002878:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 800287e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002882:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002884:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4a16      	ldr	r2, [pc, #88]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 800288a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800288e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002890:	f7fe fac0 	bl	8000e14 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe fabc 	bl	8000e14 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e030      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x734>
 80028b6:	e028      	b.n	800290a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d023      	beq.n	8002906 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a08      	ldr	r2, [pc, #32]	; (80028e4 <HAL_RCC_OscConfig+0x780>)
 80028c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7fe faa3 	bl	8000e14 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d0:	e00c      	b.n	80028ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d2:	f7fe fa9f 	bl	8000e14 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d905      	bls.n	80028ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e013      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
 80028e4:	40021000 	.word	0x40021000
 80028e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCC_OscConfig+0x7b0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ec      	bne.n	80028d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_OscConfig+0x7b0>)
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	4905      	ldr	r1, [pc, #20]	; (8002914 <HAL_RCC_OscConfig+0x7b0>)
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_RCC_OscConfig+0x7b4>)
 8002900:	4013      	ands	r3, r2
 8002902:	60cb      	str	r3, [r1, #12]
 8002904:	e001      	b.n	800290a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	feeefffc 	.word	0xfeeefffc

0800291c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0e7      	b.n	8002b00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4b75      	ldr	r3, [pc, #468]	; (8002b08 <HAL_RCC_ClockConfig+0x1ec>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d910      	bls.n	8002960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b72      	ldr	r3, [pc, #456]	; (8002b08 <HAL_RCC_ClockConfig+0x1ec>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	4970      	ldr	r1, [pc, #448]	; (8002b08 <HAL_RCC_ClockConfig+0x1ec>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b6e      	ldr	r3, [pc, #440]	; (8002b08 <HAL_RCC_ClockConfig+0x1ec>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0cf      	b.n	8002b00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d010      	beq.n	800298e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	4b66      	ldr	r3, [pc, #408]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002978:	429a      	cmp	r2, r3
 800297a:	d908      	bls.n	800298e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297c:	4b63      	ldr	r3, [pc, #396]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4960      	ldr	r1, [pc, #384]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d04c      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a2:	4b5a      	ldr	r3, [pc, #360]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d121      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e0a6      	b.n	8002b00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ba:	4b54      	ldr	r3, [pc, #336]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d115      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e09a      	b.n	8002b00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029d2:	4b4e      	ldr	r3, [pc, #312]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e08e      	b.n	8002b00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e2:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e086      	b.n	8002b00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b46      	ldr	r3, [pc, #280]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4943      	ldr	r1, [pc, #268]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a04:	f7fe fa06 	bl	8000e14 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7fe fa02 	bl	8000e14 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e06e      	b.n	8002b00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b3a      	ldr	r3, [pc, #232]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d010      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d208      	bcs.n	8002a62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a50:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	492b      	ldr	r1, [pc, #172]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a62:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d210      	bcs.n	8002a92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a70:	4b25      	ldr	r3, [pc, #148]	; (8002b08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 0207 	bic.w	r2, r3, #7
 8002a78:	4923      	ldr	r1, [pc, #140]	; (8002b08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a80:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e036      	b.n	8002b00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	4918      	ldr	r1, [pc, #96]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002abc:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4910      	ldr	r1, [pc, #64]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ad0:	f000 f824 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	490b      	ldr	r1, [pc, #44]	; (8002b10 <HAL_RCC_ClockConfig+0x1f4>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aec:	4a09      	ldr	r2, [pc, #36]	; (8002b14 <HAL_RCC_ClockConfig+0x1f8>)
 8002aee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <HAL_RCC_ClockConfig+0x1fc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe f93d 	bl	8000d74 <HAL_InitTick>
 8002afa:	4603      	mov	r3, r0
 8002afc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002afe:	7afb      	ldrb	r3, [r7, #11]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40022000 	.word	0x40022000
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	08004b0c 	.word	0x08004b0c
 8002b14:	20000000 	.word	0x20000000
 8002b18:	20000004 	.word	0x20000004

08002b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	; 0x24
 8002b20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b34:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x34>
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d121      	bne.n	8002b8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d11e      	bne.n	8002b8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b50:	4b34      	ldr	r3, [pc, #208]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d107      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b5c:	4b31      	ldr	r3, [pc, #196]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b62:	0a1b      	lsrs	r3, r3, #8
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	e005      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b6c:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b78:	4a2b      	ldr	r2, [pc, #172]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d102      	bne.n	8002b9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	e004      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ba0:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ba2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	d134      	bne.n	8002c14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002baa:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d003      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d003      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0xac>
 8002bc0:	e005      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bc2:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002bc4:	617b      	str	r3, [r7, #20]
      break;
 8002bc6:	e005      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bca:	617b      	str	r3, [r7, #20]
      break;
 8002bcc:	e002      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	617b      	str	r3, [r7, #20]
      break;
 8002bd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	3301      	adds	r3, #1
 8002be0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	fb03 f202 	mul.w	r2, r3, r2
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	0e5b      	lsrs	r3, r3, #25
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	3301      	adds	r3, #1
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c14:	69bb      	ldr	r3, [r7, #24]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3724      	adds	r7, #36	; 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08004b24 	.word	0x08004b24
 8002c2c:	00f42400 	.word	0x00f42400
 8002c30:	007a1200 	.word	0x007a1200

08002c34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000000 	.word	0x20000000

08002c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c50:	f7ff fff0 	bl	8002c34 <HAL_RCC_GetHCLKFreq>
 8002c54:	4602      	mov	r2, r0
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	4904      	ldr	r1, [pc, #16]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c62:	5ccb      	ldrb	r3, [r1, r3]
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08004b1c 	.word	0x08004b1c

08002c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c7c:	f7ff ffda 	bl	8002c34 <HAL_RCC_GetHCLKFreq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	0adb      	lsrs	r3, r3, #11
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	4904      	ldr	r1, [pc, #16]	; (8002ca0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c8e:	5ccb      	ldrb	r3, [r1, r3]
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08004b1c 	.word	0x08004b1c

08002ca4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cb0:	4b2a      	ldr	r3, [pc, #168]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cbc:	f7ff f9ee 	bl	800209c <HAL_PWREx_GetVoltageRange>
 8002cc0:	6178      	str	r0, [r7, #20]
 8002cc2:	e014      	b.n	8002cee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cce:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd0:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cdc:	f7ff f9de 	bl	800209c <HAL_PWREx_GetVoltageRange>
 8002ce0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf4:	d10b      	bne.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b80      	cmp	r3, #128	; 0x80
 8002cfa:	d919      	bls.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2ba0      	cmp	r3, #160	; 0xa0
 8002d00:	d902      	bls.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d02:	2302      	movs	r3, #2
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	e013      	b.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d08:	2301      	movs	r3, #1
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	e010      	b.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d902      	bls.n	8002d1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d14:	2303      	movs	r3, #3
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	e00a      	b.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b80      	cmp	r3, #128	; 0x80
 8002d1e:	d102      	bne.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d20:	2302      	movs	r3, #2
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	e004      	b.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b70      	cmp	r3, #112	; 0x70
 8002d2a:	d101      	bne.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 0207 	bic.w	r2, r3, #7
 8002d38:	4909      	ldr	r1, [pc, #36]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d001      	beq.n	8002d52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40022000 	.word	0x40022000

08002d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d70:	2300      	movs	r3, #0
 8002d72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d041      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d88:	d02a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d8e:	d824      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d94:	d008      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d9a:	d81e      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da4:	d010      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002da6:	e018      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002da8:	4b86      	ldr	r3, [pc, #536]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a85      	ldr	r2, [pc, #532]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002db4:	e015      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fabb 	bl	8003338 <RCCEx_PLLSAI1_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dc6:	e00c      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3320      	adds	r3, #32
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fba6 	bl	8003520 <RCCEx_PLLSAI2_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dd8:	e003      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	74fb      	strb	r3, [r7, #19]
      break;
 8002dde:	e000      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002de8:	4b76      	ldr	r3, [pc, #472]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df6:	4973      	ldr	r1, [pc, #460]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dfe:	e001      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d041      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e18:	d02a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e1e:	d824      	bhi.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e24:	d008      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e2a:	d81e      	bhi.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e34:	d010      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e36:	e018      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e38:	4b62      	ldr	r3, [pc, #392]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a61      	ldr	r2, [pc, #388]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e44:	e015      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fa73 	bl	8003338 <RCCEx_PLLSAI1_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e56:	e00c      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3320      	adds	r3, #32
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fb5e 	bl	8003520 <RCCEx_PLLSAI2_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e68:	e003      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e6e:	e000      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e72:	7cfb      	ldrb	r3, [r7, #19]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e78:	4b52      	ldr	r3, [pc, #328]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e86:	494f      	ldr	r1, [pc, #316]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e8e:	e001      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80a0 	beq.w	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ea6:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00d      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebc:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	4a40      	ldr	r2, [pc, #256]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec8:	4b3e      	ldr	r3, [pc, #248]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ed8:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a3a      	ldr	r2, [pc, #232]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ee4:	f7fd ff96 	bl	8000e14 <HAL_GetTick>
 8002ee8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eea:	e009      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eec:	f7fd ff92 	bl	8000e14 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d902      	bls.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	74fb      	strb	r3, [r7, #19]
        break;
 8002efe:	e005      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ef      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d15c      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f12:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01f      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d019      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f30:	4b24      	ldr	r3, [pc, #144]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f3c:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f5c:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d016      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fd ff51 	bl	8000e14 <HAL_GetTick>
 8002f72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f74:	e00b      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fd ff4d 	bl	8000e14 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d902      	bls.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	74fb      	strb	r3, [r7, #19]
            break;
 8002f8c:	e006      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ec      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f9c:	7cfb      	ldrb	r3, [r7, #19]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb2:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fba:	e009      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	74bb      	strb	r3, [r7, #18]
 8002fc0:	e006      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fcc:	7cfb      	ldrb	r3, [r7, #19]
 8002fce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd0:	7c7b      	ldrb	r3, [r7, #17]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d105      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd6:	4b9e      	ldr	r3, [pc, #632]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	4a9d      	ldr	r2, [pc, #628]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fee:	4b98      	ldr	r3, [pc, #608]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f023 0203 	bic.w	r2, r3, #3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	4994      	ldr	r1, [pc, #592]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003010:	4b8f      	ldr	r3, [pc, #572]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f023 020c 	bic.w	r2, r3, #12
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301e:	498c      	ldr	r1, [pc, #560]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003032:	4b87      	ldr	r3, [pc, #540]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	4983      	ldr	r1, [pc, #524]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003054:	4b7e      	ldr	r3, [pc, #504]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	497b      	ldr	r1, [pc, #492]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003076:	4b76      	ldr	r3, [pc, #472]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003084:	4972      	ldr	r1, [pc, #456]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003098:	4b6d      	ldr	r3, [pc, #436]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a6:	496a      	ldr	r1, [pc, #424]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ba:	4b65      	ldr	r3, [pc, #404]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	4961      	ldr	r1, [pc, #388]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030dc:	4b5c      	ldr	r3, [pc, #368]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ea:	4959      	ldr	r1, [pc, #356]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030fe:	4b54      	ldr	r3, [pc, #336]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310c:	4950      	ldr	r1, [pc, #320]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003120:	4b4b      	ldr	r3, [pc, #300]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	4948      	ldr	r1, [pc, #288]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003142:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	493f      	ldr	r1, [pc, #252]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d028      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003164:	4b3a      	ldr	r3, [pc, #232]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003172:	4937      	ldr	r1, [pc, #220]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800317e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003182:	d106      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4a31      	ldr	r2, [pc, #196]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800318e:	60d3      	str	r3, [r2, #12]
 8003190:	e011      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003196:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800319a:	d10c      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	2101      	movs	r1, #1
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f8c8 	bl	8003338 <RCCEx_PLLSAI1_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80031b2:	7cfb      	ldrb	r3, [r7, #19]
 80031b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d028      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031c2:	4b23      	ldr	r3, [pc, #140]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	491f      	ldr	r1, [pc, #124]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e0:	d106      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ec:	60d3      	str	r3, [r2, #12]
 80031ee:	e011      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031f8:	d10c      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3304      	adds	r3, #4
 80031fe:	2101      	movs	r1, #1
 8003200:	4618      	mov	r0, r3
 8003202:	f000 f899 	bl	8003338 <RCCEx_PLLSAI1_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800320a:	7cfb      	ldrb	r3, [r7, #19]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d02b      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	4908      	ldr	r1, [pc, #32]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800323e:	d109      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4a02      	ldr	r2, [pc, #8]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800324a:	60d3      	str	r3, [r2, #12]
 800324c:	e014      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800325c:	d10c      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3304      	adds	r3, #4
 8003262:	2101      	movs	r1, #1
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f867 	bl	8003338 <RCCEx_PLLSAI1_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d02f      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003284:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003292:	4928      	ldr	r1, [pc, #160]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800329e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032a2:	d10d      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	2102      	movs	r1, #2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f844 	bl	8003338 <RCCEx_PLLSAI1_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d014      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032ba:	7cfb      	ldrb	r3, [r7, #19]
 80032bc:	74bb      	strb	r3, [r7, #18]
 80032be:	e011      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3320      	adds	r3, #32
 80032ce:	2102      	movs	r1, #2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 f925 	bl	8003520 <RCCEx_PLLSAI2_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032f0:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032fe:	490d      	ldr	r1, [pc, #52]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003322:	4904      	ldr	r1, [pc, #16]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800332a:	7cbb      	ldrb	r3, [r7, #18]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000

08003338 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003346:	4b75      	ldr	r3, [pc, #468]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d018      	beq.n	8003384 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003352:	4b72      	ldr	r3, [pc, #456]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0203 	and.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d10d      	bne.n	800337e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
       ||
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800336a:	4b6c      	ldr	r3, [pc, #432]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
       ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d047      	beq.n	800340e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
 8003382:	e044      	b.n	800340e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d018      	beq.n	80033be <RCCEx_PLLSAI1_Config+0x86>
 800338c:	2b03      	cmp	r3, #3
 800338e:	d825      	bhi.n	80033dc <RCCEx_PLLSAI1_Config+0xa4>
 8003390:	2b01      	cmp	r3, #1
 8003392:	d002      	beq.n	800339a <RCCEx_PLLSAI1_Config+0x62>
 8003394:	2b02      	cmp	r3, #2
 8003396:	d009      	beq.n	80033ac <RCCEx_PLLSAI1_Config+0x74>
 8003398:	e020      	b.n	80033dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800339a:	4b60      	ldr	r3, [pc, #384]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11d      	bne.n	80033e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033aa:	e01a      	b.n	80033e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033ac:	4b5b      	ldr	r3, [pc, #364]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d116      	bne.n	80033e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033bc:	e013      	b.n	80033e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033be:	4b57      	ldr	r3, [pc, #348]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10f      	bne.n	80033ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033ca:	4b54      	ldr	r3, [pc, #336]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033da:	e006      	b.n	80033ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	e004      	b.n	80033ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033e2:	bf00      	nop
 80033e4:	e002      	b.n	80033ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033e6:	bf00      	nop
 80033e8:	e000      	b.n	80033ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10d      	bne.n	800340e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033f2:	4b4a      	ldr	r3, [pc, #296]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6819      	ldr	r1, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	3b01      	subs	r3, #1
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	430b      	orrs	r3, r1
 8003408:	4944      	ldr	r1, [pc, #272]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d17d      	bne.n	8003510 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003414:	4b41      	ldr	r3, [pc, #260]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a40      	ldr	r2, [pc, #256]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800341a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800341e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003420:	f7fd fcf8 	bl	8000e14 <HAL_GetTick>
 8003424:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003426:	e009      	b.n	800343c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003428:	f7fd fcf4 	bl	8000e14 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d902      	bls.n	800343c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	73fb      	strb	r3, [r7, #15]
        break;
 800343a:	e005      	b.n	8003448 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800343c:	4b37      	ldr	r3, [pc, #220]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ef      	bne.n	8003428 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d160      	bne.n	8003510 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d111      	bne.n	8003478 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003454:	4b31      	ldr	r3, [pc, #196]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800345c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6892      	ldr	r2, [r2, #8]
 8003464:	0211      	lsls	r1, r2, #8
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68d2      	ldr	r2, [r2, #12]
 800346a:	0912      	lsrs	r2, r2, #4
 800346c:	0452      	lsls	r2, r2, #17
 800346e:	430a      	orrs	r2, r1
 8003470:	492a      	ldr	r1, [pc, #168]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	610b      	str	r3, [r1, #16]
 8003476:	e027      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d112      	bne.n	80034a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800347e:	4b27      	ldr	r3, [pc, #156]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003486:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6892      	ldr	r2, [r2, #8]
 800348e:	0211      	lsls	r1, r2, #8
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6912      	ldr	r2, [r2, #16]
 8003494:	0852      	lsrs	r2, r2, #1
 8003496:	3a01      	subs	r2, #1
 8003498:	0552      	lsls	r2, r2, #21
 800349a:	430a      	orrs	r2, r1
 800349c:	491f      	ldr	r1, [pc, #124]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	610b      	str	r3, [r1, #16]
 80034a2:	e011      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034a4:	4b1d      	ldr	r3, [pc, #116]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6892      	ldr	r2, [r2, #8]
 80034b4:	0211      	lsls	r1, r2, #8
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6952      	ldr	r2, [r2, #20]
 80034ba:	0852      	lsrs	r2, r2, #1
 80034bc:	3a01      	subs	r2, #1
 80034be:	0652      	lsls	r2, r2, #25
 80034c0:	430a      	orrs	r2, r1
 80034c2:	4916      	ldr	r1, [pc, #88]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034c8:	4b14      	ldr	r3, [pc, #80]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a13      	ldr	r2, [pc, #76]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7fd fc9e 	bl	8000e14 <HAL_GetTick>
 80034d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034da:	e009      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034dc:	f7fd fc9a 	bl	8000e14 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d902      	bls.n	80034f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	73fb      	strb	r3, [r7, #15]
          break;
 80034ee:	e005      	b.n	80034fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034f0:	4b0a      	ldr	r3, [pc, #40]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ef      	beq.n	80034dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	4904      	ldr	r1, [pc, #16]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800350c:	4313      	orrs	r3, r2
 800350e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003510:	7bfb      	ldrb	r3, [r7, #15]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000

08003520 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800352e:	4b6a      	ldr	r3, [pc, #424]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d018      	beq.n	800356c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800353a:	4b67      	ldr	r3, [pc, #412]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0203 	and.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d10d      	bne.n	8003566 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
       ||
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003552:	4b61      	ldr	r3, [pc, #388]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
       ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d047      	beq.n	80035f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	e044      	b.n	80035f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d018      	beq.n	80035a6 <RCCEx_PLLSAI2_Config+0x86>
 8003574:	2b03      	cmp	r3, #3
 8003576:	d825      	bhi.n	80035c4 <RCCEx_PLLSAI2_Config+0xa4>
 8003578:	2b01      	cmp	r3, #1
 800357a:	d002      	beq.n	8003582 <RCCEx_PLLSAI2_Config+0x62>
 800357c:	2b02      	cmp	r3, #2
 800357e:	d009      	beq.n	8003594 <RCCEx_PLLSAI2_Config+0x74>
 8003580:	e020      	b.n	80035c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003582:	4b55      	ldr	r3, [pc, #340]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d11d      	bne.n	80035ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003592:	e01a      	b.n	80035ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003594:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d116      	bne.n	80035ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a4:	e013      	b.n	80035ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035a6:	4b4c      	ldr	r3, [pc, #304]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10f      	bne.n	80035d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035b2:	4b49      	ldr	r3, [pc, #292]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035c2:	e006      	b.n	80035d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      break;
 80035c8:	e004      	b.n	80035d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035ca:	bf00      	nop
 80035cc:	e002      	b.n	80035d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10d      	bne.n	80035f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035da:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6819      	ldr	r1, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	430b      	orrs	r3, r1
 80035f0:	4939      	ldr	r1, [pc, #228]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d167      	bne.n	80036cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035fc:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a35      	ldr	r2, [pc, #212]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003608:	f7fd fc04 	bl	8000e14 <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800360e:	e009      	b.n	8003624 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003610:	f7fd fc00 	bl	8000e14 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	73fb      	strb	r3, [r7, #15]
        break;
 8003622:	e005      	b.n	8003630 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003624:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ef      	bne.n	8003610 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d14a      	bne.n	80036cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d111      	bne.n	8003660 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800363c:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6892      	ldr	r2, [r2, #8]
 800364c:	0211      	lsls	r1, r2, #8
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68d2      	ldr	r2, [r2, #12]
 8003652:	0912      	lsrs	r2, r2, #4
 8003654:	0452      	lsls	r2, r2, #17
 8003656:	430a      	orrs	r2, r1
 8003658:	491f      	ldr	r1, [pc, #124]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	614b      	str	r3, [r1, #20]
 800365e:	e011      	b.n	8003684 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003668:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6892      	ldr	r2, [r2, #8]
 8003670:	0211      	lsls	r1, r2, #8
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6912      	ldr	r2, [r2, #16]
 8003676:	0852      	lsrs	r2, r2, #1
 8003678:	3a01      	subs	r2, #1
 800367a:	0652      	lsls	r2, r2, #25
 800367c:	430a      	orrs	r2, r1
 800367e:	4916      	ldr	r1, [pc, #88]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003680:	4313      	orrs	r3, r2
 8003682:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fd fbc0 	bl	8000e14 <HAL_GetTick>
 8003694:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003696:	e009      	b.n	80036ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003698:	f7fd fbbc 	bl	8000e14 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d902      	bls.n	80036ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	73fb      	strb	r3, [r7, #15]
          break;
 80036aa:	e005      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036ac:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ef      	beq.n	8003698 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	4904      	ldr	r1, [pc, #16]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e040      	b.n	8003770 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fd f9f6 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2224      	movs	r2, #36	; 0x24
 8003708:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8c0 	bl	80038a0 <UART_SetConfig>
 8003720:	4603      	mov	r3, r0
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e022      	b.n	8003770 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fb6c 	bl	8003e10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003746:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003756:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fbf3 	bl	8003f54 <UART_CheckIdleState>
 800376e:	4603      	mov	r3, r0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	; 0x28
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	4613      	mov	r3, r2
 8003786:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800378c:	2b20      	cmp	r3, #32
 800378e:	f040 8082 	bne.w	8003896 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HAL_UART_Transmit+0x26>
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e07a      	b.n	8003898 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_UART_Transmit+0x38>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e073      	b.n	8003898 <HAL_UART_Transmit+0x120>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2221      	movs	r2, #33	; 0x21
 80037c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037c6:	f7fd fb25 	bl	8000e14 <HAL_GetTick>
 80037ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	88fa      	ldrh	r2, [r7, #6]
 80037d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e4:	d108      	bne.n	80037f8 <HAL_UART_Transmit+0x80>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	e003      	b.n	8003800 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003808:	e02d      	b.n	8003866 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	2180      	movs	r1, #128	; 0x80
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fbe6 	bl	8003fe6 <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e039      	b.n	8003898 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10b      	bne.n	8003842 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003836:	b292      	uxth	r2, r2
 8003838:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	3302      	adds	r3, #2
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	e008      	b.n	8003854 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	b292      	uxth	r2, r2
 800384c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3301      	adds	r3, #1
 8003852:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1cb      	bne.n	800380a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	2140      	movs	r1, #64	; 0x40
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fbb2 	bl	8003fe6 <UART_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e005      	b.n	8003898 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3720      	adds	r7, #32
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a4:	b08a      	sub	sp, #40	; 0x28
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	431a      	orrs	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4ba4      	ldr	r3, [pc, #656]	; (8003b60 <UART_SetConfig+0x2c0>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d8:	430b      	orrs	r3, r1
 80038da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a99      	ldr	r2, [pc, #612]	; (8003b64 <UART_SetConfig+0x2c4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003908:	4313      	orrs	r3, r2
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a90      	ldr	r2, [pc, #576]	; (8003b68 <UART_SetConfig+0x2c8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d126      	bne.n	8003978 <UART_SetConfig+0xd8>
 800392a:	4b90      	ldr	r3, [pc, #576]	; (8003b6c <UART_SetConfig+0x2cc>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b03      	cmp	r3, #3
 8003936:	d81b      	bhi.n	8003970 <UART_SetConfig+0xd0>
 8003938:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <UART_SetConfig+0xa0>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003951 	.word	0x08003951
 8003944:	08003961 	.word	0x08003961
 8003948:	08003959 	.word	0x08003959
 800394c:	08003969 	.word	0x08003969
 8003950:	2301      	movs	r3, #1
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003956:	e116      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003958:	2302      	movs	r3, #2
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395e:	e112      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003960:	2304      	movs	r3, #4
 8003962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003966:	e10e      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003968:	2308      	movs	r3, #8
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396e:	e10a      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003970:	2310      	movs	r3, #16
 8003972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003976:	e106      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a7c      	ldr	r2, [pc, #496]	; (8003b70 <UART_SetConfig+0x2d0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d138      	bne.n	80039f4 <UART_SetConfig+0x154>
 8003982:	4b7a      	ldr	r3, [pc, #488]	; (8003b6c <UART_SetConfig+0x2cc>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b0c      	cmp	r3, #12
 800398e:	d82d      	bhi.n	80039ec <UART_SetConfig+0x14c>
 8003990:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <UART_SetConfig+0xf8>)
 8003992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003996:	bf00      	nop
 8003998:	080039cd 	.word	0x080039cd
 800399c:	080039ed 	.word	0x080039ed
 80039a0:	080039ed 	.word	0x080039ed
 80039a4:	080039ed 	.word	0x080039ed
 80039a8:	080039dd 	.word	0x080039dd
 80039ac:	080039ed 	.word	0x080039ed
 80039b0:	080039ed 	.word	0x080039ed
 80039b4:	080039ed 	.word	0x080039ed
 80039b8:	080039d5 	.word	0x080039d5
 80039bc:	080039ed 	.word	0x080039ed
 80039c0:	080039ed 	.word	0x080039ed
 80039c4:	080039ed 	.word	0x080039ed
 80039c8:	080039e5 	.word	0x080039e5
 80039cc:	2300      	movs	r3, #0
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d2:	e0d8      	b.n	8003b86 <UART_SetConfig+0x2e6>
 80039d4:	2302      	movs	r3, #2
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039da:	e0d4      	b.n	8003b86 <UART_SetConfig+0x2e6>
 80039dc:	2304      	movs	r3, #4
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e2:	e0d0      	b.n	8003b86 <UART_SetConfig+0x2e6>
 80039e4:	2308      	movs	r3, #8
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ea:	e0cc      	b.n	8003b86 <UART_SetConfig+0x2e6>
 80039ec:	2310      	movs	r3, #16
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f2:	e0c8      	b.n	8003b86 <UART_SetConfig+0x2e6>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a5e      	ldr	r2, [pc, #376]	; (8003b74 <UART_SetConfig+0x2d4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d125      	bne.n	8003a4a <UART_SetConfig+0x1aa>
 80039fe:	4b5b      	ldr	r3, [pc, #364]	; (8003b6c <UART_SetConfig+0x2cc>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a08:	2b30      	cmp	r3, #48	; 0x30
 8003a0a:	d016      	beq.n	8003a3a <UART_SetConfig+0x19a>
 8003a0c:	2b30      	cmp	r3, #48	; 0x30
 8003a0e:	d818      	bhi.n	8003a42 <UART_SetConfig+0x1a2>
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d00a      	beq.n	8003a2a <UART_SetConfig+0x18a>
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d814      	bhi.n	8003a42 <UART_SetConfig+0x1a2>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <UART_SetConfig+0x182>
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d008      	beq.n	8003a32 <UART_SetConfig+0x192>
 8003a20:	e00f      	b.n	8003a42 <UART_SetConfig+0x1a2>
 8003a22:	2300      	movs	r3, #0
 8003a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a28:	e0ad      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a30:	e0a9      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003a32:	2304      	movs	r3, #4
 8003a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a38:	e0a5      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a40:	e0a1      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003a42:	2310      	movs	r3, #16
 8003a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a48:	e09d      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4a      	ldr	r2, [pc, #296]	; (8003b78 <UART_SetConfig+0x2d8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d125      	bne.n	8003aa0 <UART_SetConfig+0x200>
 8003a54:	4b45      	ldr	r3, [pc, #276]	; (8003b6c <UART_SetConfig+0x2cc>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a60:	d016      	beq.n	8003a90 <UART_SetConfig+0x1f0>
 8003a62:	2bc0      	cmp	r3, #192	; 0xc0
 8003a64:	d818      	bhi.n	8003a98 <UART_SetConfig+0x1f8>
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	d00a      	beq.n	8003a80 <UART_SetConfig+0x1e0>
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d814      	bhi.n	8003a98 <UART_SetConfig+0x1f8>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <UART_SetConfig+0x1d8>
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	d008      	beq.n	8003a88 <UART_SetConfig+0x1e8>
 8003a76:	e00f      	b.n	8003a98 <UART_SetConfig+0x1f8>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7e:	e082      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003a80:	2302      	movs	r3, #2
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a86:	e07e      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8e:	e07a      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003a90:	2308      	movs	r3, #8
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e076      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9e:	e072      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a35      	ldr	r2, [pc, #212]	; (8003b7c <UART_SetConfig+0x2dc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d12a      	bne.n	8003b00 <UART_SetConfig+0x260>
 8003aaa:	4b30      	ldr	r3, [pc, #192]	; (8003b6c <UART_SetConfig+0x2cc>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab8:	d01a      	beq.n	8003af0 <UART_SetConfig+0x250>
 8003aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003abe:	d81b      	bhi.n	8003af8 <UART_SetConfig+0x258>
 8003ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac4:	d00c      	beq.n	8003ae0 <UART_SetConfig+0x240>
 8003ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aca:	d815      	bhi.n	8003af8 <UART_SetConfig+0x258>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <UART_SetConfig+0x238>
 8003ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad4:	d008      	beq.n	8003ae8 <UART_SetConfig+0x248>
 8003ad6:	e00f      	b.n	8003af8 <UART_SetConfig+0x258>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ade:	e052      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae6:	e04e      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003ae8:	2304      	movs	r3, #4
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aee:	e04a      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003af0:	2308      	movs	r3, #8
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af6:	e046      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003af8:	2310      	movs	r3, #16
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afe:	e042      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <UART_SetConfig+0x2c4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d13a      	bne.n	8003b80 <UART_SetConfig+0x2e0>
 8003b0a:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <UART_SetConfig+0x2cc>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b18:	d01a      	beq.n	8003b50 <UART_SetConfig+0x2b0>
 8003b1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b1e:	d81b      	bhi.n	8003b58 <UART_SetConfig+0x2b8>
 8003b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b24:	d00c      	beq.n	8003b40 <UART_SetConfig+0x2a0>
 8003b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2a:	d815      	bhi.n	8003b58 <UART_SetConfig+0x2b8>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <UART_SetConfig+0x298>
 8003b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b34:	d008      	beq.n	8003b48 <UART_SetConfig+0x2a8>
 8003b36:	e00f      	b.n	8003b58 <UART_SetConfig+0x2b8>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3e:	e022      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003b40:	2302      	movs	r3, #2
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b46:	e01e      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003b48:	2304      	movs	r3, #4
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4e:	e01a      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003b50:	2308      	movs	r3, #8
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b56:	e016      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003b58:	2310      	movs	r3, #16
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5e:	e012      	b.n	8003b86 <UART_SetConfig+0x2e6>
 8003b60:	efff69f3 	.word	0xefff69f3
 8003b64:	40008000 	.word	0x40008000
 8003b68:	40013800 	.word	0x40013800
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40004400 	.word	0x40004400
 8003b74:	40004800 	.word	0x40004800
 8003b78:	40004c00 	.word	0x40004c00
 8003b7c:	40005000 	.word	0x40005000
 8003b80:	2310      	movs	r3, #16
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a9f      	ldr	r2, [pc, #636]	; (8003e08 <UART_SetConfig+0x568>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d17a      	bne.n	8003c86 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d824      	bhi.n	8003be2 <UART_SetConfig+0x342>
 8003b98:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <UART_SetConfig+0x300>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003bc5 	.word	0x08003bc5
 8003ba4:	08003be3 	.word	0x08003be3
 8003ba8:	08003bcd 	.word	0x08003bcd
 8003bac:	08003be3 	.word	0x08003be3
 8003bb0:	08003bd3 	.word	0x08003bd3
 8003bb4:	08003be3 	.word	0x08003be3
 8003bb8:	08003be3 	.word	0x08003be3
 8003bbc:	08003be3 	.word	0x08003be3
 8003bc0:	08003bdb 	.word	0x08003bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc4:	f7ff f842 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8003bc8:	61f8      	str	r0, [r7, #28]
        break;
 8003bca:	e010      	b.n	8003bee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bcc:	4b8f      	ldr	r3, [pc, #572]	; (8003e0c <UART_SetConfig+0x56c>)
 8003bce:	61fb      	str	r3, [r7, #28]
        break;
 8003bd0:	e00d      	b.n	8003bee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bd2:	f7fe ffa3 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8003bd6:	61f8      	str	r0, [r7, #28]
        break;
 8003bd8:	e009      	b.n	8003bee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bde:	61fb      	str	r3, [r7, #28]
        break;
 8003be0:	e005      	b.n	8003bee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80fb 	beq.w	8003dec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d305      	bcc.n	8003c12 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d903      	bls.n	8003c1a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c18:	e0e8      	b.n	8003dec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	461c      	mov	r4, r3
 8003c20:	4615      	mov	r5, r2
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	022b      	lsls	r3, r5, #8
 8003c2c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c30:	0222      	lsls	r2, r4, #8
 8003c32:	68f9      	ldr	r1, [r7, #12]
 8003c34:	6849      	ldr	r1, [r1, #4]
 8003c36:	0849      	lsrs	r1, r1, #1
 8003c38:	2000      	movs	r0, #0
 8003c3a:	4688      	mov	r8, r1
 8003c3c:	4681      	mov	r9, r0
 8003c3e:	eb12 0a08 	adds.w	sl, r2, r8
 8003c42:	eb43 0b09 	adc.w	fp, r3, r9
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c54:	4650      	mov	r0, sl
 8003c56:	4659      	mov	r1, fp
 8003c58:	f7fc fb0a 	bl	8000270 <__aeabi_uldivmod>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4613      	mov	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c6a:	d308      	bcc.n	8003c7e <UART_SetConfig+0x3de>
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c72:	d204      	bcs.n	8003c7e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	60da      	str	r2, [r3, #12]
 8003c7c:	e0b6      	b.n	8003dec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c84:	e0b2      	b.n	8003dec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8e:	d15e      	bne.n	8003d4e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d828      	bhi.n	8003cea <UART_SetConfig+0x44a>
 8003c98:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <UART_SetConfig+0x400>)
 8003c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9e:	bf00      	nop
 8003ca0:	08003cc5 	.word	0x08003cc5
 8003ca4:	08003ccd 	.word	0x08003ccd
 8003ca8:	08003cd5 	.word	0x08003cd5
 8003cac:	08003ceb 	.word	0x08003ceb
 8003cb0:	08003cdb 	.word	0x08003cdb
 8003cb4:	08003ceb 	.word	0x08003ceb
 8003cb8:	08003ceb 	.word	0x08003ceb
 8003cbc:	08003ceb 	.word	0x08003ceb
 8003cc0:	08003ce3 	.word	0x08003ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f7fe ffc2 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8003cc8:	61f8      	str	r0, [r7, #28]
        break;
 8003cca:	e014      	b.n	8003cf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ccc:	f7fe ffd4 	bl	8002c78 <HAL_RCC_GetPCLK2Freq>
 8003cd0:	61f8      	str	r0, [r7, #28]
        break;
 8003cd2:	e010      	b.n	8003cf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd4:	4b4d      	ldr	r3, [pc, #308]	; (8003e0c <UART_SetConfig+0x56c>)
 8003cd6:	61fb      	str	r3, [r7, #28]
        break;
 8003cd8:	e00d      	b.n	8003cf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cda:	f7fe ff1f 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8003cde:	61f8      	str	r0, [r7, #28]
        break;
 8003ce0:	e009      	b.n	8003cf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce6:	61fb      	str	r3, [r7, #28]
        break;
 8003ce8:	e005      	b.n	8003cf6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d077      	beq.n	8003dec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005a      	lsls	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	441a      	add	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b0f      	cmp	r3, #15
 8003d16:	d916      	bls.n	8003d46 <UART_SetConfig+0x4a6>
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1e:	d212      	bcs.n	8003d46 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f023 030f 	bic.w	r3, r3, #15
 8003d28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	8afb      	ldrh	r3, [r7, #22]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	8afa      	ldrh	r2, [r7, #22]
 8003d42:	60da      	str	r2, [r3, #12]
 8003d44:	e052      	b.n	8003dec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d4c:	e04e      	b.n	8003dec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d827      	bhi.n	8003da6 <UART_SetConfig+0x506>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <UART_SetConfig+0x4bc>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d81 	.word	0x08003d81
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	08003d91 	.word	0x08003d91
 8003d68:	08003da7 	.word	0x08003da7
 8003d6c:	08003d97 	.word	0x08003d97
 8003d70:	08003da7 	.word	0x08003da7
 8003d74:	08003da7 	.word	0x08003da7
 8003d78:	08003da7 	.word	0x08003da7
 8003d7c:	08003d9f 	.word	0x08003d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d80:	f7fe ff64 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8003d84:	61f8      	str	r0, [r7, #28]
        break;
 8003d86:	e014      	b.n	8003db2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7fe ff76 	bl	8002c78 <HAL_RCC_GetPCLK2Freq>
 8003d8c:	61f8      	str	r0, [r7, #28]
        break;
 8003d8e:	e010      	b.n	8003db2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d90:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <UART_SetConfig+0x56c>)
 8003d92:	61fb      	str	r3, [r7, #28]
        break;
 8003d94:	e00d      	b.n	8003db2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d96:	f7fe fec1 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8003d9a:	61f8      	str	r0, [r7, #28]
        break;
 8003d9c:	e009      	b.n	8003db2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da2:	61fb      	str	r3, [r7, #28]
        break;
 8003da4:	e005      	b.n	8003db2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003db0:	bf00      	nop
    }

    if (pclk != 0U)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d019      	beq.n	8003dec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	085a      	lsrs	r2, r3, #1
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	441a      	add	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b0f      	cmp	r3, #15
 8003dd0:	d909      	bls.n	8003de6 <UART_SetConfig+0x546>
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d205      	bcs.n	8003de6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60da      	str	r2, [r3, #12]
 8003de4:	e002      	b.n	8003dec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003df8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3728      	adds	r7, #40	; 0x28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e06:	bf00      	nop
 8003e08:	40008000 	.word	0x40008000
 8003e0c:	00f42400 	.word	0x00f42400

08003e10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01a      	beq.n	8003f26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0e:	d10a      	bne.n	8003f26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]
  }
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f64:	f7fc ff56 	bl	8000e14 <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d10e      	bne.n	8003f96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f82d 	bl	8003fe6 <UART_WaitOnFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e023      	b.n	8003fde <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d10e      	bne.n	8003fc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f817 	bl	8003fe6 <UART_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e00d      	b.n	8003fde <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b09c      	sub	sp, #112	; 0x70
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff6:	e0a5      	b.n	8004144 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	f000 80a1 	beq.w	8004144 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004002:	f7fc ff07 	bl	8000e14 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800400e:	429a      	cmp	r2, r3
 8004010:	d302      	bcc.n	8004018 <UART_WaitOnFlagUntilTimeout+0x32>
 8004012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004014:	2b00      	cmp	r3, #0
 8004016:	d13e      	bne.n	8004096 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004028:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800402c:	667b      	str	r3, [r7, #100]	; 0x64
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004036:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004038:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800403c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e6      	bne.n	8004018 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3308      	adds	r3, #8
 8004050:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	663b      	str	r3, [r7, #96]	; 0x60
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3308      	adds	r3, #8
 8004068:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800406a:	64ba      	str	r2, [r7, #72]	; 0x48
 800406c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e5      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e067      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d04f      	beq.n	8004144 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b2:	d147      	bne.n	8004144 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040bc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
 80040de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e6      	bne.n	80040be <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3308      	adds	r3, #8
 80040f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	66bb      	str	r3, [r7, #104]	; 0x68
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3308      	adds	r3, #8
 800410e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004110:	623a      	str	r2, [r7, #32]
 8004112:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	69f9      	ldr	r1, [r7, #28]
 8004116:	6a3a      	ldr	r2, [r7, #32]
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	61bb      	str	r3, [r7, #24]
   return(result);
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e5      	bne.n	80040f0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e010      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4013      	ands	r3, r2
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	429a      	cmp	r2, r3
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	429a      	cmp	r2, r3
 8004160:	f43f af4a 	beq.w	8003ff8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3770      	adds	r7, #112	; 0x70
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <__errno>:
 8004170:	4b01      	ldr	r3, [pc, #4]	; (8004178 <__errno+0x8>)
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	2000000c 	.word	0x2000000c

0800417c <__libc_init_array>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	4d0d      	ldr	r5, [pc, #52]	; (80041b4 <__libc_init_array+0x38>)
 8004180:	4c0d      	ldr	r4, [pc, #52]	; (80041b8 <__libc_init_array+0x3c>)
 8004182:	1b64      	subs	r4, r4, r5
 8004184:	10a4      	asrs	r4, r4, #2
 8004186:	2600      	movs	r6, #0
 8004188:	42a6      	cmp	r6, r4
 800418a:	d109      	bne.n	80041a0 <__libc_init_array+0x24>
 800418c:	4d0b      	ldr	r5, [pc, #44]	; (80041bc <__libc_init_array+0x40>)
 800418e:	4c0c      	ldr	r4, [pc, #48]	; (80041c0 <__libc_init_array+0x44>)
 8004190:	f000 fc8e 	bl	8004ab0 <_init>
 8004194:	1b64      	subs	r4, r4, r5
 8004196:	10a4      	asrs	r4, r4, #2
 8004198:	2600      	movs	r6, #0
 800419a:	42a6      	cmp	r6, r4
 800419c:	d105      	bne.n	80041aa <__libc_init_array+0x2e>
 800419e:	bd70      	pop	{r4, r5, r6, pc}
 80041a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a4:	4798      	blx	r3
 80041a6:	3601      	adds	r6, #1
 80041a8:	e7ee      	b.n	8004188 <__libc_init_array+0xc>
 80041aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ae:	4798      	blx	r3
 80041b0:	3601      	adds	r6, #1
 80041b2:	e7f2      	b.n	800419a <__libc_init_array+0x1e>
 80041b4:	08004b90 	.word	0x08004b90
 80041b8:	08004b90 	.word	0x08004b90
 80041bc:	08004b90 	.word	0x08004b90
 80041c0:	08004b94 	.word	0x08004b94

080041c4 <memset>:
 80041c4:	4402      	add	r2, r0
 80041c6:	4603      	mov	r3, r0
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d100      	bne.n	80041ce <memset+0xa>
 80041cc:	4770      	bx	lr
 80041ce:	f803 1b01 	strb.w	r1, [r3], #1
 80041d2:	e7f9      	b.n	80041c8 <memset+0x4>

080041d4 <siprintf>:
 80041d4:	b40e      	push	{r1, r2, r3}
 80041d6:	b500      	push	{lr}
 80041d8:	b09c      	sub	sp, #112	; 0x70
 80041da:	ab1d      	add	r3, sp, #116	; 0x74
 80041dc:	9002      	str	r0, [sp, #8]
 80041de:	9006      	str	r0, [sp, #24]
 80041e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041e4:	4809      	ldr	r0, [pc, #36]	; (800420c <siprintf+0x38>)
 80041e6:	9107      	str	r1, [sp, #28]
 80041e8:	9104      	str	r1, [sp, #16]
 80041ea:	4909      	ldr	r1, [pc, #36]	; (8004210 <siprintf+0x3c>)
 80041ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80041f0:	9105      	str	r1, [sp, #20]
 80041f2:	6800      	ldr	r0, [r0, #0]
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	a902      	add	r1, sp, #8
 80041f8:	f000 f868 	bl	80042cc <_svfiprintf_r>
 80041fc:	9b02      	ldr	r3, [sp, #8]
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	b01c      	add	sp, #112	; 0x70
 8004204:	f85d eb04 	ldr.w	lr, [sp], #4
 8004208:	b003      	add	sp, #12
 800420a:	4770      	bx	lr
 800420c:	2000000c 	.word	0x2000000c
 8004210:	ffff0208 	.word	0xffff0208

08004214 <__ssputs_r>:
 8004214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004218:	688e      	ldr	r6, [r1, #8]
 800421a:	429e      	cmp	r6, r3
 800421c:	4682      	mov	sl, r0
 800421e:	460c      	mov	r4, r1
 8004220:	4690      	mov	r8, r2
 8004222:	461f      	mov	r7, r3
 8004224:	d838      	bhi.n	8004298 <__ssputs_r+0x84>
 8004226:	898a      	ldrh	r2, [r1, #12]
 8004228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800422c:	d032      	beq.n	8004294 <__ssputs_r+0x80>
 800422e:	6825      	ldr	r5, [r4, #0]
 8004230:	6909      	ldr	r1, [r1, #16]
 8004232:	eba5 0901 	sub.w	r9, r5, r1
 8004236:	6965      	ldr	r5, [r4, #20]
 8004238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800423c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004240:	3301      	adds	r3, #1
 8004242:	444b      	add	r3, r9
 8004244:	106d      	asrs	r5, r5, #1
 8004246:	429d      	cmp	r5, r3
 8004248:	bf38      	it	cc
 800424a:	461d      	movcc	r5, r3
 800424c:	0553      	lsls	r3, r2, #21
 800424e:	d531      	bpl.n	80042b4 <__ssputs_r+0xa0>
 8004250:	4629      	mov	r1, r5
 8004252:	f000 fb63 	bl	800491c <_malloc_r>
 8004256:	4606      	mov	r6, r0
 8004258:	b950      	cbnz	r0, 8004270 <__ssputs_r+0x5c>
 800425a:	230c      	movs	r3, #12
 800425c:	f8ca 3000 	str.w	r3, [sl]
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004266:	81a3      	strh	r3, [r4, #12]
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004270:	6921      	ldr	r1, [r4, #16]
 8004272:	464a      	mov	r2, r9
 8004274:	f000 fabe 	bl	80047f4 <memcpy>
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800427e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004282:	81a3      	strh	r3, [r4, #12]
 8004284:	6126      	str	r6, [r4, #16]
 8004286:	6165      	str	r5, [r4, #20]
 8004288:	444e      	add	r6, r9
 800428a:	eba5 0509 	sub.w	r5, r5, r9
 800428e:	6026      	str	r6, [r4, #0]
 8004290:	60a5      	str	r5, [r4, #8]
 8004292:	463e      	mov	r6, r7
 8004294:	42be      	cmp	r6, r7
 8004296:	d900      	bls.n	800429a <__ssputs_r+0x86>
 8004298:	463e      	mov	r6, r7
 800429a:	6820      	ldr	r0, [r4, #0]
 800429c:	4632      	mov	r2, r6
 800429e:	4641      	mov	r1, r8
 80042a0:	f000 fab6 	bl	8004810 <memmove>
 80042a4:	68a3      	ldr	r3, [r4, #8]
 80042a6:	1b9b      	subs	r3, r3, r6
 80042a8:	60a3      	str	r3, [r4, #8]
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	4433      	add	r3, r6
 80042ae:	6023      	str	r3, [r4, #0]
 80042b0:	2000      	movs	r0, #0
 80042b2:	e7db      	b.n	800426c <__ssputs_r+0x58>
 80042b4:	462a      	mov	r2, r5
 80042b6:	f000 fba5 	bl	8004a04 <_realloc_r>
 80042ba:	4606      	mov	r6, r0
 80042bc:	2800      	cmp	r0, #0
 80042be:	d1e1      	bne.n	8004284 <__ssputs_r+0x70>
 80042c0:	6921      	ldr	r1, [r4, #16]
 80042c2:	4650      	mov	r0, sl
 80042c4:	f000 fabe 	bl	8004844 <_free_r>
 80042c8:	e7c7      	b.n	800425a <__ssputs_r+0x46>
	...

080042cc <_svfiprintf_r>:
 80042cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d0:	4698      	mov	r8, r3
 80042d2:	898b      	ldrh	r3, [r1, #12]
 80042d4:	061b      	lsls	r3, r3, #24
 80042d6:	b09d      	sub	sp, #116	; 0x74
 80042d8:	4607      	mov	r7, r0
 80042da:	460d      	mov	r5, r1
 80042dc:	4614      	mov	r4, r2
 80042de:	d50e      	bpl.n	80042fe <_svfiprintf_r+0x32>
 80042e0:	690b      	ldr	r3, [r1, #16]
 80042e2:	b963      	cbnz	r3, 80042fe <_svfiprintf_r+0x32>
 80042e4:	2140      	movs	r1, #64	; 0x40
 80042e6:	f000 fb19 	bl	800491c <_malloc_r>
 80042ea:	6028      	str	r0, [r5, #0]
 80042ec:	6128      	str	r0, [r5, #16]
 80042ee:	b920      	cbnz	r0, 80042fa <_svfiprintf_r+0x2e>
 80042f0:	230c      	movs	r3, #12
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295
 80042f8:	e0d1      	b.n	800449e <_svfiprintf_r+0x1d2>
 80042fa:	2340      	movs	r3, #64	; 0x40
 80042fc:	616b      	str	r3, [r5, #20]
 80042fe:	2300      	movs	r3, #0
 8004300:	9309      	str	r3, [sp, #36]	; 0x24
 8004302:	2320      	movs	r3, #32
 8004304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004308:	f8cd 800c 	str.w	r8, [sp, #12]
 800430c:	2330      	movs	r3, #48	; 0x30
 800430e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80044b8 <_svfiprintf_r+0x1ec>
 8004312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004316:	f04f 0901 	mov.w	r9, #1
 800431a:	4623      	mov	r3, r4
 800431c:	469a      	mov	sl, r3
 800431e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004322:	b10a      	cbz	r2, 8004328 <_svfiprintf_r+0x5c>
 8004324:	2a25      	cmp	r2, #37	; 0x25
 8004326:	d1f9      	bne.n	800431c <_svfiprintf_r+0x50>
 8004328:	ebba 0b04 	subs.w	fp, sl, r4
 800432c:	d00b      	beq.n	8004346 <_svfiprintf_r+0x7a>
 800432e:	465b      	mov	r3, fp
 8004330:	4622      	mov	r2, r4
 8004332:	4629      	mov	r1, r5
 8004334:	4638      	mov	r0, r7
 8004336:	f7ff ff6d 	bl	8004214 <__ssputs_r>
 800433a:	3001      	adds	r0, #1
 800433c:	f000 80aa 	beq.w	8004494 <_svfiprintf_r+0x1c8>
 8004340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004342:	445a      	add	r2, fp
 8004344:	9209      	str	r2, [sp, #36]	; 0x24
 8004346:	f89a 3000 	ldrb.w	r3, [sl]
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80a2 	beq.w	8004494 <_svfiprintf_r+0x1c8>
 8004350:	2300      	movs	r3, #0
 8004352:	f04f 32ff 	mov.w	r2, #4294967295
 8004356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800435a:	f10a 0a01 	add.w	sl, sl, #1
 800435e:	9304      	str	r3, [sp, #16]
 8004360:	9307      	str	r3, [sp, #28]
 8004362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004366:	931a      	str	r3, [sp, #104]	; 0x68
 8004368:	4654      	mov	r4, sl
 800436a:	2205      	movs	r2, #5
 800436c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004370:	4851      	ldr	r0, [pc, #324]	; (80044b8 <_svfiprintf_r+0x1ec>)
 8004372:	f7fb ff2d 	bl	80001d0 <memchr>
 8004376:	9a04      	ldr	r2, [sp, #16]
 8004378:	b9d8      	cbnz	r0, 80043b2 <_svfiprintf_r+0xe6>
 800437a:	06d0      	lsls	r0, r2, #27
 800437c:	bf44      	itt	mi
 800437e:	2320      	movmi	r3, #32
 8004380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004384:	0711      	lsls	r1, r2, #28
 8004386:	bf44      	itt	mi
 8004388:	232b      	movmi	r3, #43	; 0x2b
 800438a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800438e:	f89a 3000 	ldrb.w	r3, [sl]
 8004392:	2b2a      	cmp	r3, #42	; 0x2a
 8004394:	d015      	beq.n	80043c2 <_svfiprintf_r+0xf6>
 8004396:	9a07      	ldr	r2, [sp, #28]
 8004398:	4654      	mov	r4, sl
 800439a:	2000      	movs	r0, #0
 800439c:	f04f 0c0a 	mov.w	ip, #10
 80043a0:	4621      	mov	r1, r4
 80043a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043a6:	3b30      	subs	r3, #48	; 0x30
 80043a8:	2b09      	cmp	r3, #9
 80043aa:	d94e      	bls.n	800444a <_svfiprintf_r+0x17e>
 80043ac:	b1b0      	cbz	r0, 80043dc <_svfiprintf_r+0x110>
 80043ae:	9207      	str	r2, [sp, #28]
 80043b0:	e014      	b.n	80043dc <_svfiprintf_r+0x110>
 80043b2:	eba0 0308 	sub.w	r3, r0, r8
 80043b6:	fa09 f303 	lsl.w	r3, r9, r3
 80043ba:	4313      	orrs	r3, r2
 80043bc:	9304      	str	r3, [sp, #16]
 80043be:	46a2      	mov	sl, r4
 80043c0:	e7d2      	b.n	8004368 <_svfiprintf_r+0x9c>
 80043c2:	9b03      	ldr	r3, [sp, #12]
 80043c4:	1d19      	adds	r1, r3, #4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	9103      	str	r1, [sp, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bfbb      	ittet	lt
 80043ce:	425b      	neglt	r3, r3
 80043d0:	f042 0202 	orrlt.w	r2, r2, #2
 80043d4:	9307      	strge	r3, [sp, #28]
 80043d6:	9307      	strlt	r3, [sp, #28]
 80043d8:	bfb8      	it	lt
 80043da:	9204      	strlt	r2, [sp, #16]
 80043dc:	7823      	ldrb	r3, [r4, #0]
 80043de:	2b2e      	cmp	r3, #46	; 0x2e
 80043e0:	d10c      	bne.n	80043fc <_svfiprintf_r+0x130>
 80043e2:	7863      	ldrb	r3, [r4, #1]
 80043e4:	2b2a      	cmp	r3, #42	; 0x2a
 80043e6:	d135      	bne.n	8004454 <_svfiprintf_r+0x188>
 80043e8:	9b03      	ldr	r3, [sp, #12]
 80043ea:	1d1a      	adds	r2, r3, #4
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	9203      	str	r2, [sp, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bfb8      	it	lt
 80043f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80043f8:	3402      	adds	r4, #2
 80043fa:	9305      	str	r3, [sp, #20]
 80043fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044c8 <_svfiprintf_r+0x1fc>
 8004400:	7821      	ldrb	r1, [r4, #0]
 8004402:	2203      	movs	r2, #3
 8004404:	4650      	mov	r0, sl
 8004406:	f7fb fee3 	bl	80001d0 <memchr>
 800440a:	b140      	cbz	r0, 800441e <_svfiprintf_r+0x152>
 800440c:	2340      	movs	r3, #64	; 0x40
 800440e:	eba0 000a 	sub.w	r0, r0, sl
 8004412:	fa03 f000 	lsl.w	r0, r3, r0
 8004416:	9b04      	ldr	r3, [sp, #16]
 8004418:	4303      	orrs	r3, r0
 800441a:	3401      	adds	r4, #1
 800441c:	9304      	str	r3, [sp, #16]
 800441e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004422:	4826      	ldr	r0, [pc, #152]	; (80044bc <_svfiprintf_r+0x1f0>)
 8004424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004428:	2206      	movs	r2, #6
 800442a:	f7fb fed1 	bl	80001d0 <memchr>
 800442e:	2800      	cmp	r0, #0
 8004430:	d038      	beq.n	80044a4 <_svfiprintf_r+0x1d8>
 8004432:	4b23      	ldr	r3, [pc, #140]	; (80044c0 <_svfiprintf_r+0x1f4>)
 8004434:	bb1b      	cbnz	r3, 800447e <_svfiprintf_r+0x1b2>
 8004436:	9b03      	ldr	r3, [sp, #12]
 8004438:	3307      	adds	r3, #7
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	3308      	adds	r3, #8
 8004440:	9303      	str	r3, [sp, #12]
 8004442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004444:	4433      	add	r3, r6
 8004446:	9309      	str	r3, [sp, #36]	; 0x24
 8004448:	e767      	b.n	800431a <_svfiprintf_r+0x4e>
 800444a:	fb0c 3202 	mla	r2, ip, r2, r3
 800444e:	460c      	mov	r4, r1
 8004450:	2001      	movs	r0, #1
 8004452:	e7a5      	b.n	80043a0 <_svfiprintf_r+0xd4>
 8004454:	2300      	movs	r3, #0
 8004456:	3401      	adds	r4, #1
 8004458:	9305      	str	r3, [sp, #20]
 800445a:	4619      	mov	r1, r3
 800445c:	f04f 0c0a 	mov.w	ip, #10
 8004460:	4620      	mov	r0, r4
 8004462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004466:	3a30      	subs	r2, #48	; 0x30
 8004468:	2a09      	cmp	r2, #9
 800446a:	d903      	bls.n	8004474 <_svfiprintf_r+0x1a8>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0c5      	beq.n	80043fc <_svfiprintf_r+0x130>
 8004470:	9105      	str	r1, [sp, #20]
 8004472:	e7c3      	b.n	80043fc <_svfiprintf_r+0x130>
 8004474:	fb0c 2101 	mla	r1, ip, r1, r2
 8004478:	4604      	mov	r4, r0
 800447a:	2301      	movs	r3, #1
 800447c:	e7f0      	b.n	8004460 <_svfiprintf_r+0x194>
 800447e:	ab03      	add	r3, sp, #12
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	462a      	mov	r2, r5
 8004484:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <_svfiprintf_r+0x1f8>)
 8004486:	a904      	add	r1, sp, #16
 8004488:	4638      	mov	r0, r7
 800448a:	f3af 8000 	nop.w
 800448e:	1c42      	adds	r2, r0, #1
 8004490:	4606      	mov	r6, r0
 8004492:	d1d6      	bne.n	8004442 <_svfiprintf_r+0x176>
 8004494:	89ab      	ldrh	r3, [r5, #12]
 8004496:	065b      	lsls	r3, r3, #25
 8004498:	f53f af2c 	bmi.w	80042f4 <_svfiprintf_r+0x28>
 800449c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800449e:	b01d      	add	sp, #116	; 0x74
 80044a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a4:	ab03      	add	r3, sp, #12
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	462a      	mov	r2, r5
 80044aa:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <_svfiprintf_r+0x1f8>)
 80044ac:	a904      	add	r1, sp, #16
 80044ae:	4638      	mov	r0, r7
 80044b0:	f000 f87a 	bl	80045a8 <_printf_i>
 80044b4:	e7eb      	b.n	800448e <_svfiprintf_r+0x1c2>
 80044b6:	bf00      	nop
 80044b8:	08004b54 	.word	0x08004b54
 80044bc:	08004b5e 	.word	0x08004b5e
 80044c0:	00000000 	.word	0x00000000
 80044c4:	08004215 	.word	0x08004215
 80044c8:	08004b5a 	.word	0x08004b5a

080044cc <_printf_common>:
 80044cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d0:	4616      	mov	r6, r2
 80044d2:	4699      	mov	r9, r3
 80044d4:	688a      	ldr	r2, [r1, #8]
 80044d6:	690b      	ldr	r3, [r1, #16]
 80044d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044dc:	4293      	cmp	r3, r2
 80044de:	bfb8      	it	lt
 80044e0:	4613      	movlt	r3, r2
 80044e2:	6033      	str	r3, [r6, #0]
 80044e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044e8:	4607      	mov	r7, r0
 80044ea:	460c      	mov	r4, r1
 80044ec:	b10a      	cbz	r2, 80044f2 <_printf_common+0x26>
 80044ee:	3301      	adds	r3, #1
 80044f0:	6033      	str	r3, [r6, #0]
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	0699      	lsls	r1, r3, #26
 80044f6:	bf42      	ittt	mi
 80044f8:	6833      	ldrmi	r3, [r6, #0]
 80044fa:	3302      	addmi	r3, #2
 80044fc:	6033      	strmi	r3, [r6, #0]
 80044fe:	6825      	ldr	r5, [r4, #0]
 8004500:	f015 0506 	ands.w	r5, r5, #6
 8004504:	d106      	bne.n	8004514 <_printf_common+0x48>
 8004506:	f104 0a19 	add.w	sl, r4, #25
 800450a:	68e3      	ldr	r3, [r4, #12]
 800450c:	6832      	ldr	r2, [r6, #0]
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	42ab      	cmp	r3, r5
 8004512:	dc26      	bgt.n	8004562 <_printf_common+0x96>
 8004514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004518:	1e13      	subs	r3, r2, #0
 800451a:	6822      	ldr	r2, [r4, #0]
 800451c:	bf18      	it	ne
 800451e:	2301      	movne	r3, #1
 8004520:	0692      	lsls	r2, r2, #26
 8004522:	d42b      	bmi.n	800457c <_printf_common+0xb0>
 8004524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004528:	4649      	mov	r1, r9
 800452a:	4638      	mov	r0, r7
 800452c:	47c0      	blx	r8
 800452e:	3001      	adds	r0, #1
 8004530:	d01e      	beq.n	8004570 <_printf_common+0xa4>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	68e5      	ldr	r5, [r4, #12]
 8004536:	6832      	ldr	r2, [r6, #0]
 8004538:	f003 0306 	and.w	r3, r3, #6
 800453c:	2b04      	cmp	r3, #4
 800453e:	bf08      	it	eq
 8004540:	1aad      	subeq	r5, r5, r2
 8004542:	68a3      	ldr	r3, [r4, #8]
 8004544:	6922      	ldr	r2, [r4, #16]
 8004546:	bf0c      	ite	eq
 8004548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800454c:	2500      	movne	r5, #0
 800454e:	4293      	cmp	r3, r2
 8004550:	bfc4      	itt	gt
 8004552:	1a9b      	subgt	r3, r3, r2
 8004554:	18ed      	addgt	r5, r5, r3
 8004556:	2600      	movs	r6, #0
 8004558:	341a      	adds	r4, #26
 800455a:	42b5      	cmp	r5, r6
 800455c:	d11a      	bne.n	8004594 <_printf_common+0xc8>
 800455e:	2000      	movs	r0, #0
 8004560:	e008      	b.n	8004574 <_printf_common+0xa8>
 8004562:	2301      	movs	r3, #1
 8004564:	4652      	mov	r2, sl
 8004566:	4649      	mov	r1, r9
 8004568:	4638      	mov	r0, r7
 800456a:	47c0      	blx	r8
 800456c:	3001      	adds	r0, #1
 800456e:	d103      	bne.n	8004578 <_printf_common+0xac>
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004578:	3501      	adds	r5, #1
 800457a:	e7c6      	b.n	800450a <_printf_common+0x3e>
 800457c:	18e1      	adds	r1, r4, r3
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	2030      	movs	r0, #48	; 0x30
 8004582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004586:	4422      	add	r2, r4
 8004588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800458c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004590:	3302      	adds	r3, #2
 8004592:	e7c7      	b.n	8004524 <_printf_common+0x58>
 8004594:	2301      	movs	r3, #1
 8004596:	4622      	mov	r2, r4
 8004598:	4649      	mov	r1, r9
 800459a:	4638      	mov	r0, r7
 800459c:	47c0      	blx	r8
 800459e:	3001      	adds	r0, #1
 80045a0:	d0e6      	beq.n	8004570 <_printf_common+0xa4>
 80045a2:	3601      	adds	r6, #1
 80045a4:	e7d9      	b.n	800455a <_printf_common+0x8e>
	...

080045a8 <_printf_i>:
 80045a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045ac:	7e0f      	ldrb	r7, [r1, #24]
 80045ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045b0:	2f78      	cmp	r7, #120	; 0x78
 80045b2:	4691      	mov	r9, r2
 80045b4:	4680      	mov	r8, r0
 80045b6:	460c      	mov	r4, r1
 80045b8:	469a      	mov	sl, r3
 80045ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045be:	d807      	bhi.n	80045d0 <_printf_i+0x28>
 80045c0:	2f62      	cmp	r7, #98	; 0x62
 80045c2:	d80a      	bhi.n	80045da <_printf_i+0x32>
 80045c4:	2f00      	cmp	r7, #0
 80045c6:	f000 80d8 	beq.w	800477a <_printf_i+0x1d2>
 80045ca:	2f58      	cmp	r7, #88	; 0x58
 80045cc:	f000 80a3 	beq.w	8004716 <_printf_i+0x16e>
 80045d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045d8:	e03a      	b.n	8004650 <_printf_i+0xa8>
 80045da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045de:	2b15      	cmp	r3, #21
 80045e0:	d8f6      	bhi.n	80045d0 <_printf_i+0x28>
 80045e2:	a101      	add	r1, pc, #4	; (adr r1, 80045e8 <_printf_i+0x40>)
 80045e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045e8:	08004641 	.word	0x08004641
 80045ec:	08004655 	.word	0x08004655
 80045f0:	080045d1 	.word	0x080045d1
 80045f4:	080045d1 	.word	0x080045d1
 80045f8:	080045d1 	.word	0x080045d1
 80045fc:	080045d1 	.word	0x080045d1
 8004600:	08004655 	.word	0x08004655
 8004604:	080045d1 	.word	0x080045d1
 8004608:	080045d1 	.word	0x080045d1
 800460c:	080045d1 	.word	0x080045d1
 8004610:	080045d1 	.word	0x080045d1
 8004614:	08004761 	.word	0x08004761
 8004618:	08004685 	.word	0x08004685
 800461c:	08004743 	.word	0x08004743
 8004620:	080045d1 	.word	0x080045d1
 8004624:	080045d1 	.word	0x080045d1
 8004628:	08004783 	.word	0x08004783
 800462c:	080045d1 	.word	0x080045d1
 8004630:	08004685 	.word	0x08004685
 8004634:	080045d1 	.word	0x080045d1
 8004638:	080045d1 	.word	0x080045d1
 800463c:	0800474b 	.word	0x0800474b
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	1d1a      	adds	r2, r3, #4
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	602a      	str	r2, [r5, #0]
 8004648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800464c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004650:	2301      	movs	r3, #1
 8004652:	e0a3      	b.n	800479c <_printf_i+0x1f4>
 8004654:	6820      	ldr	r0, [r4, #0]
 8004656:	6829      	ldr	r1, [r5, #0]
 8004658:	0606      	lsls	r6, r0, #24
 800465a:	f101 0304 	add.w	r3, r1, #4
 800465e:	d50a      	bpl.n	8004676 <_printf_i+0xce>
 8004660:	680e      	ldr	r6, [r1, #0]
 8004662:	602b      	str	r3, [r5, #0]
 8004664:	2e00      	cmp	r6, #0
 8004666:	da03      	bge.n	8004670 <_printf_i+0xc8>
 8004668:	232d      	movs	r3, #45	; 0x2d
 800466a:	4276      	negs	r6, r6
 800466c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004670:	485e      	ldr	r0, [pc, #376]	; (80047ec <_printf_i+0x244>)
 8004672:	230a      	movs	r3, #10
 8004674:	e019      	b.n	80046aa <_printf_i+0x102>
 8004676:	680e      	ldr	r6, [r1, #0]
 8004678:	602b      	str	r3, [r5, #0]
 800467a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800467e:	bf18      	it	ne
 8004680:	b236      	sxthne	r6, r6
 8004682:	e7ef      	b.n	8004664 <_printf_i+0xbc>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	6820      	ldr	r0, [r4, #0]
 8004688:	1d19      	adds	r1, r3, #4
 800468a:	6029      	str	r1, [r5, #0]
 800468c:	0601      	lsls	r1, r0, #24
 800468e:	d501      	bpl.n	8004694 <_printf_i+0xec>
 8004690:	681e      	ldr	r6, [r3, #0]
 8004692:	e002      	b.n	800469a <_printf_i+0xf2>
 8004694:	0646      	lsls	r6, r0, #25
 8004696:	d5fb      	bpl.n	8004690 <_printf_i+0xe8>
 8004698:	881e      	ldrh	r6, [r3, #0]
 800469a:	4854      	ldr	r0, [pc, #336]	; (80047ec <_printf_i+0x244>)
 800469c:	2f6f      	cmp	r7, #111	; 0x6f
 800469e:	bf0c      	ite	eq
 80046a0:	2308      	moveq	r3, #8
 80046a2:	230a      	movne	r3, #10
 80046a4:	2100      	movs	r1, #0
 80046a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046aa:	6865      	ldr	r5, [r4, #4]
 80046ac:	60a5      	str	r5, [r4, #8]
 80046ae:	2d00      	cmp	r5, #0
 80046b0:	bfa2      	ittt	ge
 80046b2:	6821      	ldrge	r1, [r4, #0]
 80046b4:	f021 0104 	bicge.w	r1, r1, #4
 80046b8:	6021      	strge	r1, [r4, #0]
 80046ba:	b90e      	cbnz	r6, 80046c0 <_printf_i+0x118>
 80046bc:	2d00      	cmp	r5, #0
 80046be:	d04d      	beq.n	800475c <_printf_i+0x1b4>
 80046c0:	4615      	mov	r5, r2
 80046c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80046c6:	fb03 6711 	mls	r7, r3, r1, r6
 80046ca:	5dc7      	ldrb	r7, [r0, r7]
 80046cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046d0:	4637      	mov	r7, r6
 80046d2:	42bb      	cmp	r3, r7
 80046d4:	460e      	mov	r6, r1
 80046d6:	d9f4      	bls.n	80046c2 <_printf_i+0x11a>
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d10b      	bne.n	80046f4 <_printf_i+0x14c>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	07de      	lsls	r6, r3, #31
 80046e0:	d508      	bpl.n	80046f4 <_printf_i+0x14c>
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	6861      	ldr	r1, [r4, #4]
 80046e6:	4299      	cmp	r1, r3
 80046e8:	bfde      	ittt	le
 80046ea:	2330      	movle	r3, #48	; 0x30
 80046ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046f4:	1b52      	subs	r2, r2, r5
 80046f6:	6122      	str	r2, [r4, #16]
 80046f8:	f8cd a000 	str.w	sl, [sp]
 80046fc:	464b      	mov	r3, r9
 80046fe:	aa03      	add	r2, sp, #12
 8004700:	4621      	mov	r1, r4
 8004702:	4640      	mov	r0, r8
 8004704:	f7ff fee2 	bl	80044cc <_printf_common>
 8004708:	3001      	adds	r0, #1
 800470a:	d14c      	bne.n	80047a6 <_printf_i+0x1fe>
 800470c:	f04f 30ff 	mov.w	r0, #4294967295
 8004710:	b004      	add	sp, #16
 8004712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004716:	4835      	ldr	r0, [pc, #212]	; (80047ec <_printf_i+0x244>)
 8004718:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800471c:	6829      	ldr	r1, [r5, #0]
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	f851 6b04 	ldr.w	r6, [r1], #4
 8004724:	6029      	str	r1, [r5, #0]
 8004726:	061d      	lsls	r5, r3, #24
 8004728:	d514      	bpl.n	8004754 <_printf_i+0x1ac>
 800472a:	07df      	lsls	r7, r3, #31
 800472c:	bf44      	itt	mi
 800472e:	f043 0320 	orrmi.w	r3, r3, #32
 8004732:	6023      	strmi	r3, [r4, #0]
 8004734:	b91e      	cbnz	r6, 800473e <_printf_i+0x196>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	f023 0320 	bic.w	r3, r3, #32
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	2310      	movs	r3, #16
 8004740:	e7b0      	b.n	80046a4 <_printf_i+0xfc>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	f043 0320 	orr.w	r3, r3, #32
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	2378      	movs	r3, #120	; 0x78
 800474c:	4828      	ldr	r0, [pc, #160]	; (80047f0 <_printf_i+0x248>)
 800474e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004752:	e7e3      	b.n	800471c <_printf_i+0x174>
 8004754:	0659      	lsls	r1, r3, #25
 8004756:	bf48      	it	mi
 8004758:	b2b6      	uxthmi	r6, r6
 800475a:	e7e6      	b.n	800472a <_printf_i+0x182>
 800475c:	4615      	mov	r5, r2
 800475e:	e7bb      	b.n	80046d8 <_printf_i+0x130>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	6826      	ldr	r6, [r4, #0]
 8004764:	6961      	ldr	r1, [r4, #20]
 8004766:	1d18      	adds	r0, r3, #4
 8004768:	6028      	str	r0, [r5, #0]
 800476a:	0635      	lsls	r5, r6, #24
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	d501      	bpl.n	8004774 <_printf_i+0x1cc>
 8004770:	6019      	str	r1, [r3, #0]
 8004772:	e002      	b.n	800477a <_printf_i+0x1d2>
 8004774:	0670      	lsls	r0, r6, #25
 8004776:	d5fb      	bpl.n	8004770 <_printf_i+0x1c8>
 8004778:	8019      	strh	r1, [r3, #0]
 800477a:	2300      	movs	r3, #0
 800477c:	6123      	str	r3, [r4, #16]
 800477e:	4615      	mov	r5, r2
 8004780:	e7ba      	b.n	80046f8 <_printf_i+0x150>
 8004782:	682b      	ldr	r3, [r5, #0]
 8004784:	1d1a      	adds	r2, r3, #4
 8004786:	602a      	str	r2, [r5, #0]
 8004788:	681d      	ldr	r5, [r3, #0]
 800478a:	6862      	ldr	r2, [r4, #4]
 800478c:	2100      	movs	r1, #0
 800478e:	4628      	mov	r0, r5
 8004790:	f7fb fd1e 	bl	80001d0 <memchr>
 8004794:	b108      	cbz	r0, 800479a <_printf_i+0x1f2>
 8004796:	1b40      	subs	r0, r0, r5
 8004798:	6060      	str	r0, [r4, #4]
 800479a:	6863      	ldr	r3, [r4, #4]
 800479c:	6123      	str	r3, [r4, #16]
 800479e:	2300      	movs	r3, #0
 80047a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a4:	e7a8      	b.n	80046f8 <_printf_i+0x150>
 80047a6:	6923      	ldr	r3, [r4, #16]
 80047a8:	462a      	mov	r2, r5
 80047aa:	4649      	mov	r1, r9
 80047ac:	4640      	mov	r0, r8
 80047ae:	47d0      	blx	sl
 80047b0:	3001      	adds	r0, #1
 80047b2:	d0ab      	beq.n	800470c <_printf_i+0x164>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	079b      	lsls	r3, r3, #30
 80047b8:	d413      	bmi.n	80047e2 <_printf_i+0x23a>
 80047ba:	68e0      	ldr	r0, [r4, #12]
 80047bc:	9b03      	ldr	r3, [sp, #12]
 80047be:	4298      	cmp	r0, r3
 80047c0:	bfb8      	it	lt
 80047c2:	4618      	movlt	r0, r3
 80047c4:	e7a4      	b.n	8004710 <_printf_i+0x168>
 80047c6:	2301      	movs	r3, #1
 80047c8:	4632      	mov	r2, r6
 80047ca:	4649      	mov	r1, r9
 80047cc:	4640      	mov	r0, r8
 80047ce:	47d0      	blx	sl
 80047d0:	3001      	adds	r0, #1
 80047d2:	d09b      	beq.n	800470c <_printf_i+0x164>
 80047d4:	3501      	adds	r5, #1
 80047d6:	68e3      	ldr	r3, [r4, #12]
 80047d8:	9903      	ldr	r1, [sp, #12]
 80047da:	1a5b      	subs	r3, r3, r1
 80047dc:	42ab      	cmp	r3, r5
 80047de:	dcf2      	bgt.n	80047c6 <_printf_i+0x21e>
 80047e0:	e7eb      	b.n	80047ba <_printf_i+0x212>
 80047e2:	2500      	movs	r5, #0
 80047e4:	f104 0619 	add.w	r6, r4, #25
 80047e8:	e7f5      	b.n	80047d6 <_printf_i+0x22e>
 80047ea:	bf00      	nop
 80047ec:	08004b65 	.word	0x08004b65
 80047f0:	08004b76 	.word	0x08004b76

080047f4 <memcpy>:
 80047f4:	440a      	add	r2, r1
 80047f6:	4291      	cmp	r1, r2
 80047f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80047fc:	d100      	bne.n	8004800 <memcpy+0xc>
 80047fe:	4770      	bx	lr
 8004800:	b510      	push	{r4, lr}
 8004802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800480a:	4291      	cmp	r1, r2
 800480c:	d1f9      	bne.n	8004802 <memcpy+0xe>
 800480e:	bd10      	pop	{r4, pc}

08004810 <memmove>:
 8004810:	4288      	cmp	r0, r1
 8004812:	b510      	push	{r4, lr}
 8004814:	eb01 0402 	add.w	r4, r1, r2
 8004818:	d902      	bls.n	8004820 <memmove+0x10>
 800481a:	4284      	cmp	r4, r0
 800481c:	4623      	mov	r3, r4
 800481e:	d807      	bhi.n	8004830 <memmove+0x20>
 8004820:	1e43      	subs	r3, r0, #1
 8004822:	42a1      	cmp	r1, r4
 8004824:	d008      	beq.n	8004838 <memmove+0x28>
 8004826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800482a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800482e:	e7f8      	b.n	8004822 <memmove+0x12>
 8004830:	4402      	add	r2, r0
 8004832:	4601      	mov	r1, r0
 8004834:	428a      	cmp	r2, r1
 8004836:	d100      	bne.n	800483a <memmove+0x2a>
 8004838:	bd10      	pop	{r4, pc}
 800483a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800483e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004842:	e7f7      	b.n	8004834 <memmove+0x24>

08004844 <_free_r>:
 8004844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004846:	2900      	cmp	r1, #0
 8004848:	d044      	beq.n	80048d4 <_free_r+0x90>
 800484a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800484e:	9001      	str	r0, [sp, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f1a1 0404 	sub.w	r4, r1, #4
 8004856:	bfb8      	it	lt
 8004858:	18e4      	addlt	r4, r4, r3
 800485a:	f000 f913 	bl	8004a84 <__malloc_lock>
 800485e:	4a1e      	ldr	r2, [pc, #120]	; (80048d8 <_free_r+0x94>)
 8004860:	9801      	ldr	r0, [sp, #4]
 8004862:	6813      	ldr	r3, [r2, #0]
 8004864:	b933      	cbnz	r3, 8004874 <_free_r+0x30>
 8004866:	6063      	str	r3, [r4, #4]
 8004868:	6014      	str	r4, [r2, #0]
 800486a:	b003      	add	sp, #12
 800486c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004870:	f000 b90e 	b.w	8004a90 <__malloc_unlock>
 8004874:	42a3      	cmp	r3, r4
 8004876:	d908      	bls.n	800488a <_free_r+0x46>
 8004878:	6825      	ldr	r5, [r4, #0]
 800487a:	1961      	adds	r1, r4, r5
 800487c:	428b      	cmp	r3, r1
 800487e:	bf01      	itttt	eq
 8004880:	6819      	ldreq	r1, [r3, #0]
 8004882:	685b      	ldreq	r3, [r3, #4]
 8004884:	1949      	addeq	r1, r1, r5
 8004886:	6021      	streq	r1, [r4, #0]
 8004888:	e7ed      	b.n	8004866 <_free_r+0x22>
 800488a:	461a      	mov	r2, r3
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	b10b      	cbz	r3, 8004894 <_free_r+0x50>
 8004890:	42a3      	cmp	r3, r4
 8004892:	d9fa      	bls.n	800488a <_free_r+0x46>
 8004894:	6811      	ldr	r1, [r2, #0]
 8004896:	1855      	adds	r5, r2, r1
 8004898:	42a5      	cmp	r5, r4
 800489a:	d10b      	bne.n	80048b4 <_free_r+0x70>
 800489c:	6824      	ldr	r4, [r4, #0]
 800489e:	4421      	add	r1, r4
 80048a0:	1854      	adds	r4, r2, r1
 80048a2:	42a3      	cmp	r3, r4
 80048a4:	6011      	str	r1, [r2, #0]
 80048a6:	d1e0      	bne.n	800486a <_free_r+0x26>
 80048a8:	681c      	ldr	r4, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	6053      	str	r3, [r2, #4]
 80048ae:	4421      	add	r1, r4
 80048b0:	6011      	str	r1, [r2, #0]
 80048b2:	e7da      	b.n	800486a <_free_r+0x26>
 80048b4:	d902      	bls.n	80048bc <_free_r+0x78>
 80048b6:	230c      	movs	r3, #12
 80048b8:	6003      	str	r3, [r0, #0]
 80048ba:	e7d6      	b.n	800486a <_free_r+0x26>
 80048bc:	6825      	ldr	r5, [r4, #0]
 80048be:	1961      	adds	r1, r4, r5
 80048c0:	428b      	cmp	r3, r1
 80048c2:	bf04      	itt	eq
 80048c4:	6819      	ldreq	r1, [r3, #0]
 80048c6:	685b      	ldreq	r3, [r3, #4]
 80048c8:	6063      	str	r3, [r4, #4]
 80048ca:	bf04      	itt	eq
 80048cc:	1949      	addeq	r1, r1, r5
 80048ce:	6021      	streq	r1, [r4, #0]
 80048d0:	6054      	str	r4, [r2, #4]
 80048d2:	e7ca      	b.n	800486a <_free_r+0x26>
 80048d4:	b003      	add	sp, #12
 80048d6:	bd30      	pop	{r4, r5, pc}
 80048d8:	2000018c 	.word	0x2000018c

080048dc <sbrk_aligned>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	4e0e      	ldr	r6, [pc, #56]	; (8004918 <sbrk_aligned+0x3c>)
 80048e0:	460c      	mov	r4, r1
 80048e2:	6831      	ldr	r1, [r6, #0]
 80048e4:	4605      	mov	r5, r0
 80048e6:	b911      	cbnz	r1, 80048ee <sbrk_aligned+0x12>
 80048e8:	f000 f8bc 	bl	8004a64 <_sbrk_r>
 80048ec:	6030      	str	r0, [r6, #0]
 80048ee:	4621      	mov	r1, r4
 80048f0:	4628      	mov	r0, r5
 80048f2:	f000 f8b7 	bl	8004a64 <_sbrk_r>
 80048f6:	1c43      	adds	r3, r0, #1
 80048f8:	d00a      	beq.n	8004910 <sbrk_aligned+0x34>
 80048fa:	1cc4      	adds	r4, r0, #3
 80048fc:	f024 0403 	bic.w	r4, r4, #3
 8004900:	42a0      	cmp	r0, r4
 8004902:	d007      	beq.n	8004914 <sbrk_aligned+0x38>
 8004904:	1a21      	subs	r1, r4, r0
 8004906:	4628      	mov	r0, r5
 8004908:	f000 f8ac 	bl	8004a64 <_sbrk_r>
 800490c:	3001      	adds	r0, #1
 800490e:	d101      	bne.n	8004914 <sbrk_aligned+0x38>
 8004910:	f04f 34ff 	mov.w	r4, #4294967295
 8004914:	4620      	mov	r0, r4
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	20000190 	.word	0x20000190

0800491c <_malloc_r>:
 800491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004920:	1ccd      	adds	r5, r1, #3
 8004922:	f025 0503 	bic.w	r5, r5, #3
 8004926:	3508      	adds	r5, #8
 8004928:	2d0c      	cmp	r5, #12
 800492a:	bf38      	it	cc
 800492c:	250c      	movcc	r5, #12
 800492e:	2d00      	cmp	r5, #0
 8004930:	4607      	mov	r7, r0
 8004932:	db01      	blt.n	8004938 <_malloc_r+0x1c>
 8004934:	42a9      	cmp	r1, r5
 8004936:	d905      	bls.n	8004944 <_malloc_r+0x28>
 8004938:	230c      	movs	r3, #12
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	2600      	movs	r6, #0
 800493e:	4630      	mov	r0, r6
 8004940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004944:	4e2e      	ldr	r6, [pc, #184]	; (8004a00 <_malloc_r+0xe4>)
 8004946:	f000 f89d 	bl	8004a84 <__malloc_lock>
 800494a:	6833      	ldr	r3, [r6, #0]
 800494c:	461c      	mov	r4, r3
 800494e:	bb34      	cbnz	r4, 800499e <_malloc_r+0x82>
 8004950:	4629      	mov	r1, r5
 8004952:	4638      	mov	r0, r7
 8004954:	f7ff ffc2 	bl	80048dc <sbrk_aligned>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	4604      	mov	r4, r0
 800495c:	d14d      	bne.n	80049fa <_malloc_r+0xde>
 800495e:	6834      	ldr	r4, [r6, #0]
 8004960:	4626      	mov	r6, r4
 8004962:	2e00      	cmp	r6, #0
 8004964:	d140      	bne.n	80049e8 <_malloc_r+0xcc>
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	4631      	mov	r1, r6
 800496a:	4638      	mov	r0, r7
 800496c:	eb04 0803 	add.w	r8, r4, r3
 8004970:	f000 f878 	bl	8004a64 <_sbrk_r>
 8004974:	4580      	cmp	r8, r0
 8004976:	d13a      	bne.n	80049ee <_malloc_r+0xd2>
 8004978:	6821      	ldr	r1, [r4, #0]
 800497a:	3503      	adds	r5, #3
 800497c:	1a6d      	subs	r5, r5, r1
 800497e:	f025 0503 	bic.w	r5, r5, #3
 8004982:	3508      	adds	r5, #8
 8004984:	2d0c      	cmp	r5, #12
 8004986:	bf38      	it	cc
 8004988:	250c      	movcc	r5, #12
 800498a:	4629      	mov	r1, r5
 800498c:	4638      	mov	r0, r7
 800498e:	f7ff ffa5 	bl	80048dc <sbrk_aligned>
 8004992:	3001      	adds	r0, #1
 8004994:	d02b      	beq.n	80049ee <_malloc_r+0xd2>
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	442b      	add	r3, r5
 800499a:	6023      	str	r3, [r4, #0]
 800499c:	e00e      	b.n	80049bc <_malloc_r+0xa0>
 800499e:	6822      	ldr	r2, [r4, #0]
 80049a0:	1b52      	subs	r2, r2, r5
 80049a2:	d41e      	bmi.n	80049e2 <_malloc_r+0xc6>
 80049a4:	2a0b      	cmp	r2, #11
 80049a6:	d916      	bls.n	80049d6 <_malloc_r+0xba>
 80049a8:	1961      	adds	r1, r4, r5
 80049aa:	42a3      	cmp	r3, r4
 80049ac:	6025      	str	r5, [r4, #0]
 80049ae:	bf18      	it	ne
 80049b0:	6059      	strne	r1, [r3, #4]
 80049b2:	6863      	ldr	r3, [r4, #4]
 80049b4:	bf08      	it	eq
 80049b6:	6031      	streq	r1, [r6, #0]
 80049b8:	5162      	str	r2, [r4, r5]
 80049ba:	604b      	str	r3, [r1, #4]
 80049bc:	4638      	mov	r0, r7
 80049be:	f104 060b 	add.w	r6, r4, #11
 80049c2:	f000 f865 	bl	8004a90 <__malloc_unlock>
 80049c6:	f026 0607 	bic.w	r6, r6, #7
 80049ca:	1d23      	adds	r3, r4, #4
 80049cc:	1af2      	subs	r2, r6, r3
 80049ce:	d0b6      	beq.n	800493e <_malloc_r+0x22>
 80049d0:	1b9b      	subs	r3, r3, r6
 80049d2:	50a3      	str	r3, [r4, r2]
 80049d4:	e7b3      	b.n	800493e <_malloc_r+0x22>
 80049d6:	6862      	ldr	r2, [r4, #4]
 80049d8:	42a3      	cmp	r3, r4
 80049da:	bf0c      	ite	eq
 80049dc:	6032      	streq	r2, [r6, #0]
 80049de:	605a      	strne	r2, [r3, #4]
 80049e0:	e7ec      	b.n	80049bc <_malloc_r+0xa0>
 80049e2:	4623      	mov	r3, r4
 80049e4:	6864      	ldr	r4, [r4, #4]
 80049e6:	e7b2      	b.n	800494e <_malloc_r+0x32>
 80049e8:	4634      	mov	r4, r6
 80049ea:	6876      	ldr	r6, [r6, #4]
 80049ec:	e7b9      	b.n	8004962 <_malloc_r+0x46>
 80049ee:	230c      	movs	r3, #12
 80049f0:	603b      	str	r3, [r7, #0]
 80049f2:	4638      	mov	r0, r7
 80049f4:	f000 f84c 	bl	8004a90 <__malloc_unlock>
 80049f8:	e7a1      	b.n	800493e <_malloc_r+0x22>
 80049fa:	6025      	str	r5, [r4, #0]
 80049fc:	e7de      	b.n	80049bc <_malloc_r+0xa0>
 80049fe:	bf00      	nop
 8004a00:	2000018c 	.word	0x2000018c

08004a04 <_realloc_r>:
 8004a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a08:	4680      	mov	r8, r0
 8004a0a:	4614      	mov	r4, r2
 8004a0c:	460e      	mov	r6, r1
 8004a0e:	b921      	cbnz	r1, 8004a1a <_realloc_r+0x16>
 8004a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a14:	4611      	mov	r1, r2
 8004a16:	f7ff bf81 	b.w	800491c <_malloc_r>
 8004a1a:	b92a      	cbnz	r2, 8004a28 <_realloc_r+0x24>
 8004a1c:	f7ff ff12 	bl	8004844 <_free_r>
 8004a20:	4625      	mov	r5, r4
 8004a22:	4628      	mov	r0, r5
 8004a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a28:	f000 f838 	bl	8004a9c <_malloc_usable_size_r>
 8004a2c:	4284      	cmp	r4, r0
 8004a2e:	4607      	mov	r7, r0
 8004a30:	d802      	bhi.n	8004a38 <_realloc_r+0x34>
 8004a32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a36:	d812      	bhi.n	8004a5e <_realloc_r+0x5a>
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	f7ff ff6e 	bl	800491c <_malloc_r>
 8004a40:	4605      	mov	r5, r0
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d0ed      	beq.n	8004a22 <_realloc_r+0x1e>
 8004a46:	42bc      	cmp	r4, r7
 8004a48:	4622      	mov	r2, r4
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	bf28      	it	cs
 8004a4e:	463a      	movcs	r2, r7
 8004a50:	f7ff fed0 	bl	80047f4 <memcpy>
 8004a54:	4631      	mov	r1, r6
 8004a56:	4640      	mov	r0, r8
 8004a58:	f7ff fef4 	bl	8004844 <_free_r>
 8004a5c:	e7e1      	b.n	8004a22 <_realloc_r+0x1e>
 8004a5e:	4635      	mov	r5, r6
 8004a60:	e7df      	b.n	8004a22 <_realloc_r+0x1e>
	...

08004a64 <_sbrk_r>:
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	4d06      	ldr	r5, [pc, #24]	; (8004a80 <_sbrk_r+0x1c>)
 8004a68:	2300      	movs	r3, #0
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	602b      	str	r3, [r5, #0]
 8004a70:	f7fc f8ce 	bl	8000c10 <_sbrk>
 8004a74:	1c43      	adds	r3, r0, #1
 8004a76:	d102      	bne.n	8004a7e <_sbrk_r+0x1a>
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	b103      	cbz	r3, 8004a7e <_sbrk_r+0x1a>
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
 8004a80:	20000194 	.word	0x20000194

08004a84 <__malloc_lock>:
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <__malloc_lock+0x8>)
 8004a86:	f000 b811 	b.w	8004aac <__retarget_lock_acquire_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	20000198 	.word	0x20000198

08004a90 <__malloc_unlock>:
 8004a90:	4801      	ldr	r0, [pc, #4]	; (8004a98 <__malloc_unlock+0x8>)
 8004a92:	f000 b80c 	b.w	8004aae <__retarget_lock_release_recursive>
 8004a96:	bf00      	nop
 8004a98:	20000198 	.word	0x20000198

08004a9c <_malloc_usable_size_r>:
 8004a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aa0:	1f18      	subs	r0, r3, #4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bfbc      	itt	lt
 8004aa6:	580b      	ldrlt	r3, [r1, r0]
 8004aa8:	18c0      	addlt	r0, r0, r3
 8004aaa:	4770      	bx	lr

08004aac <__retarget_lock_acquire_recursive>:
 8004aac:	4770      	bx	lr

08004aae <__retarget_lock_release_recursive>:
 8004aae:	4770      	bx	lr

08004ab0 <_init>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	bf00      	nop
 8004ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab6:	bc08      	pop	{r3}
 8004ab8:	469e      	mov	lr, r3
 8004aba:	4770      	bx	lr

08004abc <_fini>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	bf00      	nop
 8004ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac2:	bc08      	pop	{r3}
 8004ac4:	469e      	mov	lr, r3
 8004ac6:	4770      	bx	lr
